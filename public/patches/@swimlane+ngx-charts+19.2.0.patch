diff --git a/node_modules/@swimlane/ngx-charts/__ivy_ngcc__/fesm2015/swimlane-ngx-charts.js b/node_modules/@swimlane/ngx-charts/__ivy_ngcc__/fesm2015/swimlane-ngx-charts.js
new file mode 100644
index 0000000..16b1c4f
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/__ivy_ngcc__/fesm2015/swimlane-ngx-charts.js
@@ -0,0 +1,20653 @@
+import { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, Component, ViewEncapsulation, ElementRef, Renderer2, Inject, PLATFORM_ID, Input, ViewChild, HostBinding, HostListener, EventEmitter, ChangeDetectionStrategy, Output, Directive, NgZone, ChangeDetectorRef, NgModule, ViewContainerRef, ContentChild } from '@angular/core';
+import { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';
+import { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';
+import { __decorate } from 'tslib';
+import { fromEvent } from 'rxjs';
+import { debounceTime } from 'rxjs/operators';
+import { trigger, transition, style, animate } from '@angular/animations';
+import { select } from 'd3-selection';
+import { brushX } from 'd3-brush';
+import { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';
+import { curveLinear, area, line, curveCardinalClosed, lineRadial, arc, pie } from 'd3-shape';
+import { range, min, max, quantile } from 'd3-array';
+import { interpolate } from 'd3-interpolate';
+import { easeSinInOut } from 'd3-ease';
+import cloneDeep from 'clone-deep';
+import { format } from 'd3-format';
+import * as d3_color from 'd3-color';
+import { treemap, stratify } from 'd3-hierarchy';
+import { timeFormat } from 'd3-time-format';
+
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from '@angular/common';
+
+const _c0 = ["caretElm"];
+function TooltipContentComponent_span_4_ng_template_1_Template(rf, ctx) { }
+const _c1 = function (a0) { return { model: a0 }; };
+function TooltipContentComponent_span_4_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "span");
+    ɵngcc0.ɵɵtemplate(1, TooltipContentComponent_span_4_ng_template_1_Template, 0, 0, "ng-template", 5);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx_r1.context));
+} }
+function TooltipContentComponent_span_5_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "span", 6);
+} if (rf & 2) {
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("innerHTML", ctx_r2.title, ɵngcc0.ɵɵsanitizeHtml);
+} }
+function ChartComponent_ngx_charts_scale_legend_3_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵnamespaceHTML();
+    ɵngcc0.ɵɵelement(0, "ngx-charts-scale-legend", 4);
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("horizontal", ctx_r0.legendOptions && ctx_r0.legendOptions.position === ctx_r0.LegendPosition.Below)("valueRange", ctx_r0.legendOptions.domain)("colors", ctx_r0.legendOptions.colors)("height", ctx_r0.view[1])("width", ctx_r0.legendWidth);
+} }
+function ChartComponent_ngx_charts_legend_4_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵnamespaceHTML();
+    ɵngcc0.ɵɵelementStart(0, "ngx-charts-legend", 5);
+    ɵngcc0.ɵɵlistener("labelClick", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.legendLabelClick.emit($event); })("labelActivate", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelActivate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.legendLabelActivate.emit($event); })("labelDeactivate", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelDeactivate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.legendLabelDeactivate.emit($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("horizontal", ctx_r1.legendOptions && ctx_r1.legendOptions.position === ctx_r1.LegendPosition.Below)("data", ctx_r1.legendOptions.domain)("title", ctx_r1.legendOptions.title)("colors", ctx_r1.legendOptions.colors)("height", ctx_r1.view[1])("width", ctx_r1.legendWidth)("activeEntries", ctx_r1.activeEntries);
+} }
+const _c2 = ["*"];
+const _c3 = ["ngx-charts-axis-label", ""];
+const _c4 = ["ticksel"];
+const _c5 = ["ngx-charts-x-axis-ticks", ""];
+function XAxisTicksComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 3);
+    ɵngcc0.ɵɵelementStart(1, "title");
+    ɵngcc0.ɵɵtext(2);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementStart(3, "text", 4);
+    ɵngcc0.ɵɵtext(4);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const tick_r3 = ctx.$implicit;
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("transform", ctx_r1.tickTransform(tick_r3));
+    ɵngcc0.ɵɵadvance(2);
+    ɵngcc0.ɵɵtextInterpolate(ctx_r1.tickFormat(tick_r3));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵstyleProp("font-size", "12px");
+    ɵngcc0.ɵɵattribute("text-anchor", ctx_r1.textAnchor)("transform", ctx_r1.textTransform);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.tickTrim(ctx_r1.tickFormat(tick_r3)), " ");
+} }
+function XAxisTicksComponent__svg_g_3__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelement(1, "line", 6);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵattribute("transform", ctx_r5.gridLineTransform());
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵattribute("y1", -ctx_r5.gridLineHeight);
+} }
+function XAxisTicksComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_3__svg_g_1_Template, 2, 2, "g", 5);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const tick_r4 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("transform", ctx_r2.tickTransform(tick_r4));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.showGridLines);
+} }
+const _c6 = ["ngx-charts-x-axis", ""];
+function XAxisComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 2);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function XAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.emitTicksHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("trimTicks", ctx_r0.trimTicks)("rotateTicks", ctx_r0.rotateTicks)("maxTickLength", ctx_r0.maxTickLength)("tickFormatting", ctx_r0.tickFormatting)("tickArguments", ctx_r0.tickArguments)("tickStroke", ctx_r0.tickStroke)("scale", ctx_r0.xScale)("orient", ctx_r0.xOrient)("showGridLines", ctx_r0.showGridLines)("gridLineHeight", ctx_r0.dims.height)("width", ctx_r0.dims.width)("tickValues", ctx_r0.ticks);
+} }
+function XAxisComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 3);
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("label", ctx_r1.labelText)("offset", ctx_r1.labelOffset)("orient", ctx_r1.orientation.Bottom)("height", ctx_r1.dims.height)("width", ctx_r1.dims.width);
+} }
+const _c7 = ["ngx-charts-y-axis-ticks", ""];
+function YAxisTicksComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 4);
+    ɵngcc0.ɵɵelementStart(1, "title");
+    ɵngcc0.ɵɵtext(2);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementStart(3, "text", 5);
+    ɵngcc0.ɵɵtext(4);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const tick_r5 = ctx.$implicit;
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("transform", ctx_r1.transform(tick_r5));
+    ɵngcc0.ɵɵadvance(2);
+    ɵngcc0.ɵɵtextInterpolate(ctx_r1.tickFormat(tick_r5));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵstyleProp("font-size", "12px");
+    ɵngcc0.ɵɵattribute("dy", ctx_r1.dy)("x", ctx_r1.x1)("y", ctx_r1.y1)("text-anchor", ctx_r1.textAnchor);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.tickTrim(ctx_r1.tickFormat(tick_r5)), " ");
+} }
+function YAxisTicksComponent__svg_path_3_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "path", 6);
+} if (rf & 2) {
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("d", ctx_r2.referenceAreaPath)("transform", ctx_r2.gridLineTransform());
+} }
+function YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "line", 9);
+} if (rf & 2) {
+    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);
+    ɵngcc0.ɵɵattribute("x2", ctx_r8.gridLineWidth);
+} }
+function YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "line", 9);
+} if (rf & 2) {
+    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);
+    ɵngcc0.ɵɵattribute("x2", -ctx_r9.gridLineWidth);
+} }
+function YAxisTicksComponent__svg_g_4__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template, 1, 1, "line", 8);
+    ɵngcc0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template, 1, 1, "line", 8);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵattribute("transform", ctx_r7.gridLineTransform());
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.orient === ctx_r7.Orientation.Left);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.orient === ctx_r7.Orientation.Right);
+} }
+function YAxisTicksComponent__svg_g_4_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1_Template, 3, 3, "g", 7);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const tick_r6 = ctx.$implicit;
+    const ctx_r3 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("transform", ctx_r3.transform(tick_r6));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r3.showGridLines);
+} }
+function YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "title");
+    ɵngcc0.ɵɵtext(2);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementStart(3, "text", 11);
+    ɵngcc0.ɵɵtext(4);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const refLine_r10 = ɵngcc0.ɵɵnextContext(2).$implicit;
+    const ctx_r12 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(2);
+    ɵngcc0.ɵɵtextInterpolate(ctx_r12.tickTrim(ctx_r12.tickFormat(refLine_r10.value)));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵattribute("dy", ctx_r12.dy)("y", -6)("x", ctx_r12.gridLineWidth)("text-anchor", ctx_r12.textAnchor);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate1(" ", refLine_r10.name, " ");
+} }
+function YAxisTicksComponent__svg_g_5__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelement(1, "line", 10);
+    ɵngcc0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template, 5, 6, "g", 7);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const refLine_r10 = ɵngcc0.ɵɵnextContext().$implicit;
+    const ctx_r11 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("transform", ctx_r11.transform(refLine_r10.value));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵattribute("x2", ctx_r11.gridLineWidth)("transform", ctx_r11.gridLineTransform());
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r11.showRefLabels);
+} }
+function YAxisTicksComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_5__svg_g_1_Template, 3, 4, "g", 7);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r4 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.showRefLines);
+} }
+const _c8 = ["ngx-charts-y-axis", ""];
+function YAxisComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 2);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function YAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.emitTicksWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("trimTicks", ctx_r0.trimTicks)("maxTickLength", ctx_r0.maxTickLength)("tickFormatting", ctx_r0.tickFormatting)("tickArguments", ctx_r0.tickArguments)("tickValues", ctx_r0.ticks)("tickStroke", ctx_r0.tickStroke)("scale", ctx_r0.yScale)("orient", ctx_r0.yOrient)("showGridLines", ctx_r0.showGridLines)("gridLineWidth", ctx_r0.dims.width)("referenceLines", ctx_r0.referenceLines)("showRefLines", ctx_r0.showRefLines)("showRefLabels", ctx_r0.showRefLabels)("height", ctx_r0.dims.height);
+} }
+function YAxisComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 3);
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("label", ctx_r1.labelText)("offset", ctx_r1.labelOffset)("orient", ctx_r1.yOrient)("height", ctx_r1.dims.height)("width", ctx_r1.dims.width);
+} }
+const _c9 = ["ngx-charts-circle-series", ""];
+function CircleSeriesComponent__svg_g_0__svg_rect_3_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "rect", 4);
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵproperty("@animationState", "active");
+    ɵngcc0.ɵɵattribute("x", ctx_r1.circle.cx - ctx_r1.circle.radius)("y", ctx_r1.circle.cy)("width", ctx_r1.circle.radius * 2)("height", ctx_r1.circle.height)("fill", ctx_r1.gradientFill);
+} }
+const _c10 = function (a0) { return { name: a0 }; };
+function CircleSeriesComponent__svg_g_0_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "defs");
+    ɵngcc0.ɵɵelement(2, "g", 1);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵtemplate(3, CircleSeriesComponent__svg_g_0__svg_rect_3_Template, 1, 6, "rect", 2);
+    ɵngcc0.ɵɵelementStart(4, "g", 3);
+    ɵngcc0.ɵɵlistener("select", function CircleSeriesComponent__svg_g_0_Template__svg_g_select_4_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onClick(ctx_r2.circle.data); })("activate", function CircleSeriesComponent__svg_g_0_Template__svg_g_activate_4_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.activateCircle(); })("deactivate", function CircleSeriesComponent__svg_g_0_Template__svg_g_deactivate_4_listener() { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.deactivateCircle(); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(2);
+    ɵngcc0.ɵɵproperty("orientation", ctx_r0.barOrientation.Vertical)("name", ctx_r0.gradientId)("stops", ctx_r0.circle.gradientStops);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.barVisible && ctx_r0.type === "standard");
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵclassProp("active", ctx_r0.isActive(ɵngcc0.ɵɵpureFunction1(19, _c10, ctx_r0.circle.seriesName)));
+    ɵngcc0.ɵɵproperty("cx", ctx_r0.circle.cx)("cy", ctx_r0.circle.cy)("r", ctx_r0.circle.radius)("fill", ctx_r0.circle.color)("pointerEvents", ctx_r0.circle.value === 0 ? "none" : "all")("data", ctx_r0.circle.value)("classNames", ctx_r0.circle.classNames)("tooltipDisabled", ctx_r0.tooltipDisabled)("tooltipPlacement", ctx_r0.placementTypes.Top)("tooltipType", ctx_r0.styleTypes.tooltip)("tooltipTitle", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(ctx_r0.circle))("tooltipTemplate", ctx_r0.tooltipTemplate)("tooltipContext", ctx_r0.circle.data);
+} }
+const _c11 = ["ngx-charts-circle", ""];
+const _c12 = ["ngx-charts-grid-panel", ""];
+const _c13 = ["ngx-charts-grid-panel-series", ""];
+function GridPanelSeriesComponent__svg_g_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 1);
+} if (rf & 2) {
+    const gridPanel_r1 = ctx.$implicit;
+    ɵngcc0.ɵɵclassProp("grid-panel", true)("odd", gridPanel_r1.class === "odd")("even", gridPanel_r1.class === "even");
+    ɵngcc0.ɵɵproperty("height", gridPanel_r1.height)("width", gridPanel_r1.width)("x", gridPanel_r1.x)("y", gridPanel_r1.y);
+} }
+const _c14 = ["ngx-charts-svg-linear-gradient", ""];
+function SvgLinearGradientComponent__svg_stop_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "stop");
+} if (rf & 2) {
+    const stop_r1 = ctx.$implicit;
+    ɵngcc0.ɵɵstyleProp("stop-color", stop_r1.color)("stop-opacity", stop_r1.opacity);
+    ɵngcc0.ɵɵattribute("offset", stop_r1.offset + "%");
+} }
+const _c15 = ["ngx-charts-svg-radial-gradient", ""];
+function SvgRadialGradientComponent__svg_stop_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "stop");
+} if (rf & 2) {
+    const stop_r1 = ctx.$implicit;
+    ɵngcc0.ɵɵstyleProp("stop-color", stop_r1.color)("stop-opacity", stop_r1.opacity);
+    ɵngcc0.ɵɵattribute("offset", stop_r1.offset + "%");
+} }
+const _c16 = ["ngx-charts-area", ""];
+function AreaComponent__svg_defs_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "defs");
+    ɵngcc0.ɵɵelement(1, "g", 2);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("orientation", ctx_r0.barOrientation.Vertical)("name", ctx_r0.gradientId)("stops", ctx_r0.gradientStops);
+} }
+const _c17 = ["ngx-charts-count-up", ""];
+const _c18 = ["tooltipAnchor"];
+const _c19 = ["ngx-charts-tooltip-area", ""];
+function TooltipArea__svg_ng_template_2__xhtml_div_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "div", 6);
+    ɵngcc0.ɵɵelement(1, "span", 7);
+    ɵngcc0.ɵɵtext(2);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const tooltipItem_r5 = ctx.$implicit;
+    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵstyleProp("background-color", tooltipItem_r5.color);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.getToolTipText(tooltipItem_r5), " ");
+} }
+function TooltipArea__svg_ng_template_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵnamespaceHTML();
+    ɵngcc0.ɵɵelementStart(0, "div", 4);
+    ɵngcc0.ɵɵtemplate(1, TooltipArea__svg_ng_template_2__xhtml_div_1_Template, 3, 3, "div", 5);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const model_r3 = ctx.model;
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", model_r3);
+} }
+const _c20 = ["ngx-charts-timeline", ""];
+function LegendComponent_header_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "header", 4);
+    ɵngcc0.ɵɵelementStart(1, "span", 5);
+    ɵngcc0.ɵɵtext(2);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(2);
+    ɵngcc0.ɵɵtextInterpolate(ctx_r0.title);
+} }
+function LegendComponent_li_4_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵelementStart(0, "li", 6);
+    ɵngcc0.ɵɵelementStart(1, "ngx-charts-legend-entry", 7);
+    ɵngcc0.ɵɵlistener("select", function LegendComponent_li_4_Template_ngx_charts_legend_entry_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.labelClick.emit($event); })("activate", function LegendComponent_li_4_Template_ngx_charts_legend_entry_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.activate($event); })("deactivate", function LegendComponent_li_4_Template_ngx_charts_legend_entry_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.deactivate($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const entry_r2 = ctx.$implicit;
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("label", entry_r2.label)("formattedLabel", entry_r2.formattedLabel)("color", entry_r2.color)("isActive", ctx_r1.isActive(entry_r2));
+} }
+function AdvancedLegendComponent_div_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "div", 7);
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("countTo", ctx_r0.roundedTotal)("valueFormatting", ctx_r0.valueFormatting);
+} }
+function AdvancedLegendComponent_div_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "div", 8);
+    ɵngcc0.ɵɵtext(1);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.valueFormatting ? ctx_r1.valueFormatting(ctx_r1.roundedTotal) : ctx_r1.defaultValueFormatting(ctx_r1.roundedTotal), " ");
+} }
+function AdvancedLegendComponent_div_7_div_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "div", 16);
+} if (rf & 2) {
+    const legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;
+    const ctx_r4 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("countTo", legendItem_r3._value)("valueFormatting", ctx_r4.valueFormatting);
+} }
+function AdvancedLegendComponent_div_7_div_3_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "div", 17);
+    ɵngcc0.ɵɵtext(1);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;
+    const ctx_r5 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r5.valueFormatting ? ctx_r5.valueFormatting(legendItem_r3.value) : ctx_r5.defaultValueFormatting(legendItem_r3.value), " ");
+} }
+function AdvancedLegendComponent_div_7_div_6_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "div", 18);
+} if (rf & 2) {
+    const legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;
+    ɵngcc0.ɵɵproperty("countTo", legendItem_r3.percentage)("countSuffix", "%");
+} }
+function AdvancedLegendComponent_div_7_div_7_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "div", 19);
+    ɵngcc0.ɵɵtext(1);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const legendItem_r3 = ɵngcc0.ɵɵnextContext().$implicit;
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate1("", legendItem_r3.percentage.toLocaleString(), "%");
+} }
+function AdvancedLegendComponent_div_7_Template(rf, ctx) { if (rf & 1) {
+    const _r13 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵelementStart(0, "div", 9);
+    ɵngcc0.ɵɵlistener("mouseenter", function AdvancedLegendComponent_div_7_Template_div_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const legendItem_r3 = ctx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.activate.emit(legendItem_r3.data); })("mouseleave", function AdvancedLegendComponent_div_7_Template_div_mouseleave_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const legendItem_r3 = ctx.$implicit; const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.deactivate.emit(legendItem_r3.data); })("click", function AdvancedLegendComponent_div_7_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const legendItem_r3 = ctx.$implicit; const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.select.emit(legendItem_r3.data); });
+    ɵngcc0.ɵɵelement(1, "div", 10);
+    ɵngcc0.ɵɵtemplate(2, AdvancedLegendComponent_div_7_div_2_Template, 1, 2, "div", 11);
+    ɵngcc0.ɵɵtemplate(3, AdvancedLegendComponent_div_7_div_3_Template, 2, 1, "div", 12);
+    ɵngcc0.ɵɵelementStart(4, "div", 13);
+    ɵngcc0.ɵɵtext(5);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵtemplate(6, AdvancedLegendComponent_div_7_div_6_Template, 1, 2, "div", 14);
+    ɵngcc0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_div_7_Template, 2, 1, "div", 15);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const legendItem_r3 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵstyleProp("border-left-color", legendItem_r3.color);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.animations);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.animations);
+    ɵngcc0.ɵɵadvance(2);
+    ɵngcc0.ɵɵtextInterpolate(legendItem_r3.displayLabel);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.animations);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", !ctx_r2.animations);
+} }
+const _c21 = ["tooltipTemplate"];
+const _c22 = ["seriesTooltipTemplate"];
+function AreaChartComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 7);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function AreaChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showGridLines", ctx_r0.showGridLines)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function AreaChartComponent__svg_g_6_Template(rf, ctx) { if (rf & 1) {
+    const _r8 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 8);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function AreaChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showGridLines", ctx_r1.showGridLines)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks);
+} }
+function AreaChartComponent__svg_g_8_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelement(1, "g", 9);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r9 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r2.xScale)("yScale", ctx_r2.yScale)("baseValue", ctx_r2.baseValue)("colors", ctx_r2.colors)("data", series_r9)("activeEntries", ctx_r2.activeEntries)("scaleType", ctx_r2.scaleType)("gradient", ctx_r2.gradient)("curve", ctx_r2.curve)("animations", ctx_r2.animations);
+} }
+function AreaChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r13 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 13);
+    ɵngcc0.ɵɵlistener("select", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const series_r11 = ctx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.onClick($event, series_r11); })("activate", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.onActivate($event); })("deactivate", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.onDeactivate($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r11 = ctx.$implicit;
+    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r10.xScale)("yScale", ctx_r10.yScale)("colors", ctx_r10.colors)("activeEntries", ctx_r10.activeEntries)("data", series_r11)("scaleType", ctx_r10.scaleType)("visibleValue", ctx_r10.hoveredVertical)("tooltipDisabled", ctx_r10.tooltipDisabled)("tooltipTemplate", ctx_r10.tooltipTemplate);
+} }
+function AreaChartComponent__svg_g_9_Template(rf, ctx) { if (rf & 1) {
+    const _r17 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 10);
+    ɵngcc0.ɵɵlistener("mouseleave", function AreaChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.hideCircles(); });
+    ɵngcc0.ɵɵelementStart(1, "g", 11);
+    ɵngcc0.ɵɵlistener("hover", function AreaChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.updateHoveredVertical($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵtemplate(2, AreaChartComponent__svg_g_9__svg_g_2_Template, 2, 9, "g", 12);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r3 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("dims", ctx_r3.dims)("xSet", ctx_r3.xSet)("xScale", ctx_r3.xScale)("yScale", ctx_r3.yScale)("results", ctx_r3.results)("colors", ctx_r3.colors)("tooltipDisabled", ctx_r3.tooltipDisabled)("tooltipTemplate", ctx_r3.seriesTooltipTemplate);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.results);
+} }
+function AreaChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelement(1, "g", 15);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r20 = ctx.$implicit;
+    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r19.timelineXScale)("yScale", ctx_r19.timelineYScale)("baseValue", ctx_r19.baseValue)("colors", ctx_r19.colors)("data", series_r20)("scaleType", ctx_r19.scaleType)("gradient", ctx_r19.gradient)("curve", ctx_r19.curve)("animations", ctx_r19.animations);
+} }
+const _c23 = function (a0, a1) { return [a0, a1]; };
+function AreaChartComponent__svg_g_10_Template(rf, ctx) { if (rf & 1) {
+    const _r22 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 14);
+    ɵngcc0.ɵɵlistener("onDomainChange", function AreaChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.updateDomain($event); });
+    ɵngcc0.ɵɵtemplate(1, AreaChartComponent__svg_g_10__svg_g_1_Template, 2, 9, "g", 4);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r4 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("results", ctx_r4.results)("view", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))("height", ctx_r4.timelineHeight)("scheme", ctx_r4.scheme)("customColors", ctx_r4.customColors)("legend", ctx_r4.legend)("scaleType", ctx_r4.scaleType);
+    ɵngcc0.ɵɵattribute("transform", ctx_r4.timelineTransform);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.results)("ngForTrackBy", ctx_r4.trackBy);
+} }
+function AreaChartNormalizedComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 7);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function AreaChartNormalizedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showGridLines", ctx_r0.showGridLines)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function AreaChartNormalizedComponent__svg_g_6_Template(rf, ctx) { if (rf & 1) {
+    const _r8 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 8);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function AreaChartNormalizedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showGridLines", ctx_r1.showGridLines)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks);
+} }
+function AreaChartNormalizedComponent__svg_g_8_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelement(1, "g", 9);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r9 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r2.xScale)("yScale", ctx_r2.yScale)("colors", ctx_r2.colors)("data", series_r9)("scaleType", ctx_r2.scaleType)("activeEntries", ctx_r2.activeEntries)("gradient", ctx_r2.gradient)("normalized", true)("curve", ctx_r2.curve)("animations", ctx_r2.animations);
+} }
+function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r13 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 13);
+    ɵngcc0.ɵɵlistener("select", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const series_r11 = ctx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.onClick($event, series_r11); })("activate", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.onActivate($event); })("deactivate", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.onDeactivate($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r11 = ctx.$implicit;
+    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("type", ctx_r10.seriesType.Stacked)("xScale", ctx_r10.xScale)("yScale", ctx_r10.yScale)("colors", ctx_r10.colors)("activeEntries", ctx_r10.activeEntries)("data", series_r11)("scaleType", ctx_r10.scaleType)("visibleValue", ctx_r10.hoveredVertical)("tooltipDisabled", ctx_r10.tooltipDisabled)("tooltipTemplate", ctx_r10.tooltipTemplate);
+} }
+function AreaChartNormalizedComponent__svg_g_9_Template(rf, ctx) { if (rf & 1) {
+    const _r17 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 10);
+    ɵngcc0.ɵɵlistener("mouseleave", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.hideCircles(); });
+    ɵngcc0.ɵɵelementStart(1, "g", 11);
+    ɵngcc0.ɵɵlistener("hover", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.updateHoveredVertical($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵtemplate(2, AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template, 2, 10, "g", 12);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r3 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("dims", ctx_r3.dims)("xSet", ctx_r3.xSet)("xScale", ctx_r3.xScale)("yScale", ctx_r3.yScale)("results", ctx_r3.results)("colors", ctx_r3.colors)("showPercentage", true)("tooltipDisabled", ctx_r3.tooltipDisabled)("tooltipTemplate", ctx_r3.seriesTooltipTemplate);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.results);
+} }
+function AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelement(1, "g", 15);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r20 = ctx.$implicit;
+    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r19.timelineXScale)("yScale", ctx_r19.timelineYScale)("colors", ctx_r19.colors)("data", series_r20)("scaleType", ctx_r19.scaleType)("gradient", ctx_r19.gradient)("normalized", true)("curve", ctx_r19.curve)("animations", ctx_r19.animations);
+} }
+function AreaChartNormalizedComponent__svg_g_10_Template(rf, ctx) { if (rf & 1) {
+    const _r22 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 14);
+    ɵngcc0.ɵɵlistener("onDomainChange", function AreaChartNormalizedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.updateDomain($event); });
+    ɵngcc0.ɵɵtemplate(1, AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template, 2, 9, "g", 4);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r4 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("results", ctx_r4.results)("view", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))("height", ctx_r4.timelineHeight)("scheme", ctx_r4.scheme)("customColors", ctx_r4.customColors)("legend", ctx_r4.legend)("scaleType", ctx_r4.scaleType);
+    ɵngcc0.ɵɵattribute("transform", ctx_r4.timelineTransform);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.results)("ngForTrackBy", ctx_r4.trackBy);
+} }
+const _c24 = ".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n";
+function AreaChartStackedComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 7);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function AreaChartStackedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showGridLines", ctx_r0.showGridLines)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function AreaChartStackedComponent__svg_g_6_Template(rf, ctx) { if (rf & 1) {
+    const _r8 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 8);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function AreaChartStackedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showGridLines", ctx_r1.showGridLines)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks);
+} }
+function AreaChartStackedComponent__svg_g_8_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelement(1, "g", 9);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r9 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r2.xScale)("yScale", ctx_r2.yScale)("colors", ctx_r2.colors)("data", series_r9)("scaleType", ctx_r2.scaleType)("gradient", ctx_r2.gradient)("activeEntries", ctx_r2.activeEntries)("stacked", true)("curve", ctx_r2.curve)("animations", ctx_r2.animations);
+} }
+function AreaChartStackedComponent__svg_g_9__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r13 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 12);
+    ɵngcc0.ɵɵlistener("select", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const series_r11 = ctx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.onClick($event, series_r11); })("activate", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.onActivate($event); })("deactivate", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.onDeactivate($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r11 = ctx.$implicit;
+    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("type", ctx_r10.seriesType.Stacked)("xScale", ctx_r10.xScale)("yScale", ctx_r10.yScale)("colors", ctx_r10.colors)("activeEntries", ctx_r10.activeEntries)("data", series_r11)("scaleType", ctx_r10.scaleType)("visibleValue", ctx_r10.hoveredVertical)("tooltipDisabled", ctx_r10.tooltipDisabled)("tooltipTemplate", ctx_r10.tooltipTemplate);
+} }
+function AreaChartStackedComponent__svg_g_9_Template(rf, ctx) { if (rf & 1) {
+    const _r17 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 10);
+    ɵngcc0.ɵɵlistener("mouseleave", function AreaChartStackedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.hideCircles(); });
+    ɵngcc0.ɵɵelementStart(1, "g", 11);
+    ɵngcc0.ɵɵlistener("hover", function AreaChartStackedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.updateHoveredVertical($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵtemplate(2, AreaChartStackedComponent__svg_g_9__svg_g_2_Template, 2, 10, "g", 4);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r3 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("dims", ctx_r3.dims)("xSet", ctx_r3.xSet)("xScale", ctx_r3.xScale)("yScale", ctx_r3.yScale)("results", ctx_r3.results)("colors", ctx_r3.colors)("tooltipDisabled", ctx_r3.tooltipDisabled)("tooltipTemplate", ctx_r3.seriesTooltipTemplate);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.results)("ngForTrackBy", ctx_r3.trackBy);
+} }
+function AreaChartStackedComponent__svg_g_10__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelement(1, "g", 14);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r20 = ctx.$implicit;
+    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r19.timelineXScale)("yScale", ctx_r19.timelineYScale)("colors", ctx_r19.colors)("data", series_r20)("scaleType", ctx_r19.scaleType)("gradient", ctx_r19.gradient)("stacked", true)("curve", ctx_r19.curve)("animations", ctx_r19.animations);
+} }
+function AreaChartStackedComponent__svg_g_10_Template(rf, ctx) { if (rf & 1) {
+    const _r22 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 13);
+    ɵngcc0.ɵɵlistener("onDomainChange", function AreaChartStackedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.updateDomain($event); });
+    ɵngcc0.ɵɵtemplate(1, AreaChartStackedComponent__svg_g_10__svg_g_1_Template, 2, 9, "g", 4);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r4 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("results", ctx_r4.results)("view", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))("height", ctx_r4.timelineHeight)("scheme", ctx_r4.scheme)("customColors", ctx_r4.customColors)("legend", ctx_r4.legend)("scaleType", ctx_r4.scaleType);
+    ɵngcc0.ɵɵattribute("transform", ctx_r4.timelineTransform);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.results)("ngForTrackBy", ctx_r4.trackBy);
+} }
+const _c25 = ["ngx-charts-area-series", ""];
+const _c26 = ["ngx-charts-bar", ""];
+function BarComponent__svg_defs_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "defs");
+    ɵngcc0.ɵɵelement(1, "g", 2);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("orientation", ctx_r0.orientation)("name", ctx_r0.gradientId)("stops", ctx_r0.gradientStops);
+} }
+function BarHorizontalComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 5);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarHorizontalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showGridLines", ctx_r0.showGridLines)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function BarHorizontalComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    const _r5 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 6);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarHorizontalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks)("yAxisOffset", ctx_r1.dataLabelMaxWidth.negative);
+} }
+function BarHorizontal2DComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 6);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarHorizontal2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.valueScale)("dims", ctx_r0.dims)("showGridLines", ctx_r0.showGridLines)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function BarHorizontal2DComponent__svg_g_4_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 7);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarHorizontal2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.groupScale)("dims", ctx_r1.dims)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks)("yAxisOffset", ctx_r1.dataLabelMaxWidth.negative);
+} }
+function BarHorizontal2DComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    const _r10 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 8);
+    ɵngcc0.ɵɵlistener("select", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onClick($event, group_r7); })("activate", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onActivate($event, group_r7); })("deactivate", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onDeactivate($event, group_r7); })("dataLabelWidthChanged", function BarHorizontal2DComponent__svg_g_5_Template__svg_g_dataLabelWidthChanged_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const index_r8 = ctx.index; const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onDataLabelMaxWidthChanged($event, index_r8); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const group_r7 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active");
+    ɵngcc0.ɵɵattribute("transform", ctx_r2.groupTransform(group_r7));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r2.valueScale)("activeEntries", ctx_r2.activeEntries)("yScale", ctx_r2.innerScale)("colors", ctx_r2.colors)("series", group_r7.series)("dims", ctx_r2.dims)("gradient", ctx_r2.gradient)("tooltipDisabled", ctx_r2.tooltipDisabled)("tooltipTemplate", ctx_r2.tooltipTemplate)("seriesName", group_r7.name)("roundEdges", ctx_r2.roundEdges)("animations", ctx_r2.animations)("showDataLabel", ctx_r2.showDataLabel)("dataLabelFormatting", ctx_r2.dataLabelFormatting)("noBarWhenZero", ctx_r2.noBarWhenZero);
+} }
+function BarHorizontalNormalizedComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 5);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarHorizontalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showGridLines", ctx_r0.showGridLines)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function BarHorizontalNormalizedComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 6);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarHorizontalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks);
+} }
+function BarHorizontalNormalizedComponent__svg_g_4_Template(rf, ctx) { if (rf & 1) {
+    const _r9 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 7);
+    ɵngcc0.ɵɵlistener("select", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const group_r7 = ctx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onClick($event, group_r7); })("activate", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const group_r7 = ctx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onActivate($event, group_r7); })("deactivate", function BarHorizontalNormalizedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const group_r7 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onDeactivate($event, group_r7); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const group_r7 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active");
+    ɵngcc0.ɵɵattribute("transform", ctx_r2.groupTransform(group_r7));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("type", ctx_r2.barChartType.Normalized)("xScale", ctx_r2.xScale)("yScale", ctx_r2.yScale)("activeEntries", ctx_r2.activeEntries)("colors", ctx_r2.colors)("series", group_r7.series)("dims", ctx_r2.dims)("gradient", ctx_r2.gradient)("tooltipDisabled", ctx_r2.tooltipDisabled)("tooltipTemplate", ctx_r2.tooltipTemplate)("seriesName", group_r7.name)("animations", ctx_r2.animations)("noBarWhenZero", ctx_r2.noBarWhenZero);
+} }
+function BarHorizontalStackedComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 5);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarHorizontalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showGridLines", ctx_r0.showGridLines)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function BarHorizontalStackedComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 6);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarHorizontalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks)("yAxisOffset", ctx_r1.dataLabelMaxWidth.negative);
+} }
+function BarHorizontalStackedComponent__svg_g_4_Template(rf, ctx) { if (rf & 1) {
+    const _r10 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 7);
+    ɵngcc0.ɵɵlistener("select", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onClick($event, group_r7); })("activate", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onActivate($event, group_r7); })("deactivate", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onDeactivate($event, group_r7); })("dataLabelWidthChanged", function BarHorizontalStackedComponent__svg_g_4_Template__svg_g_dataLabelWidthChanged_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const index_r8 = ctx.index; const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onDataLabelMaxWidthChanged($event, index_r8); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const group_r7 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active");
+    ɵngcc0.ɵɵattribute("transform", ctx_r2.groupTransform(group_r7));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("type", ctx_r2.barChartType.Stacked)("xScale", ctx_r2.xScale)("yScale", ctx_r2.yScale)("colors", ctx_r2.colors)("series", group_r7.series)("activeEntries", ctx_r2.activeEntries)("dims", ctx_r2.dims)("gradient", ctx_r2.gradient)("tooltipDisabled", ctx_r2.tooltipDisabled)("tooltipTemplate", ctx_r2.tooltipTemplate)("seriesName", group_r7.name)("animations", ctx_r2.animations)("showDataLabel", ctx_r2.showDataLabel)("dataLabelFormatting", ctx_r2.dataLabelFormatting)("noBarWhenZero", ctx_r2.noBarWhenZero);
+} }
+function BarVerticalComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 5);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarVerticalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showGridLines", ctx_r0.showGridLines)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks)("xAxisOffset", ctx_r0.dataLabelMaxHeight.negative);
+} }
+function BarVerticalComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    const _r5 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 6);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarVerticalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showGridLines", ctx_r1.showGridLines)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks);
+} }
+function BarVertical2DComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 6);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarVertical2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.groupScale)("dims", ctx_r0.dims)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks)("xAxisOffset", ctx_r0.dataLabelMaxHeight.negative);
+} }
+function BarVertical2DComponent__svg_g_4_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 7);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarVertical2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.valueScale)("dims", ctx_r1.dims)("showGridLines", ctx_r1.showGridLines)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks);
+} }
+function BarVertical2DComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    const _r10 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 8);
+    ɵngcc0.ɵɵlistener("select", function BarVertical2DComponent__svg_g_5_Template__svg_g_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onClick($event, group_r7); })("activate", function BarVertical2DComponent__svg_g_5_Template__svg_g_activate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onActivate($event, group_r7); })("deactivate", function BarVertical2DComponent__svg_g_5_Template__svg_g_deactivate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onDeactivate($event, group_r7); })("dataLabelHeightChanged", function BarVertical2DComponent__svg_g_5_Template__svg_g_dataLabelHeightChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const index_r8 = ctx.index; const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onDataLabelMaxHeightChanged($event, index_r8); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const group_r7 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active")("activeEntries", ctx_r2.activeEntries)("xScale", ctx_r2.innerScale)("yScale", ctx_r2.valueScale)("colors", ctx_r2.colors)("series", group_r7.series)("dims", ctx_r2.dims)("gradient", ctx_r2.gradient)("tooltipDisabled", ctx_r2.tooltipDisabled)("tooltipTemplate", ctx_r2.tooltipTemplate)("showDataLabel", ctx_r2.showDataLabel)("dataLabelFormatting", ctx_r2.dataLabelFormatting)("seriesName", group_r7.name)("roundEdges", ctx_r2.roundEdges)("animations", ctx_r2.animations)("noBarWhenZero", ctx_r2.noBarWhenZero);
+    ɵngcc0.ɵɵattribute("transform", ctx_r2.groupTransform(group_r7));
+} }
+function BarVerticalNormalizedComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 5);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarVerticalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function BarVerticalNormalizedComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 6);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarVerticalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showGridLines", ctx_r1.showGridLines)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks);
+} }
+function BarVerticalNormalizedComponent__svg_g_4_Template(rf, ctx) { if (rf & 1) {
+    const _r9 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 7);
+    ɵngcc0.ɵɵlistener("select", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const group_r7 = ctx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onClick($event, group_r7); })("activate", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const group_r7 = ctx.$implicit; const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onActivate($event, group_r7); })("deactivate", function BarVerticalNormalizedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const group_r7 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onDeactivate($event, group_r7); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const group_r7 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active");
+    ɵngcc0.ɵɵattribute("transform", ctx_r2.groupTransform(group_r7));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("type", ctx_r2.barChartType.Normalized)("xScale", ctx_r2.xScale)("yScale", ctx_r2.yScale)("activeEntries", ctx_r2.activeEntries)("colors", ctx_r2.colors)("series", group_r7.series)("dims", ctx_r2.dims)("gradient", ctx_r2.gradient)("tooltipDisabled", ctx_r2.tooltipDisabled)("tooltipTemplate", ctx_r2.tooltipTemplate)("seriesName", group_r7.name)("animations", ctx_r2.animations)("noBarWhenZero", ctx_r2.noBarWhenZero);
+} }
+function BarVerticalStackedComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 5);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarVerticalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks)("xAxisOffset", ctx_r0.dataLabelMaxHeight.negative);
+} }
+function BarVerticalStackedComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 6);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BarVerticalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showGridLines", ctx_r1.showGridLines)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks);
+} }
+function BarVerticalStackedComponent__svg_g_4_Template(rf, ctx) { if (rf & 1) {
+    const _r10 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 7);
+    ɵngcc0.ɵɵlistener("select", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.onClick($event, group_r7); })("activate", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onActivate($event, group_r7); })("deactivate", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const group_r7 = ctx.$implicit; const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onDeactivate($event, group_r7); })("dataLabelHeightChanged", function BarVerticalStackedComponent__svg_g_4_Template__svg_g_dataLabelHeightChanged_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const index_r8 = ctx.index; const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onDataLabelMaxHeightChanged($event, index_r8); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const group_r7 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active");
+    ɵngcc0.ɵɵattribute("transform", ctx_r2.groupTransform(group_r7));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("type", ctx_r2.barChartType.Stacked)("xScale", ctx_r2.xScale)("yScale", ctx_r2.yScale)("activeEntries", ctx_r2.activeEntries)("colors", ctx_r2.colors)("series", group_r7.series)("dims", ctx_r2.dims)("gradient", ctx_r2.gradient)("tooltipDisabled", ctx_r2.tooltipDisabled)("tooltipTemplate", ctx_r2.tooltipTemplate)("showDataLabel", ctx_r2.showDataLabel)("dataLabelFormatting", ctx_r2.dataLabelFormatting)("seriesName", group_r7.name)("animations", ctx_r2.animations)("noBarWhenZero", ctx_r2.noBarWhenZero);
+} }
+const _c27 = ["ngx-charts-series-horizontal", ""];
+function SeriesHorizontal__svg_g_0_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 2);
+    ɵngcc0.ɵɵlistener("select", function SeriesHorizontal__svg_g_0_Template__svg_g_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.click($event); })("activate", function SeriesHorizontal__svg_g_0_Template__svg_g_activate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.activate.emit($event); })("deactivate", function SeriesHorizontal__svg_g_0_Template__svg_g_deactivate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.deactivate.emit($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const bar_r2 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active")("width", bar_r2.width)("height", bar_r2.height)("x", bar_r2.x)("y", bar_r2.y)("fill", bar_r2.color)("stops", bar_r2.gradientStops)("data", bar_r2.data)("orientation", ctx_r0.barOrientation.Horizontal)("roundEdges", bar_r2.roundEdges)("gradient", ctx_r0.gradient)("isActive", ctx_r0.isActive(bar_r2.data))("ariaLabel", bar_r2.ariaLabel)("animations", ctx_r0.animations)("tooltipDisabled", ctx_r0.tooltipDisabled)("tooltipPlacement", ctx_r0.tooltipPlacement)("tooltipType", ctx_r0.tooltipType)("tooltipTitle", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)("tooltipTemplate", ctx_r0.tooltipTemplate)("tooltipContext", bar_r2.data)("noBarWhenZero", ctx_r0.noBarWhenZero);
+} }
+function SeriesHorizontal__svg_g_1__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    const _r11 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 4);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function SeriesHorizontal__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const i_r9 = ctx.index; const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.dataLabelWidthChanged.emit({ size: $event, index: i_r9 }); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const b_r8 = ctx.$implicit;
+    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵproperty("barX", b_r8.x)("barY", b_r8.y)("barWidth", b_r8.width)("barHeight", b_r8.height)("value", b_r8.total)("valueFormatting", ctx_r7.dataLabelFormatting)("orientation", ctx_r7.barOrientation.Horizontal);
+} }
+function SeriesHorizontal__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1__svg_g_1_Template, 1, 7, "g", 3);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.barsForDataLabels)("ngForTrackBy", ctx_r1.trackDataLabelBy);
+} }
+const _c28 = ["ngx-charts-series-vertical", ""];
+function SeriesVerticalComponent__svg_g_0_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 2);
+    ɵngcc0.ɵɵlistener("select", function SeriesVerticalComponent__svg_g_0_Template__svg_g_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.onClick($event); })("activate", function SeriesVerticalComponent__svg_g_0_Template__svg_g_activate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.activate.emit($event); })("deactivate", function SeriesVerticalComponent__svg_g_0_Template__svg_g_deactivate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.deactivate.emit($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const bar_r2 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active")("@.disabled", !ctx_r0.animations)("width", bar_r2.width)("height", bar_r2.height)("x", bar_r2.x)("y", bar_r2.y)("fill", bar_r2.color)("stops", bar_r2.gradientStops)("data", bar_r2.data)("orientation", ctx_r0.barOrientation.Vertical)("roundEdges", bar_r2.roundEdges)("gradient", ctx_r0.gradient)("ariaLabel", bar_r2.ariaLabel)("isActive", ctx_r0.isActive(bar_r2.data))("tooltipDisabled", ctx_r0.tooltipDisabled)("tooltipPlacement", ctx_r0.tooltipPlacement)("tooltipType", ctx_r0.tooltipType)("tooltipTitle", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)("tooltipTemplate", ctx_r0.tooltipTemplate)("tooltipContext", bar_r2.data)("noBarWhenZero", ctx_r0.noBarWhenZero)("animations", ctx_r0.animations);
+} }
+function SeriesVerticalComponent__svg_g_1__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    const _r11 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 4);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const i_r9 = ctx.index; const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.dataLabelHeightChanged.emit({ size: $event, index: i_r9 }); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const b_r8 = ctx.$implicit;
+    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵproperty("barX", b_r8.x)("barY", b_r8.y)("barWidth", b_r8.width)("barHeight", b_r8.height)("value", b_r8.total)("valueFormatting", ctx_r7.dataLabelFormatting)("orientation", ctx_r7.barOrientation.Vertical);
+} }
+function SeriesVerticalComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1__svg_g_1_Template, 1, 7, "g", 3);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.barsForDataLabels)("ngForTrackBy", ctx_r1.trackDataLabelBy);
+} }
+const _c29 = ["ngx-charts-bar-label", ""];
+function BoxChartComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 5);
+    ɵngcc0.ɵɵlistener("activate", function BoxChartComponent__svg_g_5_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onActivate($event); })("deactivate", function BoxChartComponent__svg_g_5_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onDeactivate($event); })("select", function BoxChartComponent__svg_g_5_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.onClick($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const result_r1 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("yScale", ctx_r0.yScale)("colors", ctx_r0.colors)("roundEdges", ctx_r0.roundEdges)("strokeColor", ctx_r0.strokeColor)("strokeWidth", ctx_r0.strokeWidth)("tooltipDisabled", ctx_r0.tooltipDisabled)("tooltipTemplate", ctx_r0.tooltipTemplate)("series", result_r1)("dims", ctx_r0.dims)("animations", ctx_r0.animations)("gradient", ctx_r0.gradient);
+} }
+const _c30 = ["ngx-charts-box-series", ""];
+const _c31 = ["ngx-charts-box", ""];
+function BoxComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 5);
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("orientation", ctx_r0.BarOrientation.Vertical)("name", ctx_r0.gradientId)("stops", ctx_r0.gradientStops);
+} }
+function BoxComponent__svg_line_8_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "line", 6);
+} if (rf & 2) {
+    const line_r2 = ctx.$implicit;
+    const i_r3 = ctx.index;
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵclassProp("hidden", ctx_r1.hideBar);
+    ɵngcc0.ɵɵattribute("x1", line_r2.v1.x)("y1", line_r2.v1.y)("x2", line_r2.v2.x)("y2", line_r2.v2.y)("stroke", ctx_r1.strokeColor)("stroke-width", i_r3 === 2 ? ctx_r1.medianLineWidth : ctx_r1.whiskerStrokeWidth)("mask", i_r3 ? undefined : ctx_r1.maskLine);
+} }
+function BubbleChartComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 6);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BubbleChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("showGridLines", ctx_r0.showGridLines)("dims", ctx_r0.dims)("xScale", ctx_r0.xScale)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function BubbleChartComponent__svg_g_6_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 7);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function BubbleChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("showGridLines", ctx_r1.showGridLines)("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks);
+} }
+function BubbleChartComponent__svg_g_9_Template(rf, ctx) { if (rf & 1) {
+    const _r9 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 8);
+    ɵngcc0.ɵɵlistener("select", function BubbleChartComponent__svg_g_9_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const series_r7 = ctx.$implicit; const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.onClick($event, series_r7); })("activate", function BubbleChartComponent__svg_g_9_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onActivate($event); })("deactivate", function BubbleChartComponent__svg_g_9_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11.onDeactivate($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r7 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active");
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r2.xScale)("yScale", ctx_r2.yScale)("rScale", ctx_r2.rScale)("xScaleType", ctx_r2.xScaleType)("yScaleType", ctx_r2.yScaleType)("xAxisLabel", ctx_r2.xAxisLabel)("yAxisLabel", ctx_r2.yAxisLabel)("colors", ctx_r2.colors)("data", series_r7)("activeEntries", ctx_r2.activeEntries)("tooltipDisabled", ctx_r2.tooltipDisabled)("tooltipTemplate", ctx_r2.tooltipTemplate);
+} }
+const _c32 = ["ngx-charts-bubble-series", ""];
+function BubbleSeriesComponent__svg_g_0_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g");
+    ɵngcc0.ɵɵelementStart(2, "g", 1);
+    ɵngcc0.ɵɵlistener("select", function BubbleSeriesComponent__svg_g_0_Template__svg_g_select_2_listener() { ɵngcc0.ɵɵrestoreView(_r3); const circle_r1 = ctx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onClick(circle_r1.data); })("activate", function BubbleSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener() { ɵngcc0.ɵɵrestoreView(_r3); const circle_r1 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.activateCircle(circle_r1); })("deactivate", function BubbleSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener() { ɵngcc0.ɵɵrestoreView(_r3); const circle_r1 = ctx.$implicit; const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.deactivateCircle(circle_r1); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const circle_r1 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵattribute("transform", circle_r1.transform);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵstyleProp("opacity", circle_r1.opacity);
+    ɵngcc0.ɵɵclassProp("active", circle_r1.isActive);
+    ɵngcc0.ɵɵproperty("@animationState", "active")("cx", 0)("cy", 0)("r", circle_r1.radius)("fill", circle_r1.color)("pointerEvents", "all")("data", circle_r1.value)("classNames", circle_r1.classNames)("tooltipDisabled", ctx_r0.tooltipDisabled)("tooltipPlacement", ctx_r0.placementTypes.Top)("tooltipType", ctx_r0.styleTypes.tooltip)("tooltipTitle", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(circle_r1))("tooltipTemplate", ctx_r0.tooltipTemplate)("tooltipContext", circle_r1.data);
+} }
+const _c33 = ["ngx-charts-heat-map-cell", ""];
+function HeatMapCellComponent__svg_defs_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "defs");
+    ɵngcc0.ɵɵelement(1, "g", 3);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("orientation", ctx_r0.barOrientation.Vertical)("name", ctx_r0.gradientId)("stops", ctx_r0.gradientStops);
+} }
+const _c34 = ["ngx-charts-heat-map-cell-series", ""];
+const _c35 = function (a0, a1, a2) { return { series: a0, name: a1, value: a2 }; };
+function HeatCellSeriesComponent__svg_g_0_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 1);
+    ɵngcc0.ɵɵlistener("select", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const c_r1 = ctx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onClick(c_r1.cell); })("activate", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_activate_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const c_r1 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.activate.emit(c_r1.cell); })("deactivate", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_deactivate_0_listener() { ɵngcc0.ɵɵrestoreView(_r3); const c_r1 = ctx.$implicit; const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.deactivate.emit(c_r1.cell); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const c_r1 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("x", c_r1.x)("y", c_r1.y)("width", c_r1.width)("height", c_r1.height)("fill", c_r1.fill)("data", c_r1.data)("gradient", ctx_r0.gradient)("animations", ctx_r0.animations)("tooltipDisabled", ctx_r0.tooltipDisabled)("tooltipPlacement", ctx_r0.placementTypes.Top)("tooltipType", ctx_r0.styleTypes.tooltip)("tooltipTitle", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(c_r1))("tooltipTemplate", ctx_r0.tooltipTemplate)("tooltipContext", ɵngcc0.ɵɵpureFunction3(14, _c35, c_r1.series, c_r1.label, c_r1.data));
+} }
+function HeatMapComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 6);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function HeatMapComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function HeatMapComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 7);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function HeatMapComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks);
+} }
+function HeatMapComponent__svg_rect_4_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "rect");
+} if (rf & 2) {
+    const rect_r7 = ctx.$implicit;
+    ɵngcc0.ɵɵattribute("x", rect_r7.x)("y", rect_r7.y)("rx", rect_r7.rx)("width", rect_r7.width)("height", rect_r7.height)("fill", rect_r7.fill);
+} }
+const _c36 = ["ngx-charts-line", ""];
+function LineChartComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    const _r6 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 7);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function LineChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.updateXAxisHeight($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("xScale", ctx_r0.xScale)("dims", ctx_r0.dims)("showGridLines", ctx_r0.showGridLines)("showLabel", ctx_r0.showXAxisLabel)("labelText", ctx_r0.xAxisLabel)("trimTicks", ctx_r0.trimXAxisTicks)("rotateTicks", ctx_r0.rotateXAxisTicks)("maxTickLength", ctx_r0.maxXAxisTickLength)("tickFormatting", ctx_r0.xAxisTickFormatting)("ticks", ctx_r0.xAxisTicks);
+} }
+function LineChartComponent__svg_g_6_Template(rf, ctx) { if (rf & 1) {
+    const _r8 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 8);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function LineChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r1.yScale)("dims", ctx_r1.dims)("showGridLines", ctx_r1.showGridLines)("showLabel", ctx_r1.showYAxisLabel)("labelText", ctx_r1.yAxisLabel)("trimTicks", ctx_r1.trimYAxisTicks)("maxTickLength", ctx_r1.maxYAxisTickLength)("tickFormatting", ctx_r1.yAxisTickFormatting)("ticks", ctx_r1.yAxisTicks)("referenceLines", ctx_r1.referenceLines)("showRefLines", ctx_r1.showRefLines)("showRefLabels", ctx_r1.showRefLabels);
+} }
+function LineChartComponent__svg_g_8_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelement(1, "g", 9);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r9 = ctx.$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active");
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r2.xScale)("yScale", ctx_r2.yScale)("colors", ctx_r2.colors)("data", series_r9)("activeEntries", ctx_r2.activeEntries)("scaleType", ctx_r2.scaleType)("curve", ctx_r2.curve)("rangeFillOpacity", ctx_r2.rangeFillOpacity)("hasRange", ctx_r2.hasRange)("animations", ctx_r2.animations);
+} }
+function LineChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r13 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 13);
+    ɵngcc0.ɵɵlistener("select", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.onClick($event); })("activate", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.onActivate($event); })("deactivate", function LineChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r15 = ɵngcc0.ɵɵnextContext(2); return ctx_r15.onDeactivate($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r11 = ctx.$implicit;
+    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r10.xScale)("yScale", ctx_r10.yScale)("colors", ctx_r10.colors)("data", series_r11)("scaleType", ctx_r10.scaleType)("visibleValue", ctx_r10.hoveredVertical)("activeEntries", ctx_r10.activeEntries)("tooltipDisabled", ctx_r10.tooltipDisabled)("tooltipTemplate", ctx_r10.tooltipTemplate);
+} }
+function LineChartComponent__svg_g_9_Template(rf, ctx) { if (rf & 1) {
+    const _r17 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 10);
+    ɵngcc0.ɵɵlistener("mouseleave", function LineChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.hideCircles(); });
+    ɵngcc0.ɵɵelementStart(1, "g", 11);
+    ɵngcc0.ɵɵlistener("hover", function LineChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.updateHoveredVertical($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵtemplate(2, LineChartComponent__svg_g_9__svg_g_2_Template, 2, 9, "g", 12);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r3 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("dims", ctx_r3.dims)("xSet", ctx_r3.xSet)("xScale", ctx_r3.xScale)("yScale", ctx_r3.yScale)("results", ctx_r3.results)("colors", ctx_r3.colors)("tooltipDisabled", ctx_r3.tooltipDisabled)("tooltipTemplate", ctx_r3.seriesTooltipTemplate);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.results);
+} }
+function LineChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelement(1, "g", 15);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r20 = ctx.$implicit;
+    const ctx_r19 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("xScale", ctx_r19.timelineXScale)("yScale", ctx_r19.timelineYScale)("colors", ctx_r19.colors)("data", series_r20)("scaleType", ctx_r19.scaleType)("curve", ctx_r19.curve)("hasRange", ctx_r19.hasRange)("animations", ctx_r19.animations);
+} }
+function LineChartComponent__svg_g_10_Template(rf, ctx) { if (rf & 1) {
+    const _r22 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 14);
+    ɵngcc0.ɵɵlistener("onDomainChange", function LineChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r22); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.updateDomain($event); });
+    ɵngcc0.ɵɵtemplate(1, LineChartComponent__svg_g_10__svg_g_1_Template, 2, 8, "g", 4);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r4 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("results", ctx_r4.results)("view", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx_r4.timelineWidth, ctx_r4.height))("height", ctx_r4.timelineHeight)("scheme", ctx_r4.scheme)("customColors", ctx_r4.customColors)("scaleType", ctx_r4.scaleType)("legend", ctx_r4.legend);
+    ɵngcc0.ɵɵattribute("transform", ctx_r4.timelineTransform);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.results)("ngForTrackBy", ctx_r4.trackBy);
+} }
+const _c37 = ["ngx-charts-line-series", ""];
+function LineSeriesComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 4);
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("orientation", ctx_r0.barOrientation.Vertical)("name", ctx_r0.gradientId)("stops", ctx_r0.gradientStops);
+} }
+function LineSeriesComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 5);
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵclassProp("active", ctx_r1.isActive(ctx_r1.data))("inactive", ctx_r1.isInactive(ctx_r1.data));
+    ɵngcc0.ɵɵproperty("data", ctx_r1.data)("path", ctx_r1.outerPath)("fill", ctx_r1.hasGradient ? ctx_r1.gradientUrl : ctx_r1.colors.getColor(ctx_r1.data.name))("opacity", ctx_r1.rangeFillOpacity)("animations", ctx_r1.animations);
+} }
+function PolarChartComponent__svg_g_4__svg_circle_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "circle", 8);
+} if (rf & 2) {
+    const r_r6 = ctx.$implicit;
+    ɵngcc0.ɵɵattribute("r", r_r6);
+} }
+function PolarChartComponent__svg_g_4_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵtemplate(1, PolarChartComponent__svg_g_4__svg_circle_1_Template, 1, 1, "circle", 7);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.radiusTicks);
+} }
+function PolarChartComponent__svg_g_5__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 10);
+} if (rf & 2) {
+    const tick_r8 = ctx.$implicit;
+    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵproperty("data", tick_r8)("radius", ctx_r7.outerRadius)("label", tick_r8.label)("max", ctx_r7.outerRadius)("value", ctx_r7.showGridLines ? 1 : ctx_r7.outerRadius)("explodeSlices", true)("animations", ctx_r7.animations)("labelTrim", ctx_r7.labelTrim)("labelTrimSize", ctx_r7.labelTrimSize);
+} }
+function PolarChartComponent__svg_g_5_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵtemplate(1, PolarChartComponent__svg_g_5__svg_g_1_Template, 1, 9, "g", 9);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.thetaTicks);
+} }
+function PolarChartComponent__svg_g_6_Template(rf, ctx) { if (rf & 1) {
+    const _r10 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 11);
+    ɵngcc0.ɵɵlistener("dimensionsChanged", function PolarChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.updateYAxisWidth($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("yScale", ctx_r2.yAxisScale)("dims", ctx_r2.yAxisDims)("showGridLines", ctx_r2.showGridLines)("showLabel", ctx_r2.showYAxisLabel)("labelText", ctx_r2.yAxisLabel)("trimTicks", ctx_r2.trimYAxisTicks)("maxTickLength", ctx_r2.maxYAxisTickLength)("tickFormatting", ctx_r2.yAxisTickFormatting);
+    ɵngcc0.ɵɵattribute("transform", ctx_r2.transformYAxis);
+} }
+function PolarChartComponent__svg_g_7_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 12);
+} if (rf & 2) {
+    const ctx_r3 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("label", ctx_r3.xAxisLabel)("offset", ctx_r3.labelOffset)("orient", ctx_r3.orientation.Bottom)("height", ctx_r3.dims.height)("width", ctx_r3.dims.width);
+} }
+function PolarChartComponent__svg_g_9_Template(rf, ctx) { if (rf & 1) {
+    const _r13 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 13);
+    ɵngcc0.ɵɵlistener("select", function PolarChartComponent__svg_g_9_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onClick($event); })("activate", function PolarChartComponent__svg_g_9_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.onActivate($event); })("deactivate", function PolarChartComponent__svg_g_9_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r15 = ɵngcc0.ɵɵnextContext(); return ctx_r15.onDeactivate($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r11 = ctx.$implicit;
+    const ctx_r4 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("@animationState", "active");
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("gradient", ctx_r4.gradient)("xScale", ctx_r4.xScale)("yScale", ctx_r4.yScale)("colors", ctx_r4.colors)("data", series_r11)("activeEntries", ctx_r4.activeEntries)("scaleType", ctx_r4.scaleType)("curve", ctx_r4.curve)("rangeFillOpacity", ctx_r4.rangeFillOpacity)("animations", ctx_r4.animations)("tooltipDisabled", ctx_r4.tooltipDisabled)("tooltipTemplate", ctx_r4.tooltipTemplate);
+} }
+const _c38 = ["ngx-charts-polar-series", ""];
+function PolarSeriesComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 4);
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("color", ctx_r0.seriesColor)("name", ctx_r0.gradientId)("startOpacity", 0.25)("endOpacity", 1)("stops", ctx_r0.gradientStops);
+} }
+function PolarSeriesComponent__svg_g_4_Template(rf, ctx) { if (rf & 1) {
+    const _r4 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 5);
+    ɵngcc0.ɵɵlistener("select", function PolarSeriesComponent__svg_g_4_Template__svg_g_select_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const circle_r2 = ctx.$implicit; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.select.emit(circle_r2.data); })("activate", function PolarSeriesComponent__svg_g_4_Template__svg_g_activate_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const circle_r2 = ctx.$implicit; const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.activate.emit({ name: circle_r2.data.series }); })("deactivate", function PolarSeriesComponent__svg_g_4_Template__svg_g_deactivate_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const circle_r2 = ctx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.deactivate.emit({ name: circle_r2.data.series }); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const circle_r2 = ctx.$implicit;
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵstyleProp("opacity", ctx_r1.inactive ? 0.2 : 1);
+    ɵngcc0.ɵɵproperty("cx", circle_r2.cx)("cy", circle_r2.cy)("r", ctx_r1.circleRadius)("fill", circle_r2.color)("tooltipDisabled", ctx_r1.tooltipDisabled)("tooltipPlacement", ctx_r1.placementTypes.Top)("tooltipType", ctx_r1.styleTypes.tooltip)("tooltipTitle", ctx_r1.tooltipTemplate ? undefined : ctx_r1.tooltipText(circle_r2))("tooltipTemplate", ctx_r1.tooltipTemplate)("tooltipContext", circle_r2.data);
+} }
+const _c39 = ["ngx-charts-pie-label", ""];
+const _c40 = ["ngx-charts-pie-arc", ""];
+function PieArcComponent__svg_defs_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "defs");
+    ɵngcc0.ɵɵelement(1, "g", 3);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("color", ctx_r0.fill)("name", ctx_r0.radialGradientId)("startOpacity", ctx_r0.startOpacity);
+} }
+const _c41 = ".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\n";
+function PieGridComponent__svg_g_2__svg_text_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "text", 10);
+} if (rf & 2) {
+    const series_r1 = ɵngcc0.ɵɵnextContext().$implicit;
+    ɵngcc0.ɵɵproperty("countTo", series_r1.percent)("countSuffix", "%");
+} }
+function PieGridComponent__svg_g_2__svg_text_3_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "text", 11);
+    ɵngcc0.ɵɵtext(1);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r1 = ɵngcc0.ɵɵnextContext().$implicit;
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate1(" ", series_r1.percent.toLocaleString(), " ");
+} }
+function PieGridComponent__svg_g_2__svg_text_6_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "text", 12);
+} if (rf & 2) {
+    const series_r1 = ɵngcc0.ɵɵnextContext().$implicit;
+    const ctx_r4 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("countTo", series_r1.total)("countPrefix", ctx_r4.label + ": ");
+    ɵngcc0.ɵɵattribute("y", series_r1.outerRadius);
+} }
+function PieGridComponent__svg_g_2__svg_text_7_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "text", 13);
+    ɵngcc0.ɵɵtext(1);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r1 = ɵngcc0.ɵɵnextContext().$implicit;
+    const ctx_r5 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("y", series_r1.outerRadius);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate2(" ", ctx_r5.label, ": ", series_r1.total.toLocaleString(), " ");
+} }
+const _c42 = function (a0) { return { data: a0 }; };
+function PieGridComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r11 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 3);
+    ɵngcc0.ɵɵelementStart(1, "g", 4);
+    ɵngcc0.ɵɵlistener("select", function PieGridComponent__svg_g_2_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.onClick($event); })("activate", function PieGridComponent__svg_g_2_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.onActivate($event); })("deactivate", function PieGridComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r13 = ɵngcc0.ɵɵnextContext(); return ctx_r13.onDeactivate($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵtemplate(2, PieGridComponent__svg_g_2__svg_text_2_Template, 1, 2, "text", 5);
+    ɵngcc0.ɵɵtemplate(3, PieGridComponent__svg_g_2__svg_text_3_Template, 2, 1, "text", 6);
+    ɵngcc0.ɵɵelementStart(4, "text", 7);
+    ɵngcc0.ɵɵtext(5);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵtemplate(6, PieGridComponent__svg_g_2__svg_text_6_Template, 1, 3, "text", 8);
+    ɵngcc0.ɵɵtemplate(7, PieGridComponent__svg_g_2__svg_text_7_Template, 2, 3, "text", 9);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const series_r1 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("transform", series_r1.transform);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("colors", series_r1.colors)("data", series_r1.data)("innerRadius", series_r1.innerRadius)("outerRadius", series_r1.outerRadius)("animations", ctx_r0.animations)("tooltipDisabled", ctx_r0.tooltipDisabled)("tooltipPlacement", ctx_r0.placementTypes.Top)("tooltipType", ctx_r0.styleTypes.tooltip)("tooltipTitle", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(ɵngcc0.ɵɵpureFunction1(17, _c42, series_r1)))("tooltipTemplate", ctx_r0.tooltipTemplate)("tooltipContext", series_r1.data[0].data);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.animations);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.animations);
+    ɵngcc0.ɵɵadvance(2);
+    ɵngcc0.ɵɵtextInterpolate1(" ", series_r1.label, " ");
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.animations);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.animations);
+} }
+const _c43 = ["ngx-charts-pie-grid-series", ""];
+function PieGridSeriesComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 2);
+    ɵngcc0.ɵɵlistener("select", function PieGridSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onClick($event); })("activate", function PieGridSeriesComponent__svg_g_1_Template__svg_g_activate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.activate.emit($event); })("deactivate", function PieGridSeriesComponent__svg_g_1_Template__svg_g_deactivate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.deactivate.emit($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const arc_r1 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("startAngle", arc_r1.startAngle)("endAngle", arc_r1.endAngle)("innerRadius", ctx_r0.innerRadius)("outerRadius", ctx_r0.outerRadius)("fill", ctx_r0.color(arc_r1))("value", arc_r1.data.value)("data", arc_r1.data)("gradient", false)("pointerEvents", arc_r1.pointerEvents)("animate", arc_r1.animate);
+    ɵngcc0.ɵɵattribute("class", arc_r1.class);
+} }
+const _c44 = ["ngx-charts-pie-series", ""];
+function PieSeriesComponent__svg_g_0__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 3);
+} if (rf & 2) {
+    const arc_r1 = ɵngcc0.ɵɵnextContext().$implicit;
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("data", arc_r1)("radius", ctx_r2.outerRadius)("color", ctx_r2.color(arc_r1))("label", ctx_r2.labelText(arc_r1))("labelTrim", ctx_r2.trimLabels)("labelTrimSize", ctx_r2.maxLabelLength)("max", ctx_r2.max)("value", arc_r1.value)("explodeSlices", ctx_r2.explodeSlices)("animations", ctx_r2.animations);
+} }
+function PieSeriesComponent__svg_g_0_Template(rf, ctx) { if (rf & 1) {
+    const _r5 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵtemplate(1, PieSeriesComponent__svg_g_0__svg_g_1_Template, 1, 10, "g", 1);
+    ɵngcc0.ɵɵelementStart(2, "g", 2);
+    ɵngcc0.ɵɵlistener("select", function PieSeriesComponent__svg_g_0_Template__svg_g_select_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onClick($event); })("activate", function PieSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.activate.emit($event); })("deactivate", function PieSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.deactivate.emit($event); })("dblclick", function PieSeriesComponent__svg_g_0_Template__svg_g_dblclick_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.dblclick.emit($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const arc_r1 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.labelVisible(arc_r1));
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("startAngle", arc_r1.startAngle)("endAngle", arc_r1.endAngle)("innerRadius", ctx_r0.innerRadius)("outerRadius", ctx_r0.outerRadius)("fill", ctx_r0.color(arc_r1))("value", arc_r1.data.value)("gradient", ctx_r0.gradient)("data", arc_r1.data)("max", ctx_r0.max)("explodeSlices", ctx_r0.explodeSlices)("isActive", ctx_r0.isActive(arc_r1.data))("animate", ctx_r0.animations)("tooltipDisabled", ctx_r0.tooltipDisabled)("tooltipPlacement", ctx_r0.placementTypes.Top)("tooltipType", ctx_r0.styleTypes.tooltip)("tooltipTitle", ctx_r0.getTooltipTitle(arc_r1))("tooltipTemplate", ctx_r0.tooltipTemplate)("tooltipContext", arc_r1.data);
+} }
+const _c45 = ["textEl"];
+const _c46 = ["ngx-charts-card", ""];
+function CardComponent__svg_path_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "path", 7);
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("fill", ctx_r0.bandColor)("transform", ctx_r0.transformBand)("d", ctx_r0.bandPath);
+} }
+const _c47 = ["ngx-charts-card-series", ""];
+function CardSeriesComponent__svg_rect_0_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "rect", 2);
+} if (rf & 2) {
+    const c_r2 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵstyleProp("fill", ctx_r0.emptyColor);
+    ɵngcc0.ɵɵattribute("x", c_r2.x)("y", c_r2.y)("width", c_r2.width)("height", c_r2.height);
+} }
+function CardSeriesComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    const _r5 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 3);
+    ɵngcc0.ɵɵlistener("select", function CardSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onClick($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const c_r3 = ctx.$implicit;
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("x", c_r3.x)("y", c_r3.y)("width", c_r3.width)("height", c_r3.height)("color", c_r3.color)("bandColor", c_r3.bandColor)("textColor", c_r3.textColor)("data", c_r3.data)("label", c_r3.label)("medianSize", ctx_r1.medianSize)("valueFormatting", ctx_r1.valueFormatting)("labelFormatting", ctx_r1.labelFormatting)("animations", ctx_r1.animations);
+} }
+const _c48 = ["ngx-charts-tree-map-cell", ""];
+function TreeMapCellComponent__svg_defs_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "defs");
+    ɵngcc0.ɵɵelement(1, "g", 3);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("orientation", ctx_r0.orientation.Vertical)("name", ctx_r0.gradientId)("stops", ctx_r0.gradientStops);
+} }
+function TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelement(0, "span", 8);
+} if (rf & 2) {
+    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵproperty("countTo", ctx_r2.value)("valueFormatting", ctx_r2.valueFormatting);
+} }
+function TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵelementStart(0, "span", 9);
+    ɵngcc0.ɵɵtext(1);
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.formattedValue, " ");
+} }
+function TreeMapCellComponent__svg_foreignObject_3_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "foreignObject", 4);
+    ɵngcc0.ɵɵnamespaceHTML();
+    ɵngcc0.ɵɵelementStart(1, "p");
+    ɵngcc0.ɵɵelement(2, "span", 5);
+    ɵngcc0.ɵɵelement(3, "br");
+    ɵngcc0.ɵɵtemplate(4, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template, 1, 2, "span", 6);
+    ɵngcc0.ɵɵtemplate(5, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template, 2, 1, "span", 7);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵstyleProp("pointer-events", "none");
+    ɵngcc0.ɵɵattribute("x", ctx_r1.x)("y", ctx_r1.y)("width", ctx_r1.width)("height", ctx_r1.height);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵstyleProp("color", ctx_r1.getTextColor())("height", ctx_r1.height + "px")("width", ctx_r1.width + "px");
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("innerHTML", ctx_r1.formattedLabel, ɵngcc0.ɵɵsanitizeHtml);
+    ɵngcc0.ɵɵadvance(2);
+    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.animations);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.animations);
+} }
+const _c49 = ["ngx-charts-tree-map-cell-series", ""];
+function TreeMapCellSeriesComponent__svg_g_0_Template(rf, ctx) { if (rf & 1) {
+    const _r3 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 1);
+    ɵngcc0.ɵɵlistener("select", function TreeMapCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onClick($event); });
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const c_r1 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("data", c_r1.data)("x", c_r1.x)("y", c_r1.y)("width", c_r1.width)("height", c_r1.height)("fill", c_r1.fill)("label", c_r1.label)("value", c_r1.value)("valueFormatting", ctx_r0.valueFormatting)("labelFormatting", ctx_r0.labelFormatting)("gradient", ctx_r0.gradient)("animations", ctx_r0.animations)("tooltipDisabled", ctx_r0.tooltipDisabled)("tooltipPlacement", ctx_r0.placementTypes.Top)("tooltipType", ctx_r0.styleTypes.tooltip)("tooltipTitle", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(c_r1))("tooltipTemplate", ctx_r0.tooltipTemplate)("tooltipContext", c_r1.data);
+} }
+const _c50 = ["valueTextEl"];
+const _c51 = ["unitsTextEl"];
+function LinearGaugeComponent__svg_line_4_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "line", 10);
+} if (rf & 2) {
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("transform", ctx_r0.transformLine)("stroke", ctx_r0.colors.getColor(ctx_r0.units));
+} }
+function LinearGaugeComponent__svg_line_5_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "line", 11);
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("transform", ctx_r1.transformLine)("stroke", ctx_r1.colors.getColor(ctx_r1.units));
+} }
+const _c52 = function () { return {}; };
+function GaugeComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    const _r5 = ɵngcc0.ɵɵgetCurrentView();
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g");
+    ɵngcc0.ɵɵelementStart(1, "g", 5);
+    ɵngcc0.ɵɵlistener("select", function GaugeComponent__svg_g_2_Template__svg_g_select_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onClick($event); })("activate", function GaugeComponent__svg_g_2_Template__svg_g_activate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.onActivate($event); })("deactivate", function GaugeComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onDeactivate($event); });
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const arc_r3 = ctx.$implicit;
+    const ctx_r0 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵattribute("transform", ctx_r0.rotation);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵproperty("backgroundArc", arc_r3.backgroundArc)("valueArc", arc_r3.valueArc)("cornerRadius", ctx_r0.cornerRadius)("colors", ctx_r0.colors)("isActive", ctx_r0.isActive(arc_r3.valueArc.data))("tooltipDisabled", ctx_r0.tooltipDisabled)("tooltipTemplate", ctx_r0.tooltipTemplate)("valueFormatting", ctx_r0.valueFormatting)("animations", ctx_r0.animations);
+} }
+function GaugeComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelement(0, "g", 6);
+} if (rf & 2) {
+    const ctx_r1 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵproperty("bigSegments", ctx_r1.bigSegments)("smallSegments", ctx_r1.smallSegments)("min", ctx_r1.min)("max", ctx_r1.max)("radius", ctx_r1.outerRadius)("angleSpan", ctx_r1.angleSpan)("valueScale", ctx_r1.valueScale)("startAngle", ctx_r1.startAngle)("tickFormatting", ctx_r1.axisTickFormatting);
+} }
+function GaugeComponent__svg_text_4_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "text", 7, 8);
+    ɵngcc0.ɵɵelementStart(2, "tspan", 9);
+    ɵngcc0.ɵɵtext(3);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementStart(4, "tspan", 10);
+    ɵngcc0.ɵɵtext(5);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const ctx_r2 = ɵngcc0.ɵɵnextContext();
+    ɵngcc0.ɵɵstyleProp("text-anchor", "middle");
+    ɵngcc0.ɵɵattribute("transform", ctx_r2.textTransform);
+    ɵngcc0.ɵɵadvance(3);
+    ɵngcc0.ɵɵtextInterpolate(ctx_r2.displayValue);
+    ɵngcc0.ɵɵadvance(2);
+    ɵngcc0.ɵɵtextInterpolate(ctx_r2.units);
+} }
+const _c53 = ["ngx-charts-gauge-arc", ""];
+const _c54 = ["ngx-charts-gauge-axis", ""];
+function GaugeAxisComponent__svg_g_1_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 2);
+    ɵngcc0.ɵɵelement(1, "path");
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const tick_r3 = ctx.$implicit;
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵattribute("d", tick_r3.line);
+} }
+function GaugeAxisComponent__svg_g_2_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 2);
+    ɵngcc0.ɵɵelementStart(1, "text", 3);
+    ɵngcc0.ɵɵtext(2);
+    ɵngcc0.ɵɵelementEnd();
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const tick_r4 = ctx.$implicit;
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵstyleProp("text-anchor", tick_r4.textAnchor);
+    ɵngcc0.ɵɵattribute("transform", tick_r4.textTransform);
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵtextInterpolate1(" ", tick_r4.text, " ");
+} }
+function GaugeAxisComponent__svg_g_3_Template(rf, ctx) { if (rf & 1) {
+    ɵngcc0.ɵɵnamespaceSVG();
+    ɵngcc0.ɵɵelementStart(0, "g", 4);
+    ɵngcc0.ɵɵelement(1, "path");
+    ɵngcc0.ɵɵelementEnd();
+} if (rf & 2) {
+    const tick_r5 = ctx.$implicit;
+    ɵngcc0.ɵɵadvance(1);
+    ɵngcc0.ɵɵattribute("d", tick_r5.line);
+} }
+function isViewContainerRef(x) {
+    return x.element;
+}
+/**
+ * Injection service is a helper to append components
+ * dynamically to a known location in the DOM, most
+ * noteably for dialogs/tooltips appending to body.
+ *
+ * @export
+ */
+class InjectionService {
+    constructor(applicationRef, componentFactoryResolver, injector) {
+        this.applicationRef = applicationRef;
+        this.componentFactoryResolver = componentFactoryResolver;
+        this.injector = injector;
+    }
+    /**
+     * Sets a default global root view container. This is useful for
+     * things like ngUpgrade that doesn't have a ApplicationRef root.
+     *
+     * @param container
+     */
+    static setGlobalRootViewContainer(container) {
+        InjectionService.globalRootViewContainer = container;
+    }
+    /**
+     * Gets the root view container to inject the component to.
+     *
+     * @memberOf InjectionService
+     */
+    getRootViewContainer() {
+        if (this._container)
+            return this._container;
+        if (InjectionService.globalRootViewContainer)
+            return InjectionService.globalRootViewContainer;
+        if (this.applicationRef.components.length)
+            return this.applicationRef.components[0];
+        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');
+    }
+    /**
+     * Overrides the default root view container. This is useful for
+     * things like ngUpgrade that doesn't have a ApplicationRef root.
+     *
+     * @param container
+     *
+     * @memberOf InjectionService
+     */
+    setRootViewContainer(container) {
+        this._container = container;
+    }
+    /**
+     * Gets the html element for a component ref.
+     *
+     * @param componentRef
+     *
+     * @memberOf InjectionService
+     */
+    getComponentRootNode(component) {
+        if (isViewContainerRef(component)) {
+            return component.element.nativeElement;
+        }
+        if (component.hostView && component.hostView.rootNodes.length > 0) {
+            return component.hostView.rootNodes[0];
+        }
+        // the top most component root node has no `hostView`
+        return component.location.nativeElement;
+    }
+    /**
+     * Gets the root component container html element.
+     *
+     * @memberOf InjectionService
+     */
+    getRootViewContainerNode(component) {
+        return this.getComponentRootNode(component);
+    }
+    /**
+     * Projects the bindings onto the component
+     *
+     * @param component
+     * @param options
+     *
+     * @memberOf InjectionService
+     */
+    projectComponentBindings(component, bindings) {
+        if (bindings) {
+            if (bindings.inputs !== undefined) {
+                const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);
+                for (const bindingName of bindingKeys) {
+                    component.instance[bindingName] = bindings.inputs[bindingName];
+                }
+            }
+            if (bindings.outputs !== undefined) {
+                const eventKeys = Object.getOwnPropertyNames(bindings.outputs);
+                for (const eventName of eventKeys) {
+                    component.instance[eventName] = bindings.outputs[eventName];
+                }
+            }
+        }
+        return component;
+    }
+    /**
+     * Appends a component to a adjacent location
+     *
+     * @param componentClass
+     * @param [options={}]
+     * @param [location]
+     *
+     * @memberOf InjectionService
+     */
+    appendComponent(componentClass, bindings = {}, location) {
+        if (!location)
+            location = this.getRootViewContainer();
+        const appendLocation = this.getComponentRootNode(location);
+        const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);
+        const portal = new ComponentPortal(componentClass);
+        const componentRef = portalHost.attach(portal);
+        this.projectComponentBindings(componentRef, bindings);
+        return componentRef;
+    }
+}
+InjectionService.ɵfac = function InjectionService_Factory(t) { return new (t || InjectionService)(ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
+InjectionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InjectionService, factory: InjectionService.ɵfac });
+InjectionService.globalRootViewContainer = null;
+InjectionService.ctorParameters = () => [
+    { type: ApplicationRef },
+    { type: ComponentFactoryResolver },
+    { type: Injector }
+];
+
+/**
+ * Throttle a function
+ *
+ */
+function throttle(func, wait, options) {
+    options = options || {};
+    let context;
+    let args;
+    let result;
+    let timeout = null;
+    let previous = 0;
+    function later() {
+        previous = options.leading === false ? 0 : +new Date();
+        timeout = null;
+        result = func.apply(context, args);
+    }
+    return function () {
+        const now = +new Date();
+        if (!previous && options.leading === false) {
+            previous = now;
+        }
+        const remaining = wait - (now - previous);
+        context = this;
+        args = arguments;
+        if (remaining <= 0) {
+            clearTimeout(timeout);
+            timeout = null;
+            previous = now;
+            result = func.apply(context, args);
+        }
+        else if (!timeout && options.trailing !== false) {
+            timeout = setTimeout(later, remaining);
+        }
+        return result;
+    };
+}
+/**
+ * Throttle decorator
+ *
+ *  class MyClass {
+ *    throttleable(10)
+ *    myFn() { ... }
+ *  }
+ */
+function throttleable(duration, options) {
+    return function innerDecorator(target, key, descriptor) {
+        return {
+            configurable: true,
+            enumerable: descriptor.enumerable,
+            get: function getter() {
+                Object.defineProperty(this, key, {
+                    configurable: true,
+                    enumerable: descriptor.enumerable,
+                    value: throttle(descriptor.value, duration, options)
+                });
+                return this[key];
+            }
+        };
+    };
+}
+
+var PlacementTypes;
+(function (PlacementTypes) {
+    PlacementTypes["Top"] = "top";
+    PlacementTypes["Bottom"] = "bottom";
+    PlacementTypes["Left"] = "left";
+    PlacementTypes["Right"] = "right";
+    PlacementTypes["Center"] = "center";
+})(PlacementTypes || (PlacementTypes = {}));
+
+const caretOffset = 7;
+function verticalPosition(elDimensions, popoverDimensions, alignment) {
+    if (alignment === PlacementTypes.Top) {
+        return elDimensions.top - caretOffset;
+    }
+    if (alignment === PlacementTypes.Bottom) {
+        return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;
+    }
+    if (alignment === PlacementTypes.Center) {
+        return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;
+    }
+    return undefined;
+}
+function horizontalPosition(elDimensions, popoverDimensions, alignment) {
+    if (alignment === PlacementTypes.Left) {
+        return elDimensions.left - caretOffset;
+    }
+    if (alignment === PlacementTypes.Right) {
+        return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;
+    }
+    if (alignment === PlacementTypes.Center) {
+        return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;
+    }
+    return undefined;
+}
+/**
+ * Position helper for the popover directive.
+ *
+ * @export
+ */
+class PositionHelper {
+    /**
+     * Calculate vertical alignment position
+     *
+     * @memberOf PositionHelper
+     */
+    static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {
+        let result = verticalPosition(elDimensions, popoverDimensions, alignment);
+        if (result + popoverDimensions.height > window.innerHeight) {
+            result = window.innerHeight - popoverDimensions.height;
+        }
+        return result;
+    }
+    /**
+     * Calculate vertical caret position
+     *
+     * @memberOf PositionHelper
+     */
+    static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {
+        let result;
+        if (alignment === PlacementTypes.Top) {
+            result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;
+        }
+        if (alignment === PlacementTypes.Bottom) {
+            result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;
+        }
+        if (alignment === PlacementTypes.Center) {
+            result = popoverDimensions.height / 2 - caretDimensions.height / 2;
+        }
+        const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);
+        if (popoverPosition + popoverDimensions.height > window.innerHeight) {
+            result += popoverPosition + popoverDimensions.height - window.innerHeight;
+        }
+        return result;
+    }
+    /**
+     * Calculate horz alignment position
+     *
+     * @memberOf PositionHelper
+     */
+    static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {
+        let result = horizontalPosition(elDimensions, popoverDimensions, alignment);
+        if (result + popoverDimensions.width > window.innerWidth) {
+            result = window.innerWidth - popoverDimensions.width;
+        }
+        return result;
+    }
+    /**
+     * Calculate horz caret position
+     *
+     * @memberOf PositionHelper
+     */
+    static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {
+        let result;
+        if (alignment === PlacementTypes.Left) {
+            result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;
+        }
+        if (alignment === PlacementTypes.Right) {
+            result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;
+        }
+        if (alignment === PlacementTypes.Center) {
+            result = popoverDimensions.width / 2 - caretDimensions.width / 2;
+        }
+        const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);
+        if (popoverPosition + popoverDimensions.width > window.innerWidth) {
+            result += popoverPosition + popoverDimensions.width - window.innerWidth;
+        }
+        return result;
+    }
+    /**
+     * Checks if the element's position should be flipped
+     *
+     * @memberOf PositionHelper
+     */
+    static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {
+        let flip = false;
+        if (placement === PlacementTypes.Right) {
+            if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {
+                flip = true;
+            }
+        }
+        if (placement === PlacementTypes.Left) {
+            if (elDimensions.left - popoverDimensions.width - spacing < 0) {
+                flip = true;
+            }
+        }
+        if (placement === PlacementTypes.Top) {
+            if (elDimensions.top - popoverDimensions.height - spacing < 0) {
+                flip = true;
+            }
+        }
+        if (placement === PlacementTypes.Bottom) {
+            if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {
+                flip = true;
+            }
+        }
+        return flip;
+    }
+    /**
+     * Position caret
+     *
+     * @memberOf PositionHelper
+     */
+    static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {
+        let top = 0;
+        let left = 0;
+        if (placement === PlacementTypes.Right) {
+            left = -7;
+            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);
+        }
+        else if (placement === PlacementTypes.Left) {
+            left = elmDim.width;
+            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);
+        }
+        else if (placement === PlacementTypes.Top) {
+            top = elmDim.height;
+            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);
+        }
+        else if (placement === PlacementTypes.Bottom) {
+            top = -7;
+            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);
+        }
+        return { top, left };
+    }
+    /**
+     * Position content
+     *
+     * @memberOf PositionHelper
+     */
+    static positionContent(placement, elmDim, hostDim, spacing, alignment) {
+        let top = 0;
+        let left = 0;
+        if (placement === PlacementTypes.Right) {
+            left = hostDim.left + hostDim.width + spacing;
+            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);
+        }
+        else if (placement === PlacementTypes.Left) {
+            left = hostDim.left - elmDim.width - spacing;
+            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);
+        }
+        else if (placement === PlacementTypes.Top) {
+            top = hostDim.top - elmDim.height - spacing;
+            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);
+        }
+        else if (placement === PlacementTypes.Bottom) {
+            top = hostDim.top + hostDim.height + spacing;
+            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);
+        }
+        return { top, left };
+    }
+    /**
+     * Determine placement based on flip
+     *
+     * @memberOf PositionHelper
+     */
+    static determinePlacement(placement, elmDim, hostDim, spacing) {
+        const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);
+        if (shouldFlip) {
+            if (placement === PlacementTypes.Right) {
+                return PlacementTypes.Left;
+            }
+            else if (placement === PlacementTypes.Left) {
+                return PlacementTypes.Right;
+            }
+            else if (placement === PlacementTypes.Top) {
+                return PlacementTypes.Bottom;
+            }
+            else if (placement === PlacementTypes.Bottom) {
+                return PlacementTypes.Top;
+            }
+        }
+        return placement;
+    }
+}
+
+class TooltipContentComponent {
+    constructor(element, renderer, platformId) {
+        this.element = element;
+        this.renderer = renderer;
+        this.platformId = platformId;
+    }
+    get cssClasses() {
+        let clz = 'ngx-charts-tooltip-content';
+        clz += ` position-${this.placement}`;
+        clz += ` type-${this.type}`;
+        clz += ` ${this.cssClass}`;
+        return clz;
+    }
+    ngAfterViewInit() {
+        setTimeout(this.position.bind(this));
+    }
+    position() {
+        if (!isPlatformBrowser(this.platformId)) {
+            return;
+        }
+        const nativeElm = this.element.nativeElement;
+        const hostDim = this.host.nativeElement.getBoundingClientRect();
+        // if no dims were found, never show
+        if (!hostDim.height && !hostDim.width)
+            return;
+        const elmDim = nativeElm.getBoundingClientRect();
+        this.checkFlip(hostDim, elmDim);
+        this.positionContent(nativeElm, hostDim, elmDim);
+        if (this.showCaret) {
+            this.positionCaret(hostDim, elmDim);
+        }
+        // animate its entry
+        setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);
+    }
+    positionContent(nativeElm, hostDim, elmDim) {
+        const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);
+        this.renderer.setStyle(nativeElm, 'top', `${top}px`);
+        this.renderer.setStyle(nativeElm, 'left', `${left}px`);
+    }
+    positionCaret(hostDim, elmDim) {
+        const caretElm = this.caretElm.nativeElement;
+        const caretDimensions = caretElm.getBoundingClientRect();
+        const { top, left } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);
+        this.renderer.setStyle(caretElm, 'top', `${top}px`);
+        this.renderer.setStyle(caretElm, 'left', `${left}px`);
+    }
+    checkFlip(hostDim, elmDim) {
+        this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);
+    }
+    onWindowResize() {
+        this.position();
+    }
+}
+TooltipContentComponent.ɵfac = function TooltipContentComponent_Factory(t) { return new (t || TooltipContentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
+TooltipContentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TooltipContentComponent, selectors: [["ngx-tooltip-content"]], viewQuery: function TooltipContentComponent_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵviewQuery(_c0, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.caretElm = _t.first);
+    } }, hostVars: 2, hostBindings: function TooltipContentComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("resize", function TooltipContentComponent_resize_HostBindingHandler() { return ctx.onWindowResize(); }, false, ɵngcc0.ɵɵresolveWindow);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵclassMap(ctx.cssClasses);
+    } }, inputs: { placement: "placement", host: "host", showCaret: "showCaret", type: "type", alignment: "alignment", spacing: "spacing", cssClass: "cssClass", title: "title", template: "template", context: "context" }, decls: 6, vars: 6, consts: [[3, "hidden"], ["caretElm", ""], [1, "tooltip-content"], [4, "ngIf"], [3, "innerHTML", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "innerHTML"]], template: function TooltipContentComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "div");
+        ɵngcc0.ɵɵelement(1, "span", 0, 1);
+        ɵngcc0.ɵɵelementStart(3, "div", 2);
+        ɵngcc0.ɵɵtemplate(4, TooltipContentComponent_span_4_Template, 2, 4, "span", 3);
+        ɵngcc0.ɵɵtemplate(5, TooltipContentComponent_span_5_Template, 1, 1, "span", 4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵclassMapInterpolate1("tooltip-caret position-", ctx.placement, "");
+        ɵngcc0.ɵɵproperty("hidden", !ctx.showCaret);
+        ɵngcc0.ɵɵadvance(3);
+        ɵngcc0.ɵɵproperty("ngIf", !ctx.title);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.title);
+    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], styles: [".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:normal;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\n"], encapsulation: 2 });
+TooltipContentComponent.ctorParameters = () => [
+    { type: ElementRef },
+    { type: Renderer2 },
+    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
+];
+TooltipContentComponent.propDecorators = {
+    host: [{ type: Input }],
+    showCaret: [{ type: Input }],
+    type: [{ type: Input }],
+    placement: [{ type: Input }],
+    alignment: [{ type: Input }],
+    spacing: [{ type: Input }],
+    cssClass: [{ type: Input }],
+    title: [{ type: Input }],
+    template: [{ type: Input }],
+    context: [{ type: Input }],
+    caretElm: [{ type: ViewChild, args: ['caretElm',] }],
+    cssClasses: [{ type: HostBinding, args: ['class',] }],
+    onWindowResize: [{ type: HostListener, args: ['window:resize',] }]
+};
+__decorate([
+    throttleable(100)
+], TooltipContentComponent.prototype, "onWindowResize", null);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InjectionService, [{
+        type: Injectable
+    }], function () { return [{ type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }]; }, null); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipContentComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-tooltip-content',
+                template: `
+    <div>
+      <span #caretElm [hidden]="!showCaret" class="tooltip-caret position-{{ this.placement }}"> </span>
+      <div class="tooltip-content">
+        <span *ngIf="!title">
+          <ng-template [ngTemplateOutlet]="template" [ngTemplateOutletContext]="{ model: context }"> </ng-template>
+        </span>
+        <span *ngIf="title" [innerHTML]="title"> </span>
+      </div>
+    </div>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                styles: [".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:normal;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\n"]
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: undefined, decorators: [{
+                type: Inject,
+                args: [PLATFORM_ID]
+            }] }]; }, { cssClasses: [{
+            type: HostBinding,
+            args: ['class']
+        }], placement: [{
+            type: Input
+        }], onWindowResize: [{
+            type: HostListener,
+            args: ['window:resize']
+        }], host: [{
+            type: Input
+        }], showCaret: [{
+            type: Input
+        }], type: [{
+            type: Input
+        }], alignment: [{
+            type: Input
+        }], spacing: [{
+            type: Input
+        }], cssClass: [{
+            type: Input
+        }], title: [{
+            type: Input
+        }], template: [{
+            type: Input
+        }], context: [{
+            type: Input
+        }], caretElm: [{
+            type: ViewChild,
+            args: ['caretElm']
+        }] }); })();
+
+class InjectionRegisteryService {
+    constructor(injectionService) {
+        this.injectionService = injectionService;
+        this.defaults = {};
+        this.components = new Map();
+    }
+    getByType(type = this.type) {
+        return this.components.get(type);
+    }
+    create(bindings) {
+        return this.createByType(this.type, bindings);
+    }
+    createByType(type, bindings) {
+        bindings = this.assignDefaults(bindings);
+        const component = this.injectComponent(type, bindings);
+        this.register(type, component);
+        return component;
+    }
+    destroy(instance) {
+        const compsByType = this.components.get(instance.componentType);
+        if (compsByType && compsByType.length) {
+            const idx = compsByType.indexOf(instance);
+            if (idx > -1) {
+                const component = compsByType[idx];
+                component.destroy();
+                compsByType.splice(idx, 1);
+            }
+        }
+    }
+    destroyAll() {
+        this.destroyByType(this.type);
+    }
+    destroyByType(type) {
+        const comps = this.components.get(type);
+        if (comps && comps.length) {
+            let i = comps.length - 1;
+            while (i >= 0) {
+                this.destroy(comps[i--]);
+            }
+        }
+    }
+    injectComponent(type, bindings) {
+        return this.injectionService.appendComponent(type, bindings);
+    }
+    assignDefaults(bindings) {
+        const inputs = Object.assign({}, this.defaults.inputs);
+        const outputs = Object.assign({}, this.defaults.outputs);
+        if (!bindings.inputs && !bindings.outputs) {
+            bindings = { inputs: bindings };
+        }
+        if (inputs) {
+            bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);
+        }
+        if (outputs) {
+            bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);
+        }
+        return bindings;
+    }
+    register(type, component) {
+        if (!this.components.has(type)) {
+            this.components.set(type, []);
+        }
+        const types = this.components.get(type);
+        types.push(component);
+    }
+}
+
+class TooltipService extends InjectionRegisteryService {
+    constructor(injectionService) {
+        super(injectionService);
+        this.type = TooltipContentComponent;
+    }
+}
+TooltipService.ɵfac = function TooltipService_Factory(t) { return new (t || TooltipService)(ɵngcc0.ɵɵinject(InjectionService)); };
+TooltipService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TooltipService, factory: TooltipService.ɵfac });
+TooltipService.ctorParameters = () => [
+    { type: InjectionService }
+];
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipService, [{
+        type: Injectable
+    }], function () { return [{ type: InjectionService }]; }, null); })();
+
+var LegendPosition;
+(function (LegendPosition) {
+    LegendPosition["Right"] = "right";
+    LegendPosition["Below"] = "below";
+})(LegendPosition || (LegendPosition = {}));
+var LegendType;
+(function (LegendType) {
+    LegendType["ScaleLegend"] = "scaleLegend";
+    LegendType["Legend"] = "legend";
+})(LegendType || (LegendType = {}));
+
+var ScaleType;
+(function (ScaleType) {
+    ScaleType["Time"] = "time";
+    ScaleType["Linear"] = "linear";
+    ScaleType["Ordinal"] = "ordinal";
+    ScaleType["Quantile"] = "quantile";
+})(ScaleType || (ScaleType = {}));
+
+class ChartComponent {
+    constructor() {
+        this.showLegend = false;
+        this.animations = true;
+        this.legendLabelClick = new EventEmitter();
+        this.legendLabelActivate = new EventEmitter();
+        this.legendLabelDeactivate = new EventEmitter();
+        this.LegendPosition = LegendPosition;
+        this.LegendType = LegendType;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        let legendColumns = 0;
+        if (this.showLegend) {
+            this.legendType = this.getLegendType();
+            if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {
+                if (this.legendType === LegendType.ScaleLegend) {
+                    legendColumns = 1;
+                }
+                else {
+                    legendColumns = 2;
+                }
+            }
+        }
+        const chartColumns = 12 - legendColumns;
+        this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);
+        this.legendWidth =
+            !this.legendOptions || this.legendOptions.position === LegendPosition.Right
+                ? Math.floor((this.view[0] * legendColumns) / 12.0)
+                : this.chartWidth;
+    }
+    getLegendType() {
+        return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;
+    }
+}
+ChartComponent.ɵfac = function ChartComponent_Factory(t) { return new (t || ChartComponent)(); };
+ChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ChartComponent, selectors: [["ngx-charts-chart"]], inputs: { showLegend: "showLegend", animations: "animations", legendType: "legendType", view: "view", legendOptions: "legendOptions", activeEntries: "activeEntries" }, outputs: { legendLabelClick: "legendLabelClick", legendLabelActivate: "legendLabelActivate", legendLabelDeactivate: "legendLabelDeactivate" }, features: [ɵngcc0.ɵɵProvidersFeature([TooltipService]), ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c2, decls: 5, vars: 6, consts: [[1, "ngx-charts-outer"], [1, "ngx-charts"], ["class", "chart-legend", 3, "horizontal", "valueRange", "colors", "height", "width", 4, "ngIf"], ["class", "chart-legend", 3, "horizontal", "data", "title", "colors", "height", "width", "activeEntries", "labelClick", "labelActivate", "labelDeactivate", 4, "ngIf"], [1, "chart-legend", 3, "horizontal", "valueRange", "colors", "height", "width"], [1, "chart-legend", 3, "horizontal", "data", "title", "colors", "height", "width", "activeEntries", "labelClick", "labelActivate", "labelDeactivate"]], template: function ChartComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵprojectionDef();
+        ɵngcc0.ɵɵelementStart(0, "div", 0);
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "svg", 1);
+        ɵngcc0.ɵɵprojection(2);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(3, ChartComponent_ngx_charts_scale_legend_3_Template, 1, 5, "ngx-charts-scale-legend", 2);
+        ɵngcc0.ɵɵtemplate(4, ChartComponent_ngx_charts_legend_4_Template, 1, 7, "ngx-charts-legend", 3);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵstyleProp("width", ctx.view[0], "px");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("width", ctx.chartWidth)("height", ctx.view[1]);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.showLegend && ctx.legendType === ctx.LegendType.ScaleLegend);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.showLegend && ctx.legendType === ctx.LegendType.Legend);
+    } }, directives: function () { return [ɵngcc1.NgIf, ScaleLegendComponent, LegendComponent]; }, encapsulation: 2, changeDetection: 0 });
+ChartComponent.propDecorators = {
+    view: [{ type: Input }],
+    showLegend: [{ type: Input }],
+    legendOptions: [{ type: Input }],
+    legendType: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    animations: [{ type: Input }],
+    legendLabelClick: [{ type: Output }],
+    legendLabelActivate: [{ type: Output }],
+    legendLabelDeactivate: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChartComponent, [{
+        type: Component,
+        args: [{
+                providers: [TooltipService],
+                selector: 'ngx-charts-chart',
+                template: `
+    <div class="ngx-charts-outer" [style.width.px]="view[0]">
+      <svg class="ngx-charts" [attr.width]="chartWidth" [attr.height]="view[1]">
+        <ng-content></ng-content>
+      </svg>
+      <ngx-charts-scale-legend
+        *ngIf="showLegend && legendType === LegendType.ScaleLegend"
+        class="chart-legend"
+        [horizontal]="legendOptions && legendOptions.position === LegendPosition.Below"
+        [valueRange]="legendOptions.domain"
+        [colors]="legendOptions.colors"
+        [height]="view[1]"
+        [width]="legendWidth"
+      >
+      </ngx-charts-scale-legend>
+      <ngx-charts-legend
+        *ngIf="showLegend && legendType === LegendType.Legend"
+        class="chart-legend"
+        [horizontal]="legendOptions && legendOptions.position === LegendPosition.Below"
+        [data]="legendOptions.domain"
+        [title]="legendOptions.title"
+        [colors]="legendOptions.colors"
+        [height]="view[1]"
+        [width]="legendWidth"
+        [activeEntries]="activeEntries"
+        (labelClick)="legendLabelClick.emit($event)"
+        (labelActivate)="legendLabelActivate.emit($event)"
+        (labelDeactivate)="legendLabelDeactivate.emit($event)"
+      >
+      </ngx-charts-legend>
+    </div>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { showLegend: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], legendLabelClick: [{
+            type: Output
+        }], legendLabelActivate: [{
+            type: Output
+        }], legendLabelDeactivate: [{
+            type: Output
+        }], legendType: [{
+            type: Input
+        }], view: [{
+            type: Input
+        }], legendOptions: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }] }); })();
+
+/**
+ * Visibility Observer
+ */
+class VisibilityObserver {
+    constructor(element, zone) {
+        this.element = element;
+        this.zone = zone;
+        this.visible = new EventEmitter();
+        this.isVisible = false;
+        this.runCheck();
+    }
+    destroy() {
+        clearTimeout(this.timeout);
+    }
+    onVisibilityChange() {
+        // trigger zone recalc for columns
+        this.zone.run(() => {
+            this.isVisible = true;
+            this.visible.emit(true);
+        });
+    }
+    runCheck() {
+        const check = () => {
+            if (!this.element) {
+                return;
+            }
+            // https://davidwalsh.name/offsetheight-visibility
+            const { offsetHeight, offsetWidth } = this.element.nativeElement;
+            if (offsetHeight && offsetWidth) {
+                clearTimeout(this.timeout);
+                this.onVisibilityChange();
+            }
+            else {
+                clearTimeout(this.timeout);
+                this.zone.runOutsideAngular(() => {
+                    this.timeout = setTimeout(() => check(), 100);
+                });
+            }
+        };
+        this.zone.runOutsideAngular(() => {
+            this.timeout = setTimeout(() => check());
+        });
+    }
+}
+VisibilityObserver.ɵfac = function VisibilityObserver_Factory(t) { return new (t || VisibilityObserver)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
+VisibilityObserver.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: VisibilityObserver, selectors: [["visibility-observer"]], outputs: { visible: "visible" } });
+VisibilityObserver.ctorParameters = () => [
+    { type: ElementRef },
+    { type: NgZone }
+];
+VisibilityObserver.propDecorators = {
+    visible: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VisibilityObserver, [{
+        type: Directive,
+        args: [{
+                selector: 'visibility-observer'
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { visible: [{
+            type: Output
+        }] }); })();
+
+function isDate(value) {
+    return toString.call(value) === '[object Date]';
+}
+function isNumber(value) {
+    return typeof value === 'number';
+}
+
+class BaseChartComponent {
+    constructor(chartElement, zone, cd, platformId) {
+        this.chartElement = chartElement;
+        this.zone = zone;
+        this.cd = cd;
+        this.platformId = platformId;
+        this.scheme = 'cool';
+        this.schemeType = ScaleType.Ordinal;
+        this.animations = true;
+        this.select = new EventEmitter();
+    }
+    ngOnInit() {
+        if (isPlatformServer(this.platformId)) {
+            this.animations = false;
+        }
+    }
+    ngAfterViewInit() {
+        this.bindWindowResizeEvent();
+        // listen for visibility of the element for hidden by default scenario
+        this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);
+        this.visibilityObserver.visible.subscribe(this.update.bind(this));
+    }
+    ngOnDestroy() {
+        this.unbindEvents();
+        if (this.visibilityObserver) {
+            this.visibilityObserver.visible.unsubscribe();
+            this.visibilityObserver.destroy();
+        }
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        if (this.results) {
+            this.results = this.cloneData(this.results);
+        }
+        else {
+            this.results = [];
+        }
+        if (this.view) {
+            this.width = this.view[0];
+            this.height = this.view[1];
+        }
+        else {
+            const dims = this.getContainerDims();
+            if (dims) {
+                this.width = dims.width;
+                this.height = dims.height;
+            }
+        }
+        // default values if width or height are 0 or undefined
+        if (!this.width) {
+            this.width = 600;
+        }
+        if (!this.height) {
+            this.height = 400;
+        }
+        this.width = Math.floor(this.width);
+        this.height = Math.floor(this.height);
+        if (this.cd) {
+            this.cd.markForCheck();
+        }
+    }
+    getContainerDims() {
+        let width;
+        let height;
+        const hostElem = this.chartElement.nativeElement;
+        if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {
+            // Get the container dimensions
+            const dims = hostElem.parentNode.getBoundingClientRect();
+            width = dims.width;
+            height = dims.height;
+        }
+        if (width && height) {
+            return { width, height };
+        }
+        return null;
+    }
+    /**
+     * Converts all date objects that appear as name
+     * into formatted date strings
+     */
+    formatDates() {
+        for (let i = 0; i < this.results.length; i++) {
+            const g = this.results[i];
+            g.label = g.name;
+            if (isDate(g.label)) {
+                g.label = g.label.toLocaleDateString();
+            }
+            if (g.series) {
+                for (let j = 0; j < g.series.length; j++) {
+                    const d = g.series[j];
+                    d.label = d.name;
+                    if (isDate(d.label)) {
+                        d.label = d.label.toLocaleDateString();
+                    }
+                }
+            }
+        }
+    }
+    unbindEvents() {
+        if (this.resizeSubscription) {
+            this.resizeSubscription.unsubscribe();
+        }
+    }
+    bindWindowResizeEvent() {
+        if (!isPlatformBrowser(this.platformId)) {
+            return;
+        }
+        const source = fromEvent(window, 'resize');
+        const subscription = source.pipe(debounceTime(200)).subscribe(e => {
+            this.update();
+            if (this.cd) {
+                this.cd.markForCheck();
+            }
+        });
+        this.resizeSubscription = subscription;
+    }
+    /**
+     * Clones the data into a new object
+     *
+     * @memberOf BaseChart
+     */
+    cloneData(data) {
+        const results = [];
+        for (const item of data) {
+            const copy = {
+                name: item['name']
+            };
+            if (item['value'] !== undefined) {
+                copy['value'] = item['value'];
+            }
+            if (item['series'] !== undefined) {
+                copy['series'] = [];
+                for (const seriesItem of item['series']) {
+                    const seriesItemCopy = Object.assign({}, seriesItem);
+                    copy['series'].push(seriesItemCopy);
+                }
+            }
+            if (item['extra'] !== undefined) {
+                copy['extra'] = JSON.parse(JSON.stringify(item['extra']));
+            }
+            results.push(copy);
+        }
+        return results;
+    }
+}
+BaseChartComponent.ɵfac = function BaseChartComponent_Factory(t) { return new (t || BaseChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
+BaseChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BaseChartComponent, selectors: [["base-chart"]], inputs: { scheme: "scheme", schemeType: "schemeType", animations: "animations", results: "results", view: "view", customColors: "customColors" }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 0, template: function BaseChartComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelement(0, "div");
+    } }, encapsulation: 2 });
+BaseChartComponent.ctorParameters = () => [
+    { type: ElementRef },
+    { type: NgZone },
+    { type: ChangeDetectorRef },
+    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
+];
+BaseChartComponent.propDecorators = {
+    results: [{ type: Input }],
+    view: [{ type: Input }],
+    scheme: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    customColors: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseChartComponent, [{
+        type: Component,
+        args: [{
+                selector: 'base-chart',
+                template: ` <div></div> `
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
+                type: Inject,
+                args: [PLATFORM_ID]
+            }] }]; }, { scheme: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], results: [{
+            type: Input
+        }], view: [{
+            type: Input
+        }], customColors: [{
+            type: Input
+        }] }); })();
+
+var Orientation;
+(function (Orientation) {
+    Orientation["Top"] = "top";
+    Orientation["Bottom"] = "bottom";
+    Orientation["Left"] = "left";
+    Orientation["Right"] = "right";
+})(Orientation || (Orientation = {}));
+
+class AxisLabelComponent {
+    constructor(element) {
+        this.textHeight = 25;
+        this.margin = 5;
+        this.element = element.nativeElement;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.strokeWidth = '0.01';
+        this.textAnchor = 'middle';
+        this.transform = '';
+        switch (this.orient) {
+            case Orientation.Top:
+                this.y = this.offset;
+                this.x = this.width / 2;
+                break;
+            case Orientation.Bottom:
+                this.y = this.offset;
+                this.x = this.width / 2;
+                break;
+            case Orientation.Left:
+                this.y = -(this.offset + this.textHeight + this.margin);
+                this.x = -this.height / 2;
+                this.transform = 'rotate(270)';
+                break;
+            case Orientation.Right:
+                this.y = this.offset + this.margin;
+                this.x = -this.height / 2;
+                this.transform = 'rotate(270)';
+                break;
+            default:
+        }
+    }
+}
+AxisLabelComponent.ɵfac = function AxisLabelComponent_Factory(t) { return new (t || AxisLabelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
+AxisLabelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AxisLabelComponent, selectors: [["g", "ngx-charts-axis-label", ""]], inputs: { orient: "orient", label: "label", offset: "offset", width: "width", height: "height" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c3, decls: 2, vars: 6, template: function AxisLabelComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "text");
+        ɵngcc0.ɵɵtext(1);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵattribute("stroke-width", ctx.strokeWidth)("x", ctx.x)("y", ctx.y)("text-anchor", ctx.textAnchor)("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.label, " ");
+    } }, encapsulation: 2, changeDetection: 0 });
+AxisLabelComponent.ctorParameters = () => [
+    { type: ElementRef }
+];
+AxisLabelComponent.propDecorators = {
+    orient: [{ type: Input }],
+    label: [{ type: Input }],
+    offset: [{ type: Input }],
+    width: [{ type: Input }],
+    height: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AxisLabelComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-axis-label]',
+                template: `
+    <svg:text
+      [attr.stroke-width]="strokeWidth"
+      [attr.x]="x"
+      [attr.y]="y"
+      [attr.text-anchor]="textAnchor"
+      [attr.transform]="transform"
+    >
+      {{ label }}
+    </svg:text>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { orient: [{
+            type: Input
+        }], label: [{
+            type: Input
+        }], offset: [{
+            type: Input
+        }], width: [{
+            type: Input
+        }], height: [{
+            type: Input
+        }] }); })();
+
+function trimLabel(s, max = 16) {
+    if (typeof s !== 'string') {
+        if (typeof s === 'number') {
+            return s + '';
+        }
+        else {
+            return '';
+        }
+    }
+    s = s.trim();
+    if (s.length <= max) {
+        return s;
+    }
+    else {
+        return `${s.slice(0, max)}...`;
+    }
+}
+
+function reduceTicks(ticks, maxTicks) {
+    if (ticks.length > maxTicks) {
+        const reduced = [];
+        const modulus = Math.floor(ticks.length / maxTicks);
+        for (let i = 0; i < ticks.length; i++) {
+            if (i % modulus === 0) {
+                reduced.push(ticks[i]);
+            }
+        }
+        ticks = reduced;
+    }
+    return ticks;
+}
+
+var TextAnchor;
+(function (TextAnchor) {
+    TextAnchor["Start"] = "start";
+    TextAnchor["Middle"] = "middle";
+    TextAnchor["End"] = "end";
+})(TextAnchor || (TextAnchor = {}));
+
+class XAxisTicksComponent {
+    constructor(platformId) {
+        this.platformId = platformId;
+        this.tickArguments = [5];
+        this.tickStroke = '#ccc';
+        this.trimTicks = true;
+        this.maxTickLength = 16;
+        this.showGridLines = false;
+        this.rotateTicks = true;
+        this.dimensionsChanged = new EventEmitter();
+        this.verticalSpacing = 20;
+        this.rotateLabels = false;
+        this.innerTickSize = 6;
+        this.outerTickSize = 6;
+        this.tickPadding = 3;
+        this.textAnchor = TextAnchor.Middle;
+        this.maxTicksLength = 0;
+        this.maxAllowedLength = 16;
+        this.height = 0;
+        this.approxHeight = 10;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    ngAfterViewInit() {
+        setTimeout(() => this.updateDims());
+    }
+    updateDims() {
+        if (!isPlatformBrowser(this.platformId)) {
+            // for SSR, use approximate value instead of measured
+            this.dimensionsChanged.emit({ height: this.approxHeight });
+            return;
+        }
+        const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);
+        if (height !== this.height) {
+            this.height = height;
+            this.dimensionsChanged.emit({ height: this.height });
+            setTimeout(() => this.updateDims());
+        }
+    }
+    update() {
+        const scale = this.scale;
+        this.ticks = this.getTicks();
+        if (this.tickFormatting) {
+            this.tickFormat = this.tickFormatting;
+        }
+        else if (scale.tickFormat) {
+            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);
+        }
+        else {
+            this.tickFormat = function (d) {
+                if (d.constructor.name === 'Date') {
+                    return d.toLocaleDateString();
+                }
+                return d.toLocaleString();
+            };
+        }
+        const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;
+        this.adjustedScale = this.scale.bandwidth
+            ? function (d) {
+                return this.scale(d) + this.scale.bandwidth() * 0.5;
+            }
+            : this.scale;
+        this.textTransform = '';
+        if (angle && angle !== 0) {
+            this.textTransform = `rotate(${angle})`;
+            this.textAnchor = TextAnchor.End;
+            this.verticalSpacing = 10;
+        }
+        else {
+            this.textAnchor = TextAnchor.Middle;
+        }
+        setTimeout(() => this.updateDims());
+    }
+    getRotationAngle(ticks) {
+        let angle = 0;
+        this.maxTicksLength = 0;
+        for (let i = 0; i < ticks.length; i++) {
+            const tick = this.tickFormat(ticks[i]).toString();
+            let tickLength = tick.length;
+            if (this.trimTicks) {
+                tickLength = this.tickTrim(tick).length;
+            }
+            if (tickLength > this.maxTicksLength) {
+                this.maxTicksLength = tickLength;
+            }
+        }
+        const len = Math.min(this.maxTicksLength, this.maxAllowedLength);
+        const charWidth = 7; // need to measure this
+        const wordWidth = len * charWidth;
+        let baseWidth = wordWidth;
+        const maxBaseWidth = Math.floor(this.width / ticks.length);
+        // calculate optimal angle
+        while (baseWidth > maxBaseWidth && angle > -90) {
+            angle -= 30;
+            baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;
+        }
+        this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);
+        return angle;
+    }
+    getTicks() {
+        let ticks;
+        const maxTicks = this.getMaxTicks(20);
+        const maxScaleTicks = this.getMaxTicks(100);
+        if (this.tickValues) {
+            ticks = this.tickValues;
+        }
+        else if (this.scale.ticks) {
+            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);
+        }
+        else {
+            ticks = this.scale.domain();
+            ticks = reduceTicks(ticks, maxTicks);
+        }
+        return ticks;
+    }
+    getMaxTicks(tickWidth) {
+        return Math.floor(this.width / tickWidth);
+    }
+    tickTransform(tick) {
+        return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';
+    }
+    gridLineTransform() {
+        return `translate(0,${-this.verticalSpacing - 5})`;
+    }
+    tickTrim(label) {
+        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;
+    }
+}
+XAxisTicksComponent.ɵfac = function XAxisTicksComponent_Factory(t) { return new (t || XAxisTicksComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
+XAxisTicksComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: XAxisTicksComponent, selectors: [["g", "ngx-charts-x-axis-ticks", ""]], viewQuery: function XAxisTicksComponent_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵviewQuery(_c4, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);
+    } }, inputs: { tickArguments: "tickArguments", tickStroke: "tickStroke", trimTicks: "trimTicks", maxTickLength: "maxTickLength", showGridLines: "showGridLines", rotateTicks: "rotateTicks", scale: "scale", orient: "orient", tickValues: "tickValues", tickFormatting: "tickFormatting", gridLineHeight: "gridLineHeight", width: "width" }, outputs: { dimensionsChanged: "dimensionsChanged" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c5, decls: 4, vars: 2, consts: [["ticksel", ""], ["class", "tick", 4, "ngFor", "ngForOf"], [4, "ngFor", "ngForOf"], [1, "tick"], ["stroke-width", "0.01"], [4, "ngIf"], ["y2", "0", 1, "gridline-path", "gridline-path-vertical"]], template: function XAxisTicksComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g", null, 0);
+        ɵngcc0.ɵɵtemplate(2, XAxisTicksComponent__svg_g_2_Template, 5, 7, "g", 1);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(3, XAxisTicksComponent__svg_g_3_Template, 2, 2, "g", 2);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.ticks);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.ticks);
+    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf], encapsulation: 2, changeDetection: 0 });
+XAxisTicksComponent.ctorParameters = () => [
+    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
+];
+XAxisTicksComponent.propDecorators = {
+    scale: [{ type: Input }],
+    orient: [{ type: Input }],
+    tickArguments: [{ type: Input }],
+    tickValues: [{ type: Input }],
+    tickStroke: [{ type: Input }],
+    trimTicks: [{ type: Input }],
+    maxTickLength: [{ type: Input }],
+    tickFormatting: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    gridLineHeight: [{ type: Input }],
+    width: [{ type: Input }],
+    rotateTicks: [{ type: Input }],
+    dimensionsChanged: [{ type: Output }],
+    ticksElement: [{ type: ViewChild, args: ['ticksel',] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(XAxisTicksComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-x-axis-ticks]',
+                template: `
+    <svg:g #ticksel>
+      <svg:g *ngFor="let tick of ticks" class="tick" [attr.transform]="tickTransform(tick)">
+        <title>{{ tickFormat(tick) }}</title>
+        <svg:text
+          stroke-width="0.01"
+          [attr.text-anchor]="textAnchor"
+          [attr.transform]="textTransform"
+          [style.font-size]="'12px'"
+        >
+          {{ tickTrim(tickFormat(tick)) }}
+        </svg:text>
+      </svg:g>
+    </svg:g>
+
+    <svg:g *ngFor="let tick of ticks" [attr.transform]="tickTransform(tick)">
+      <svg:g *ngIf="showGridLines" [attr.transform]="gridLineTransform()">
+        <svg:line class="gridline-path gridline-path-vertical" [attr.y1]="-gridLineHeight" y2="0" />
+      </svg:g>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: undefined, decorators: [{
+                type: Inject,
+                args: [PLATFORM_ID]
+            }] }]; }, { tickArguments: [{
+            type: Input
+        }], tickStroke: [{
+            type: Input
+        }], trimTicks: [{
+            type: Input
+        }], maxTickLength: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], rotateTicks: [{
+            type: Input
+        }], dimensionsChanged: [{
+            type: Output
+        }], scale: [{
+            type: Input
+        }], orient: [{
+            type: Input
+        }], tickValues: [{
+            type: Input
+        }], tickFormatting: [{
+            type: Input
+        }], gridLineHeight: [{
+            type: Input
+        }], width: [{
+            type: Input
+        }], ticksElement: [{
+            type: ViewChild,
+            args: ['ticksel']
+        }] }); })();
+
+class XAxisComponent {
+    constructor() {
+        this.rotateTicks = true;
+        this.showGridLines = false;
+        this.xOrient = Orientation.Bottom;
+        this.xAxisOffset = 0;
+        this.dimensionsChanged = new EventEmitter();
+        this.xAxisClassName = 'x axis';
+        this.labelOffset = 0;
+        this.fill = 'none';
+        this.stroke = 'stroke';
+        this.tickStroke = '#ccc';
+        this.strokeWidth = 'none';
+        this.padding = 5;
+        this.orientation = Orientation;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;
+        if (typeof this.xAxisTickCount !== 'undefined') {
+            this.tickArguments = [this.xAxisTickCount];
+        }
+    }
+    emitTicksHeight({ height }) {
+        const newLabelOffset = height + 25 + 5;
+        if (newLabelOffset !== this.labelOffset) {
+            this.labelOffset = newLabelOffset;
+            setTimeout(() => {
+                this.dimensionsChanged.emit({ height });
+            }, 0);
+        }
+    }
+}
+XAxisComponent.ɵfac = function XAxisComponent_Factory(t) { return new (t || XAxisComponent)(); };
+XAxisComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: XAxisComponent, selectors: [["g", "ngx-charts-x-axis", ""]], viewQuery: function XAxisComponent_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵviewQuery(XAxisTicksComponent, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);
+    } }, inputs: { rotateTicks: "rotateTicks", showGridLines: "showGridLines", xOrient: "xOrient", xAxisOffset: "xAxisOffset", xScale: "xScale", dims: "dims", trimTicks: "trimTicks", maxTickLength: "maxTickLength", tickFormatting: "tickFormatting", showLabel: "showLabel", labelText: "labelText", ticks: "ticks", xAxisTickCount: "xAxisTickCount" }, outputs: { dimensionsChanged: "dimensionsChanged" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c6, decls: 3, vars: 4, consts: [["ngx-charts-x-axis-ticks", "", 3, "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "tickArguments", "tickStroke", "scale", "orient", "showGridLines", "gridLineHeight", "width", "tickValues", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-axis-label", "", 3, "label", "offset", "orient", "height", "width", 4, "ngIf"], ["ngx-charts-x-axis-ticks", "", 3, "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "tickArguments", "tickStroke", "scale", "orient", "showGridLines", "gridLineHeight", "width", "tickValues", "dimensionsChanged"], ["ngx-charts-axis-label", "", 3, "label", "offset", "orient", "height", "width"]], template: function XAxisComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g");
+        ɵngcc0.ɵɵtemplate(1, XAxisComponent__svg_g_1_Template, 1, 12, "g", 0);
+        ɵngcc0.ɵɵtemplate(2, XAxisComponent__svg_g_2_Template, 1, 5, "g", 1);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵattribute("class", ctx.xAxisClassName)("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xScale);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.showLabel);
+    } }, directives: [ɵngcc1.NgIf, XAxisTicksComponent, AxisLabelComponent], encapsulation: 2, changeDetection: 0 });
+XAxisComponent.propDecorators = {
+    xScale: [{ type: Input }],
+    dims: [{ type: Input }],
+    trimTicks: [{ type: Input }],
+    rotateTicks: [{ type: Input }],
+    maxTickLength: [{ type: Input }],
+    tickFormatting: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    showLabel: [{ type: Input }],
+    labelText: [{ type: Input }],
+    ticks: [{ type: Input }],
+    xAxisTickCount: [{ type: Input }],
+    xOrient: [{ type: Input }],
+    xAxisOffset: [{ type: Input }],
+    dimensionsChanged: [{ type: Output }],
+    ticksComponent: [{ type: ViewChild, args: [XAxisTicksComponent,] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(XAxisComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-x-axis]',
+                template: `
+    <svg:g [attr.class]="xAxisClassName" [attr.transform]="transform">
+      <svg:g
+        ngx-charts-x-axis-ticks
+        *ngIf="xScale"
+        [trimTicks]="trimTicks"
+        [rotateTicks]="rotateTicks"
+        [maxTickLength]="maxTickLength"
+        [tickFormatting]="tickFormatting"
+        [tickArguments]="tickArguments"
+        [tickStroke]="tickStroke"
+        [scale]="xScale"
+        [orient]="xOrient"
+        [showGridLines]="showGridLines"
+        [gridLineHeight]="dims.height"
+        [width]="dims.width"
+        [tickValues]="ticks"
+        (dimensionsChanged)="emitTicksHeight($event)"
+      />
+      <svg:g
+        ngx-charts-axis-label
+        *ngIf="showLabel"
+        [label]="labelText"
+        [offset]="labelOffset"
+        [orient]="orientation.Bottom"
+        [height]="dims.height"
+        [width]="dims.width"
+      ></svg:g>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { rotateTicks: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], xOrient: [{
+            type: Input
+        }], xAxisOffset: [{
+            type: Input
+        }], dimensionsChanged: [{
+            type: Output
+        }], xScale: [{
+            type: Input
+        }], dims: [{
+            type: Input
+        }], trimTicks: [{
+            type: Input
+        }], maxTickLength: [{
+            type: Input
+        }], tickFormatting: [{
+            type: Input
+        }], showLabel: [{
+            type: Input
+        }], labelText: [{
+            type: Input
+        }], ticks: [{
+            type: Input
+        }], xAxisTickCount: [{
+            type: Input
+        }], ticksComponent: [{
+            type: ViewChild,
+            args: [XAxisTicksComponent]
+        }] }); })();
+
+/**
+ * Generates a rounded rectanglar path
+ *
+ * @export
+ * @param x, y, w, h, r, tl, tr, bl, br
+ */
+function roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {
+    let retval = '';
+    w = Math.floor(w);
+    h = Math.floor(h);
+    w = w === 0 ? 1 : w;
+    h = h === 0 ? 1 : h;
+    retval = `M${[x + r, y]}`;
+    retval += `h${w - 2 * r}`;
+    if (tr) {
+        retval += `a${[r, r]} 0 0 1 ${[r, r]}`;
+    }
+    else {
+        retval += `h${r}v${r}`;
+    }
+    retval += `v${h - 2 * r}`;
+    if (br) {
+        retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;
+    }
+    else {
+        retval += `v${r}h${-r}`;
+    }
+    retval += `h${2 * r - w}`;
+    if (bl) {
+        retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;
+    }
+    else {
+        retval += `h${-r}v${-r}`;
+    }
+    retval += `v${2 * r - h}`;
+    if (tl) {
+        retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;
+    }
+    else {
+        retval += `v${-r}h${r}`;
+    }
+    retval += `z`;
+    return retval;
+}
+
+class YAxisTicksComponent {
+    constructor(platformId) {
+        this.platformId = platformId;
+        this.tickArguments = [5];
+        this.tickStroke = '#ccc';
+        this.trimTicks = true;
+        this.maxTickLength = 16;
+        this.showGridLines = false;
+        this.showRefLabels = false;
+        this.showRefLines = false;
+        this.dimensionsChanged = new EventEmitter();
+        this.innerTickSize = 6;
+        this.tickPadding = 3;
+        this.verticalSpacing = 20;
+        this.textAnchor = TextAnchor.Middle;
+        this.width = 0;
+        this.outerTickSize = 6;
+        this.rotateLabels = false;
+        this.referenceLineLength = 0;
+        this.Orientation = Orientation;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    ngAfterViewInit() {
+        setTimeout(() => this.updateDims());
+    }
+    updateDims() {
+        if (!isPlatformBrowser(this.platformId)) {
+            // for SSR, use approximate value instead of measured
+            this.width = this.getApproximateAxisWidth();
+            this.dimensionsChanged.emit({ width: this.width });
+            return;
+        }
+        const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);
+        if (width !== this.width) {
+            this.width = width;
+            this.dimensionsChanged.emit({ width });
+            setTimeout(() => this.updateDims());
+        }
+    }
+    update() {
+        let scale;
+        const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;
+        this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;
+        scale = this.scale;
+        this.ticks = this.getTicks();
+        if (this.tickFormatting) {
+            this.tickFormat = this.tickFormatting;
+        }
+        else if (scale.tickFormat) {
+            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);
+        }
+        else {
+            this.tickFormat = function (d) {
+                if (d.constructor.name === 'Date') {
+                    return d.toLocaleDateString();
+                }
+                return d.toLocaleString();
+            };
+        }
+        this.adjustedScale = scale.bandwidth
+            ? function (d) {
+                return scale(d) + scale.bandwidth() * 0.5;
+            }
+            : scale;
+        if (this.showRefLines && this.referenceLines) {
+            this.setReferencelines();
+        }
+        switch (this.orient) {
+            case Orientation.Top:
+                this.transform = function (tick) {
+                    return 'translate(' + this.adjustedScale(tick) + ',0)';
+                };
+                this.textAnchor = TextAnchor.Middle;
+                this.y2 = this.innerTickSize * sign;
+                this.y1 = this.tickSpacing * sign;
+                this.dy = sign < 0 ? '0em' : '.71em';
+                break;
+            case Orientation.Bottom:
+                this.transform = function (tick) {
+                    return 'translate(' + this.adjustedScale(tick) + ',0)';
+                };
+                this.textAnchor = TextAnchor.Middle;
+                this.y2 = this.innerTickSize * sign;
+                this.y1 = this.tickSpacing * sign;
+                this.dy = sign < 0 ? '0em' : '.71em';
+                break;
+            case Orientation.Left:
+                this.transform = function (tick) {
+                    return 'translate(0,' + this.adjustedScale(tick) + ')';
+                };
+                this.textAnchor = TextAnchor.End;
+                this.x2 = this.innerTickSize * -sign;
+                this.x1 = this.tickSpacing * -sign;
+                this.dy = '.32em';
+                break;
+            case Orientation.Right:
+                this.transform = function (tick) {
+                    return 'translate(0,' + this.adjustedScale(tick) + ')';
+                };
+                this.textAnchor = TextAnchor.Start;
+                this.x2 = this.innerTickSize * -sign;
+                this.x1 = this.tickSpacing * -sign;
+                this.dy = '.32em';
+                break;
+            default:
+        }
+        setTimeout(() => this.updateDims());
+    }
+    setReferencelines() {
+        this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));
+        this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));
+        this.referenceLineLength = this.referenceLines.length;
+        this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [
+            false,
+            false,
+            false,
+            false
+        ]);
+    }
+    getTicks() {
+        let ticks;
+        const maxTicks = this.getMaxTicks(20);
+        const maxScaleTicks = this.getMaxTicks(50);
+        if (this.tickValues) {
+            ticks = this.tickValues;
+        }
+        else if (this.scale.ticks) {
+            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);
+        }
+        else {
+            ticks = this.scale.domain();
+            ticks = reduceTicks(ticks, maxTicks);
+        }
+        return ticks;
+    }
+    getMaxTicks(tickHeight) {
+        return Math.floor(this.height / tickHeight);
+    }
+    tickTransform(tick) {
+        return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;
+    }
+    gridLineTransform() {
+        return `translate(5,0)`;
+    }
+    tickTrim(label) {
+        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;
+    }
+    getApproximateAxisWidth() {
+        const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));
+        const charWidth = 7;
+        return maxChars * charWidth;
+    }
+}
+YAxisTicksComponent.ɵfac = function YAxisTicksComponent_Factory(t) { return new (t || YAxisTicksComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
+YAxisTicksComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: YAxisTicksComponent, selectors: [["g", "ngx-charts-y-axis-ticks", ""]], viewQuery: function YAxisTicksComponent_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵviewQuery(_c4, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);
+    } }, inputs: { tickArguments: "tickArguments", tickStroke: "tickStroke", trimTicks: "trimTicks", maxTickLength: "maxTickLength", showGridLines: "showGridLines", showRefLabels: "showRefLabels", showRefLines: "showRefLines", scale: "scale", orient: "orient", tickValues: "tickValues", tickFormatting: "tickFormatting", gridLineWidth: "gridLineWidth", height: "height", referenceLines: "referenceLines" }, outputs: { dimensionsChanged: "dimensionsChanged" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c7, decls: 6, vars: 4, consts: [["ticksel", ""], ["class", "tick", 4, "ngFor", "ngForOf"], ["class", "reference-area", 4, "ngIf"], [4, "ngFor", "ngForOf"], [1, "tick"], ["stroke-width", "0.01"], [1, "reference-area"], [4, "ngIf"], ["class", "gridline-path gridline-path-horizontal", "x1", "0", 4, "ngIf"], ["x1", "0", 1, "gridline-path", "gridline-path-horizontal"], ["x1", "0", 1, "refline-path", "gridline-path-horizontal"], [1, "refline-label"]], template: function YAxisTicksComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g", null, 0);
+        ɵngcc0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_2_Template, 5, 9, "g", 1);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(3, YAxisTicksComponent__svg_path_3_Template, 1, 2, "path", 2);
+        ɵngcc0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_4_Template, 2, 2, "g", 3);
+        ɵngcc0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_5_Template, 2, 1, "g", 3);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.ticks);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.referenceLineLength > 1 && ctx.refMax && ctx.refMin && ctx.showRefLines);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.ticks);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.referenceLines);
+    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf], encapsulation: 2, changeDetection: 0 });
+YAxisTicksComponent.ctorParameters = () => [
+    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
+];
+YAxisTicksComponent.propDecorators = {
+    scale: [{ type: Input }],
+    orient: [{ type: Input }],
+    tickArguments: [{ type: Input }],
+    tickValues: [{ type: Input }],
+    tickStroke: [{ type: Input }],
+    trimTicks: [{ type: Input }],
+    maxTickLength: [{ type: Input }],
+    tickFormatting: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    gridLineWidth: [{ type: Input }],
+    height: [{ type: Input }],
+    referenceLines: [{ type: Input }],
+    showRefLabels: [{ type: Input }],
+    showRefLines: [{ type: Input }],
+    dimensionsChanged: [{ type: Output }],
+    ticksElement: [{ type: ViewChild, args: ['ticksel',] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(YAxisTicksComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-y-axis-ticks]',
+                template: `
+    <svg:g #ticksel>
+      <svg:g *ngFor="let tick of ticks" class="tick" [attr.transform]="transform(tick)">
+        <title>{{ tickFormat(tick) }}</title>
+        <svg:text
+          stroke-width="0.01"
+          [attr.dy]="dy"
+          [attr.x]="x1"
+          [attr.y]="y1"
+          [attr.text-anchor]="textAnchor"
+          [style.font-size]="'12px'"
+        >
+          {{ tickTrim(tickFormat(tick)) }}
+        </svg:text>
+      </svg:g>
+    </svg:g>
+
+    <svg:path
+      *ngIf="referenceLineLength > 1 && refMax && refMin && showRefLines"
+      class="reference-area"
+      [attr.d]="referenceAreaPath"
+      [attr.transform]="gridLineTransform()"
+    />
+    <svg:g *ngFor="let tick of ticks" [attr.transform]="transform(tick)">
+      <svg:g *ngIf="showGridLines" [attr.transform]="gridLineTransform()">
+        <svg:line
+          *ngIf="orient === Orientation.Left"
+          class="gridline-path gridline-path-horizontal"
+          x1="0"
+          [attr.x2]="gridLineWidth"
+        />
+        <svg:line
+          *ngIf="orient === Orientation.Right"
+          class="gridline-path gridline-path-horizontal"
+          x1="0"
+          [attr.x2]="-gridLineWidth"
+        />
+      </svg:g>
+    </svg:g>
+
+    <svg:g *ngFor="let refLine of referenceLines">
+      <svg:g *ngIf="showRefLines" [attr.transform]="transform(refLine.value)">
+        <svg:line
+          class="refline-path gridline-path-horizontal"
+          x1="0"
+          [attr.x2]="gridLineWidth"
+          [attr.transform]="gridLineTransform()"
+        />
+        <svg:g *ngIf="showRefLabels">
+          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>
+          <svg:text
+            class="refline-label"
+            [attr.dy]="dy"
+            [attr.y]="-6"
+            [attr.x]="gridLineWidth"
+            [attr.text-anchor]="textAnchor"
+          >
+            {{ refLine.name }}
+          </svg:text>
+        </svg:g>
+      </svg:g>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: undefined, decorators: [{
+                type: Inject,
+                args: [PLATFORM_ID]
+            }] }]; }, { tickArguments: [{
+            type: Input
+        }], tickStroke: [{
+            type: Input
+        }], trimTicks: [{
+            type: Input
+        }], maxTickLength: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], showRefLabels: [{
+            type: Input
+        }], showRefLines: [{
+            type: Input
+        }], dimensionsChanged: [{
+            type: Output
+        }], scale: [{
+            type: Input
+        }], orient: [{
+            type: Input
+        }], tickValues: [{
+            type: Input
+        }], tickFormatting: [{
+            type: Input
+        }], gridLineWidth: [{
+            type: Input
+        }], height: [{
+            type: Input
+        }], referenceLines: [{
+            type: Input
+        }], ticksElement: [{
+            type: ViewChild,
+            args: ['ticksel']
+        }] }); })();
+
+class YAxisComponent {
+    constructor() {
+        this.showGridLines = false;
+        this.yOrient = Orientation.Left;
+        this.yAxisOffset = 0;
+        this.dimensionsChanged = new EventEmitter();
+        this.yAxisClassName = 'y axis';
+        this.labelOffset = 15;
+        this.fill = 'none';
+        this.stroke = '#CCC';
+        this.tickStroke = '#CCC';
+        this.strokeWidth = 1;
+        this.padding = 5;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.offset = -(this.yAxisOffset + this.padding);
+        if (this.yOrient === Orientation.Right) {
+            this.labelOffset = 65;
+            this.transform = `translate(${this.offset + this.dims.width} , 0)`;
+        }
+        else {
+            this.offset = this.offset;
+            this.transform = `translate(${this.offset} , 0)`;
+        }
+        if (this.yAxisTickCount !== undefined) {
+            this.tickArguments = [this.yAxisTickCount];
+        }
+    }
+    emitTicksWidth({ width }) {
+        if (width !== this.labelOffset && this.yOrient === Orientation.Right) {
+            this.labelOffset = width + this.labelOffset;
+            setTimeout(() => {
+                this.dimensionsChanged.emit({ width });
+            }, 0);
+        }
+        else if (width !== this.labelOffset) {
+            this.labelOffset = width;
+            setTimeout(() => {
+                this.dimensionsChanged.emit({ width });
+            }, 0);
+        }
+    }
+}
+YAxisComponent.ɵfac = function YAxisComponent_Factory(t) { return new (t || YAxisComponent)(); };
+YAxisComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: YAxisComponent, selectors: [["g", "ngx-charts-y-axis", ""]], viewQuery: function YAxisComponent_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵviewQuery(YAxisTicksComponent, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);
+    } }, inputs: { showGridLines: "showGridLines", yOrient: "yOrient", yAxisOffset: "yAxisOffset", yScale: "yScale", dims: "dims", trimTicks: "trimTicks", maxTickLength: "maxTickLength", tickFormatting: "tickFormatting", ticks: "ticks", showLabel: "showLabel", labelText: "labelText", yAxisTickCount: "yAxisTickCount", referenceLines: "referenceLines", showRefLines: "showRefLines", showRefLabels: "showRefLabels" }, outputs: { dimensionsChanged: "dimensionsChanged" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c8, decls: 3, vars: 4, consts: [["ngx-charts-y-axis-ticks", "", 3, "trimTicks", "maxTickLength", "tickFormatting", "tickArguments", "tickValues", "tickStroke", "scale", "orient", "showGridLines", "gridLineWidth", "referenceLines", "showRefLines", "showRefLabels", "height", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-axis-label", "", 3, "label", "offset", "orient", "height", "width", 4, "ngIf"], ["ngx-charts-y-axis-ticks", "", 3, "trimTicks", "maxTickLength", "tickFormatting", "tickArguments", "tickValues", "tickStroke", "scale", "orient", "showGridLines", "gridLineWidth", "referenceLines", "showRefLines", "showRefLabels", "height", "dimensionsChanged"], ["ngx-charts-axis-label", "", 3, "label", "offset", "orient", "height", "width"]], template: function YAxisComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g");
+        ɵngcc0.ɵɵtemplate(1, YAxisComponent__svg_g_1_Template, 1, 14, "g", 0);
+        ɵngcc0.ɵɵtemplate(2, YAxisComponent__svg_g_2_Template, 1, 5, "g", 1);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵattribute("class", ctx.yAxisClassName)("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yScale);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.showLabel);
+    } }, directives: [ɵngcc1.NgIf, YAxisTicksComponent, AxisLabelComponent], encapsulation: 2, changeDetection: 0 });
+YAxisComponent.propDecorators = {
+    yScale: [{ type: Input }],
+    dims: [{ type: Input }],
+    trimTicks: [{ type: Input }],
+    maxTickLength: [{ type: Input }],
+    tickFormatting: [{ type: Input }],
+    ticks: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    showLabel: [{ type: Input }],
+    labelText: [{ type: Input }],
+    yAxisTickCount: [{ type: Input }],
+    yOrient: [{ type: Input }],
+    referenceLines: [{ type: Input }],
+    showRefLines: [{ type: Input }],
+    showRefLabels: [{ type: Input }],
+    yAxisOffset: [{ type: Input }],
+    dimensionsChanged: [{ type: Output }],
+    ticksComponent: [{ type: ViewChild, args: [YAxisTicksComponent,] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(YAxisComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-y-axis]',
+                template: `
+    <svg:g [attr.class]="yAxisClassName" [attr.transform]="transform">
+      <svg:g
+        ngx-charts-y-axis-ticks
+        *ngIf="yScale"
+        [trimTicks]="trimTicks"
+        [maxTickLength]="maxTickLength"
+        [tickFormatting]="tickFormatting"
+        [tickArguments]="tickArguments"
+        [tickValues]="ticks"
+        [tickStroke]="tickStroke"
+        [scale]="yScale"
+        [orient]="yOrient"
+        [showGridLines]="showGridLines"
+        [gridLineWidth]="dims.width"
+        [referenceLines]="referenceLines"
+        [showRefLines]="showRefLines"
+        [showRefLabels]="showRefLabels"
+        [height]="dims.height"
+        (dimensionsChanged)="emitTicksWidth($event)"
+      />
+
+      <svg:g
+        ngx-charts-axis-label
+        *ngIf="showLabel"
+        [label]="labelText"
+        [offset]="labelOffset"
+        [orient]="yOrient"
+        [height]="dims.height"
+        [width]="dims.width"
+      ></svg:g>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { showGridLines: [{
+            type: Input
+        }], yOrient: [{
+            type: Input
+        }], yAxisOffset: [{
+            type: Input
+        }], dimensionsChanged: [{
+            type: Output
+        }], yScale: [{
+            type: Input
+        }], dims: [{
+            type: Input
+        }], trimTicks: [{
+            type: Input
+        }], maxTickLength: [{
+            type: Input
+        }], tickFormatting: [{
+            type: Input
+        }], ticks: [{
+            type: Input
+        }], showLabel: [{
+            type: Input
+        }], labelText: [{
+            type: Input
+        }], yAxisTickCount: [{
+            type: Input
+        }], referenceLines: [{
+            type: Input
+        }], showRefLines: [{
+            type: Input
+        }], showRefLabels: [{
+            type: Input
+        }], ticksComponent: [{
+            type: ViewChild,
+            args: [YAxisTicksComponent]
+        }] }); })();
+
+class AxesModule {
+}
+AxesModule.ɵfac = function AxesModule_Factory(t) { return new (t || AxesModule)(); };
+AxesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AxesModule });
+AxesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AxesModule, { declarations: function () { return [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]; } }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AxesModule, [{
+        type: NgModule,
+        args: [{
+                imports: [CommonModule],
+                declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],
+                exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]
+            }]
+    }], null, null); })();
+
+var StyleTypes;
+(function (StyleTypes) {
+    StyleTypes["popover"] = "popover";
+    StyleTypes["tooltip"] = "tooltip";
+})(StyleTypes || (StyleTypes = {}));
+
+var ShowTypes;
+(function (ShowTypes) {
+    ShowTypes[ShowTypes["all"] = 'all'] = "all";
+    ShowTypes[ShowTypes["focus"] = 'focus'] = "focus";
+    ShowTypes[ShowTypes["mouseover"] = 'mouseover'] = "mouseover";
+})(ShowTypes || (ShowTypes = {}));
+
+class TooltipDirective {
+    constructor(tooltipService, viewContainerRef, renderer) {
+        this.tooltipService = tooltipService;
+        this.viewContainerRef = viewContainerRef;
+        this.renderer = renderer;
+        this.tooltipCssClass = '';
+        this.tooltipAppendToBody = true;
+        this.tooltipSpacing = 10;
+        this.tooltipDisabled = false;
+        this.tooltipShowCaret = true;
+        this.tooltipPlacement = PlacementTypes.Top;
+        this.tooltipAlignment = PlacementTypes.Center;
+        this.tooltipType = StyleTypes.popover;
+        this.tooltipCloseOnClickOutside = true;
+        this.tooltipCloseOnMouseLeave = true;
+        this.tooltipHideTimeout = 300;
+        this.tooltipShowTimeout = 100;
+        this.tooltipShowEvent = ShowTypes.all;
+        this.tooltipImmediateExit = false;
+        this.show = new EventEmitter();
+        this.hide = new EventEmitter();
+    }
+    get listensForFocus() {
+        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;
+    }
+    get listensForHover() {
+        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;
+    }
+    ngOnDestroy() {
+        this.hideTooltip(true);
+    }
+    onFocus() {
+        if (this.listensForFocus) {
+            this.showTooltip();
+        }
+    }
+    onBlur() {
+        if (this.listensForFocus) {
+            this.hideTooltip(true);
+        }
+    }
+    onMouseEnter() {
+        if (this.listensForHover) {
+            this.showTooltip();
+        }
+    }
+    onMouseLeave(target) {
+        if (this.listensForHover && this.tooltipCloseOnMouseLeave) {
+            clearTimeout(this.timeout);
+            if (this.component) {
+                const contentDom = this.component.instance.element.nativeElement;
+                const contains = contentDom.contains(target);
+                if (contains)
+                    return;
+            }
+            this.hideTooltip(this.tooltipImmediateExit);
+        }
+    }
+    onMouseClick() {
+        if (this.listensForHover) {
+            this.hideTooltip(true);
+        }
+    }
+    showTooltip(immediate) {
+        if (this.component || this.tooltipDisabled)
+            return;
+        const time = immediate
+            ? 0
+            : this.tooltipShowTimeout + (navigator.userAgent.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);
+        clearTimeout(this.timeout);
+        this.timeout = setTimeout(() => {
+            this.tooltipService.destroyAll();
+            const options = this.createBoundOptions();
+            this.component = this.tooltipService.create(options);
+            // add a tiny timeout to avoid event re-triggers
+            setTimeout(() => {
+                if (this.component) {
+                    this.addHideListeners(this.component.instance.element.nativeElement);
+                }
+            }, 10);
+            this.show.emit(true);
+        }, time);
+    }
+    addHideListeners(tooltip) {
+        // on mouse enter, cancel the hide triggered by the leave
+        this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {
+            clearTimeout(this.timeout);
+        });
+        // content mouse leave listener
+        if (this.tooltipCloseOnMouseLeave) {
+            this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {
+                this.hideTooltip(this.tooltipImmediateExit);
+            });
+        }
+        // content close on click outside
+        if (this.tooltipCloseOnClickOutside) {
+            this.documentClickEvent = this.renderer.listen('window', 'click', event => {
+                const contains = tooltip.contains(event.target);
+                if (!contains)
+                    this.hideTooltip();
+            });
+        }
+    }
+    hideTooltip(immediate = false) {
+        if (!this.component)
+            return;
+        const destroyFn = () => {
+            // remove events
+            if (this.mouseLeaveContentEvent)
+                this.mouseLeaveContentEvent();
+            if (this.mouseEnterContentEvent)
+                this.mouseEnterContentEvent();
+            if (this.documentClickEvent)
+                this.documentClickEvent();
+            // emit events
+            this.hide.emit(true);
+            // destroy component
+            this.tooltipService.destroy(this.component);
+            this.component = undefined;
+        };
+        clearTimeout(this.timeout);
+        if (!immediate) {
+            this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);
+        }
+        else {
+            destroyFn();
+        }
+    }
+    createBoundOptions() {
+        return {
+            title: this.tooltipTitle,
+            template: this.tooltipTemplate,
+            host: this.viewContainerRef.element,
+            placement: this.tooltipPlacement,
+            alignment: this.tooltipAlignment,
+            type: this.tooltipType,
+            showCaret: this.tooltipShowCaret,
+            cssClass: this.tooltipCssClass,
+            spacing: this.tooltipSpacing,
+            context: this.tooltipContext
+        };
+    }
+}
+TooltipDirective.ɵfac = function TooltipDirective_Factory(t) { return new (t || TooltipDirective)(ɵngcc0.ɵɵdirectiveInject(TooltipService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
+TooltipDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TooltipDirective, selectors: [["", "ngx-tooltip", ""]], hostBindings: function TooltipDirective_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("focusin", function TooltipDirective_focusin_HostBindingHandler() { return ctx.onFocus(); })("blur", function TooltipDirective_blur_HostBindingHandler() { return ctx.onBlur(); })("mouseenter", function TooltipDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function TooltipDirective_mouseleave_HostBindingHandler($event) { return ctx.onMouseLeave($event.target); })("click", function TooltipDirective_click_HostBindingHandler() { return ctx.onMouseClick(); });
+    } }, inputs: { tooltipCssClass: "tooltipCssClass", tooltipAppendToBody: "tooltipAppendToBody", tooltipSpacing: "tooltipSpacing", tooltipDisabled: "tooltipDisabled", tooltipShowCaret: "tooltipShowCaret", tooltipPlacement: "tooltipPlacement", tooltipAlignment: "tooltipAlignment", tooltipType: "tooltipType", tooltipCloseOnClickOutside: "tooltipCloseOnClickOutside", tooltipCloseOnMouseLeave: "tooltipCloseOnMouseLeave", tooltipHideTimeout: "tooltipHideTimeout", tooltipShowTimeout: "tooltipShowTimeout", tooltipShowEvent: "tooltipShowEvent", tooltipImmediateExit: "tooltipImmediateExit", tooltipTitle: "tooltipTitle", tooltipTemplate: "tooltipTemplate", tooltipContext: "tooltipContext" }, outputs: { show: "show", hide: "hide" } });
+TooltipDirective.ctorParameters = () => [
+    { type: TooltipService },
+    { type: ViewContainerRef },
+    { type: Renderer2 }
+];
+TooltipDirective.propDecorators = {
+    tooltipCssClass: [{ type: Input }],
+    tooltipTitle: [{ type: Input }],
+    tooltipAppendToBody: [{ type: Input }],
+    tooltipSpacing: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipShowCaret: [{ type: Input }],
+    tooltipPlacement: [{ type: Input }],
+    tooltipAlignment: [{ type: Input }],
+    tooltipType: [{ type: Input }],
+    tooltipCloseOnClickOutside: [{ type: Input }],
+    tooltipCloseOnMouseLeave: [{ type: Input }],
+    tooltipHideTimeout: [{ type: Input }],
+    tooltipShowTimeout: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    tooltipShowEvent: [{ type: Input }],
+    tooltipContext: [{ type: Input }],
+    tooltipImmediateExit: [{ type: Input }],
+    show: [{ type: Output }],
+    hide: [{ type: Output }],
+    onFocus: [{ type: HostListener, args: ['focusin',] }],
+    onBlur: [{ type: HostListener, args: ['blur',] }],
+    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
+    onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event.target'],] }],
+    onMouseClick: [{ type: HostListener, args: ['click',] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipDirective, [{
+        type: Directive,
+        args: [{ selector: '[ngx-tooltip]' }]
+    }], function () { return [{ type: TooltipService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Renderer2 }]; }, { tooltipCssClass: [{
+            type: Input
+        }], tooltipAppendToBody: [{
+            type: Input
+        }], tooltipSpacing: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], tooltipShowCaret: [{
+            type: Input
+        }], tooltipPlacement: [{
+            type: Input
+        }], tooltipAlignment: [{
+            type: Input
+        }], tooltipType: [{
+            type: Input
+        }], tooltipCloseOnClickOutside: [{
+            type: Input
+        }], tooltipCloseOnMouseLeave: [{
+            type: Input
+        }], tooltipHideTimeout: [{
+            type: Input
+        }], tooltipShowTimeout: [{
+            type: Input
+        }], tooltipShowEvent: [{
+            type: Input
+        }], tooltipImmediateExit: [{
+            type: Input
+        }], show: [{
+            type: Output
+        }], hide: [{
+            type: Output
+        }], onFocus: [{
+            type: HostListener,
+            args: ['focusin']
+        }], onBlur: [{
+            type: HostListener,
+            args: ['blur']
+        }], onMouseEnter: [{
+            type: HostListener,
+            args: ['mouseenter']
+        }], onMouseLeave: [{
+            type: HostListener,
+            args: ['mouseleave', ['$event.target']]
+        }], onMouseClick: [{
+            type: HostListener,
+            args: ['click']
+        }], tooltipTitle: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }], tooltipContext: [{
+            type: Input
+        }] }); })();
+
+class TooltipModule {
+}
+TooltipModule.ɵfac = function TooltipModule_Factory(t) { return new (t || TooltipModule)(); };
+TooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TooltipModule });
+TooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [InjectionService, TooltipService], imports: [[CommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TooltipModule, { declarations: function () { return [TooltipContentComponent, TooltipDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [TooltipContentComponent, TooltipDirective]; } }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipModule, [{
+        type: NgModule,
+        args: [{
+                declarations: [TooltipContentComponent, TooltipDirective],
+                providers: [InjectionService, TooltipService],
+                exports: [TooltipContentComponent, TooltipDirective],
+                imports: [CommonModule],
+                entryComponents: [TooltipContentComponent]
+            }]
+    }], null, null); })();
+
+/**
+ * Formats a label given a date, number or string.
+ *
+ * @export
+ */
+function formatLabel(label) {
+    if (label instanceof Date) {
+        label = label.toLocaleDateString();
+    }
+    else {
+        label = label.toLocaleString();
+    }
+    return label;
+}
+/**
+ * Escapes a label.
+ *
+ * @export
+ */
+function escapeLabel(label) {
+    return label.toLocaleString().replace(/[&'`"<>]/g, match => {
+        return {
+            '&': '&amp;',
+            // tslint:disable-next-line: quotemark
+            "'": '&#x27;',
+            '`': '&#x60;',
+            '"': '&quot;',
+            '<': '&lt;',
+            '>': '&gt;'
+        }[match];
+    });
+}
+
+const cache = {};
+/**
+ * Generates a short id.
+ *
+ * Description:
+ *   A 4-character alphanumeric sequence (364 = 1.6 million)
+ *   This should only be used for JavaScript specific models.
+ *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js
+ *
+ *   Example: `ebgf`
+ */
+function id() {
+    let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);
+    // append a 'a' because neo gets mad
+    newId = `a${newId}`;
+    // ensure not already used
+    if (!cache[newId]) {
+        cache[newId] = true;
+        return newId;
+    }
+    return id();
+}
+
+var BarOrientation;
+(function (BarOrientation) {
+    BarOrientation["Vertical"] = "vertical";
+    BarOrientation["Horizontal"] = "horizontal";
+})(BarOrientation || (BarOrientation = {}));
+
+var SeriesType;
+(function (SeriesType) {
+    SeriesType["Standard"] = "standard";
+    SeriesType["Stacked"] = "stacked";
+})(SeriesType || (SeriesType = {}));
+class CircleSeriesComponent {
+    constructor() {
+        this.type = SeriesType.Standard;
+        this.tooltipDisabled = false;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.barVisible = false;
+        this.barOrientation = BarOrientation;
+        this.placementTypes = PlacementTypes;
+        this.styleTypes = StyleTypes;
+    }
+    ngOnInit() {
+        this.gradientId = 'grad' + id().toString();
+        this.gradientFill = `url(#${this.gradientId})`;
+    }
+    ngOnChanges() {
+        this.update();
+    }
+    update() {
+        this.circle = this.getActiveCircle();
+    }
+    getActiveCircle() {
+        const indexActiveDataPoint = this.data.series.findIndex(d => {
+            const label = d.name;
+            return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;
+        });
+        if (indexActiveDataPoint === -1) {
+            // No valid point is 'active/hovered over' at this moment.
+            return undefined;
+        }
+        return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);
+    }
+    mapDataPointToCircle(d, i) {
+        const seriesName = this.data.name;
+        const value = d.value;
+        const label = d.name;
+        const tooltipLabel = formatLabel(label);
+        let cx;
+        if (this.scaleType === ScaleType.Time) {
+            cx = this.xScale(label);
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            cx = this.xScale(Number(label));
+        }
+        else {
+            cx = this.xScale(label);
+        }
+        const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);
+        const radius = 5;
+        const height = this.yScale.range()[0] - cy;
+        const opacity = 1;
+        let color;
+        if (this.colors.scaleType === ScaleType.Linear) {
+            if (this.type === SeriesType.Standard) {
+                color = this.colors.getColor(value);
+            }
+            else {
+                color = this.colors.getColor(d.d1);
+            }
+        }
+        else {
+            color = this.colors.getColor(seriesName);
+        }
+        const data = Object.assign({}, d, {
+            series: seriesName,
+            value,
+            name: label
+        });
+        return {
+            classNames: [`circle-data-${i}`],
+            value,
+            label,
+            data,
+            cx,
+            cy,
+            radius,
+            height,
+            tooltipLabel,
+            color,
+            opacity,
+            seriesName,
+            gradientStops: this.getGradientStops(color),
+            min: d.min,
+            max: d.max
+        };
+    }
+    getTooltipText({ tooltipLabel, value, seriesName, min, max }) {
+        return `
+      <span class="tooltip-label">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>
+      <span class="tooltip-val">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>
+    `;
+    }
+    getTooltipMinMaxText(min, max) {
+        if (min !== undefined || max !== undefined) {
+            let result = ' (';
+            if (min !== undefined) {
+                if (max === undefined) {
+                    result += '≥';
+                }
+                result += min.toLocaleString();
+                if (max !== undefined) {
+                    result += ' - ';
+                }
+            }
+            else if (max !== undefined) {
+                result += '≤';
+            }
+            if (max !== undefined) {
+                result += max.toLocaleString();
+            }
+            result += ')';
+            return result;
+        }
+        else {
+            return '';
+        }
+    }
+    getGradientStops(color) {
+        return [
+            {
+                offset: 0,
+                color,
+                opacity: 0.2
+            },
+            {
+                offset: 100,
+                color,
+                opacity: 1
+            }
+        ];
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    isActive(entry) {
+        if (!this.activeEntries)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.name === d.name;
+        });
+        return item !== undefined;
+    }
+    activateCircle() {
+        this.barVisible = true;
+        this.activate.emit({ name: this.data.name });
+    }
+    deactivateCircle() {
+        this.barVisible = false;
+        this.circle.opacity = 0;
+        this.deactivate.emit({ name: this.data.name });
+    }
+}
+CircleSeriesComponent.ɵfac = function CircleSeriesComponent_Factory(t) { return new (t || CircleSeriesComponent)(); };
+CircleSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CircleSeriesComponent, selectors: [["g", "ngx-charts-circle-series", ""]], inputs: { type: "type", tooltipDisabled: "tooltipDisabled", data: "data", xScale: "xScale", yScale: "yScale", colors: "colors", scaleType: "scaleType", visibleValue: "visibleValue", activeEntries: "activeEntries", tooltipTemplate: "tooltipTemplate" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c9, decls: 1, vars: 1, consts: [[4, "ngIf"], ["ngx-charts-svg-linear-gradient", "", 3, "orientation", "name", "stops"], ["class", "tooltip-bar", 4, "ngIf"], ["ngx-charts-circle", "", "ngx-tooltip", "", 1, "circle", 3, "cx", "cy", "r", "fill", "pointerEvents", "data", "classNames", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate"], [1, "tooltip-bar"]], template: function CircleSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, CircleSeriesComponent__svg_g_0_Template, 5, 21, "g", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngIf", ctx.circle);
+    } }, directives: function () { return [ɵngcc1.NgIf, SvgLinearGradientComponent, CircleComponent, TooltipDirective]; }, encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':enter', [
+                    style({
+                        opacity: 0
+                    }),
+                    animate(250, style({ opacity: 1 }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+CircleSeriesComponent.propDecorators = {
+    data: [{ type: Input }],
+    type: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    colors: [{ type: Input }],
+    scaleType: [{ type: Input }],
+    visibleValue: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CircleSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-circle-series]',
+                template: `
+    <svg:g *ngIf="circle">
+      <defs>
+        <svg:g
+          ngx-charts-svg-linear-gradient
+          [orientation]="barOrientation.Vertical"
+          [name]="gradientId"
+          [stops]="circle.gradientStops"
+        />
+      </defs>
+      <svg:rect
+        *ngIf="barVisible && type === 'standard'"
+        [@animationState]="'active'"
+        [attr.x]="circle.cx - circle.radius"
+        [attr.y]="circle.cy"
+        [attr.width]="circle.radius * 2"
+        [attr.height]="circle.height"
+        [attr.fill]="gradientFill"
+        class="tooltip-bar"
+      />
+      <svg:g
+        ngx-charts-circle
+        class="circle"
+        [cx]="circle.cx"
+        [cy]="circle.cy"
+        [r]="circle.radius"
+        [fill]="circle.color"
+        [class.active]="isActive({ name: circle.seriesName })"
+        [pointerEvents]="circle.value === 0 ? 'none' : 'all'"
+        [data]="circle.value"
+        [classNames]="circle.classNames"
+        (select)="onClick(circle.data)"
+        (activate)="activateCircle()"
+        (deactivate)="deactivateCircle()"
+        ngx-tooltip
+        [tooltipDisabled]="tooltipDisabled"
+        [tooltipPlacement]="placementTypes.Top"
+        [tooltipType]="styleTypes.tooltip"
+        [tooltipTitle]="tooltipTemplate ? undefined : getTooltipText(circle)"
+        [tooltipTemplate]="tooltipTemplate"
+        [tooltipContext]="circle.data"
+      />
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':enter', [
+                            style({
+                                opacity: 0
+                            }),
+                            animate(250, style({ opacity: 1 }))
+                        ])
+                    ])
+                ]
+            }]
+    }], function () { return []; }, { type: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], data: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], scaleType: [{
+            type: Input
+        }], visibleValue: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }] }); })();
+
+class CircleComponent {
+    constructor() {
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+    }
+    onClick() {
+        this.select.emit(this.data);
+    }
+    onMouseEnter() {
+        this.activate.emit(this.data);
+    }
+    onMouseLeave() {
+        this.deactivate.emit(this.data);
+    }
+    ngOnChanges(changes) {
+        this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';
+        this.classNames += 'circle';
+    }
+}
+CircleComponent.ɵfac = function CircleComponent_Factory(t) { return new (t || CircleComponent)(); };
+CircleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CircleComponent, selectors: [["g", "ngx-charts-circle", ""]], hostBindings: function CircleComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("click", function CircleComponent_click_HostBindingHandler() { return ctx.onClick(); })("mouseenter", function CircleComponent_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function CircleComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
+    } }, inputs: { classNames: "classNames", cx: "cx", cy: "cy", r: "r", fill: "fill", stroke: "stroke", data: "data", circleOpacity: "circleOpacity", pointerEvents: "pointerEvents" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c11, decls: 1, vars: 8, template: function CircleComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelement(0, "circle");
+    } if (rf & 2) {
+        ɵngcc0.ɵɵattribute("cx", ctx.cx)("cy", ctx.cy)("r", ctx.r)("fill", ctx.fill)("stroke", ctx.stroke)("opacity", ctx.circleOpacity)("class", ctx.classNames)("pointer-events", ctx.pointerEvents);
+    } }, encapsulation: 2, changeDetection: 0 });
+CircleComponent.propDecorators = {
+    cx: [{ type: Input }],
+    cy: [{ type: Input }],
+    r: [{ type: Input }],
+    fill: [{ type: Input }],
+    stroke: [{ type: Input }],
+    data: [{ type: Input }],
+    classNames: [{ type: Input }],
+    circleOpacity: [{ type: Input }],
+    pointerEvents: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    onClick: [{ type: HostListener, args: ['click',] }],
+    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
+    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CircleComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-circle]',
+                template: `
+    <svg:circle
+      [attr.cx]="cx"
+      [attr.cy]="cy"
+      [attr.r]="r"
+      [attr.fill]="fill"
+      [attr.stroke]="stroke"
+      [attr.opacity]="circleOpacity"
+      [attr.class]="classNames"
+      [attr.pointer-events]="pointerEvents"
+    />
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], onClick: [{
+            type: HostListener,
+            args: ['click']
+        }], onMouseEnter: [{
+            type: HostListener,
+            args: ['mouseenter']
+        }], onMouseLeave: [{
+            type: HostListener,
+            args: ['mouseleave']
+        }], classNames: [{
+            type: Input
+        }], cx: [{
+            type: Input
+        }], cy: [{
+            type: Input
+        }], r: [{
+            type: Input
+        }], fill: [{
+            type: Input
+        }], stroke: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }], circleOpacity: [{
+            type: Input
+        }], pointerEvents: [{
+            type: Input
+        }] }); })();
+
+class GridPanelComponent {
+}
+GridPanelComponent.ɵfac = function GridPanelComponent_Factory(t) { return new (t || GridPanelComponent)(); };
+GridPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GridPanelComponent, selectors: [["g", "ngx-charts-grid-panel", ""]], inputs: { width: "width", height: "height", x: "x", y: "y" }, attrs: _c12, decls: 1, vars: 4, consts: [["stroke", "none", 1, "gridpanel"]], template: function GridPanelComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelement(0, "rect", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵattribute("height", ctx.height)("width", ctx.width)("x", ctx.x)("y", ctx.y);
+    } }, encapsulation: 2, changeDetection: 0 });
+GridPanelComponent.propDecorators = {
+    width: [{ type: Input }],
+    height: [{ type: Input }],
+    x: [{ type: Input }],
+    y: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridPanelComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-grid-panel]',
+                template: `
+    <svg:rect [attr.height]="height" [attr.width]="width" [attr.x]="x" [attr.y]="y" stroke="none" class="gridpanel" />
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], null, { width: [{
+            type: Input
+        }], height: [{
+            type: Input
+        }], x: [{
+            type: Input
+        }], y: [{
+            type: Input
+        }] }); })();
+
+var ClassEnum;
+(function (ClassEnum) {
+    ClassEnum["Odd"] = "odd";
+    ClassEnum["Even"] = "even";
+})(ClassEnum || (ClassEnum = {}));
+class GridPanelSeriesComponent {
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.gridPanels = this.getGridPanels();
+    }
+    getGridPanels() {
+        return this.data.map(d => {
+            let offset;
+            let width;
+            let height;
+            let x;
+            let y;
+            let className = ClassEnum.Odd;
+            if (this.orient === BarOrientation.Vertical) {
+                const position = this.xScale(d.name);
+                const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);
+                if (positionIndex % 2 === 1) {
+                    className = ClassEnum.Even;
+                }
+                offset = this.xScale.bandwidth() * this.xScale.paddingInner();
+                width = this.xScale.bandwidth() + offset;
+                height = this.dims.height;
+                x = this.xScale(d.name) - offset / 2;
+                y = 0;
+            }
+            else if (this.orient === BarOrientation.Horizontal) {
+                const position = this.yScale(d.name);
+                const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);
+                if (positionIndex % 2 === 1) {
+                    className = ClassEnum.Even;
+                }
+                offset = this.yScale.bandwidth() * this.yScale.paddingInner();
+                width = this.dims.width;
+                height = this.yScale.bandwidth() + offset;
+                x = 0;
+                y = this.yScale(d.name) - offset / 2;
+            }
+            return {
+                name: d.name,
+                class: className,
+                height,
+                width,
+                x,
+                y
+            };
+        });
+    }
+}
+GridPanelSeriesComponent.ɵfac = function GridPanelSeriesComponent_Factory(t) { return new (t || GridPanelSeriesComponent)(); };
+GridPanelSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GridPanelSeriesComponent, selectors: [["g", "ngx-charts-grid-panel-series", ""]], inputs: { data: "data", dims: "dims", xScale: "xScale", yScale: "yScale", orient: "orient" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c13, decls: 1, vars: 1, consts: [["ngx-charts-grid-panel", "", 3, "height", "width", "x", "y", "grid-panel", "odd", "even", 4, "ngFor", "ngForOf"], ["ngx-charts-grid-panel", "", 3, "height", "width", "x", "y"]], template: function GridPanelSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, GridPanelSeriesComponent__svg_g_0_Template, 1, 10, "g", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.gridPanels);
+    } }, directives: [ɵngcc1.NgForOf, GridPanelComponent], encapsulation: 2, changeDetection: 0 });
+GridPanelSeriesComponent.propDecorators = {
+    data: [{ type: Input }],
+    dims: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    orient: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridPanelSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-grid-panel-series]',
+                template: `
+    <svg:g
+      ngx-charts-grid-panel
+      *ngFor="let gridPanel of gridPanels"
+      [height]="gridPanel.height"
+      [width]="gridPanel.width"
+      [x]="gridPanel.x"
+      [y]="gridPanel.y"
+      [class.grid-panel]="true"
+      [class.odd]="gridPanel.class === 'odd'"
+      [class.even]="gridPanel.class === 'even'"
+    ></svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], null, { data: [{
+            type: Input
+        }], dims: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], orient: [{
+            type: Input
+        }] }); })();
+
+class SvgLinearGradientComponent {
+    constructor() {
+        this.orientation = BarOrientation.Vertical;
+    }
+    ngOnChanges(changes) {
+        this.x1 = '0%';
+        this.x2 = '0%';
+        this.y1 = '0%';
+        this.y2 = '0%';
+        if (this.orientation === BarOrientation.Horizontal) {
+            this.x2 = '100%';
+        }
+        else if (this.orientation === BarOrientation.Vertical) {
+            this.y1 = '100%';
+        }
+    }
+}
+SvgLinearGradientComponent.ɵfac = function SvgLinearGradientComponent_Factory(t) { return new (t || SvgLinearGradientComponent)(); };
+SvgLinearGradientComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SvgLinearGradientComponent, selectors: [["g", "ngx-charts-svg-linear-gradient", ""]], inputs: { orientation: "orientation", name: "name", stops: "stops" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c14, decls: 2, vars: 6, consts: [[3, "id"], [3, "stop-color", "stop-opacity", 4, "ngFor", "ngForOf"]], template: function SvgLinearGradientComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "linearGradient", 0);
+        ɵngcc0.ɵɵtemplate(1, SvgLinearGradientComponent__svg_stop_1_Template, 1, 5, "stop", 1);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("id", ctx.name);
+        ɵngcc0.ɵɵattribute("x1", ctx.x1)("y1", ctx.y1)("x2", ctx.x2)("y2", ctx.y2);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.stops);
+    } }, directives: [ɵngcc1.NgForOf], encapsulation: 2, changeDetection: 0 });
+SvgLinearGradientComponent.propDecorators = {
+    orientation: [{ type: Input }],
+    name: [{ type: Input }],
+    stops: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SvgLinearGradientComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-svg-linear-gradient]',
+                template: `
+    <svg:linearGradient [id]="name" [attr.x1]="x1" [attr.y1]="y1" [attr.x2]="x2" [attr.y2]="y2">
+      <svg:stop
+        *ngFor="let stop of stops"
+        [attr.offset]="stop.offset + '%'"
+        [style.stop-color]="stop.color"
+        [style.stop-opacity]="stop.opacity"
+      />
+    </svg:linearGradient>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { orientation: [{
+            type: Input
+        }], name: [{
+            type: Input
+        }], stops: [{
+            type: Input
+        }] }); })();
+
+class SvgRadialGradientComponent {
+    constructor() {
+        this.endOpacity = 1;
+        this.cx = 0;
+        this.cy = 0;
+    }
+    get stops() {
+        return this.stopsInput || this.stopsDefault;
+    }
+    set stops(value) {
+        this.stopsInput = value;
+    }
+    ngOnChanges(changes) {
+        this.r = '30%';
+        if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {
+            this.stopsDefault = [
+                {
+                    offset: 0,
+                    color: this.color,
+                    opacity: this.startOpacity
+                },
+                {
+                    offset: 100,
+                    color: this.color,
+                    opacity: this.endOpacity
+                }
+            ];
+        }
+    }
+}
+SvgRadialGradientComponent.ɵfac = function SvgRadialGradientComponent_Factory(t) { return new (t || SvgRadialGradientComponent)(); };
+SvgRadialGradientComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SvgRadialGradientComponent, selectors: [["g", "ngx-charts-svg-radial-gradient", ""]], inputs: { endOpacity: "endOpacity", cx: "cx", cy: "cy", stops: "stops", color: "color", name: "name", startOpacity: "startOpacity" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c15, decls: 2, vars: 5, consts: [["gradientUnits", "userSpaceOnUse", 3, "id"], [3, "stop-color", "stop-opacity", 4, "ngFor", "ngForOf"]], template: function SvgRadialGradientComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "radialGradient", 0);
+        ɵngcc0.ɵɵtemplate(1, SvgRadialGradientComponent__svg_stop_1_Template, 1, 5, "stop", 1);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("id", ctx.name);
+        ɵngcc0.ɵɵattribute("cx", ctx.cx)("cy", ctx.cy)("r", ctx.r);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.stops);
+    } }, directives: [ɵngcc1.NgForOf], encapsulation: 2, changeDetection: 0 });
+SvgRadialGradientComponent.propDecorators = {
+    color: [{ type: Input }],
+    name: [{ type: Input }],
+    startOpacity: [{ type: Input }],
+    endOpacity: [{ type: Input }],
+    cx: [{ type: Input }],
+    cy: [{ type: Input }],
+    stops: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SvgRadialGradientComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-svg-radial-gradient]',
+                template: `
+    <svg:radialGradient [id]="name" [attr.cx]="cx" [attr.cy]="cy" [attr.r]="r" gradientUnits="userSpaceOnUse">
+      <svg:stop
+        *ngFor="let stop of stops"
+        [attr.offset]="stop.offset + '%'"
+        [style.stop-color]="stop.color"
+        [style.stop-opacity]="stop.opacity"
+      />
+    </svg:radialGradient>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { endOpacity: [{
+            type: Input
+        }], cx: [{
+            type: Input
+        }], cy: [{
+            type: Input
+        }], stops: [{
+            type: Input
+        }], color: [{
+            type: Input
+        }], name: [{
+            type: Input
+        }], startOpacity: [{
+            type: Input
+        }] }); })();
+
+class AreaComponent {
+    constructor(element) {
+        this.opacity = 1;
+        this.startOpacity = 0.5;
+        this.endOpacity = 1;
+        this.gradient = false;
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.animationsLoaded = false;
+        this.hasGradient = false;
+        this.barOrientation = BarOrientation;
+        this.element = element.nativeElement;
+    }
+    ngOnChanges() {
+        this.update();
+        if (!this.animationsLoaded) {
+            this.loadAnimation();
+            this.animationsLoaded = true;
+        }
+    }
+    update() {
+        this.gradientId = 'grad' + id().toString();
+        this.gradientFill = `url(#${this.gradientId})`;
+        if (this.gradient || this.stops) {
+            this.gradientStops = this.getGradient();
+            this.hasGradient = true;
+        }
+        else {
+            this.hasGradient = false;
+        }
+        this.updatePathEl();
+    }
+    loadAnimation() {
+        this.areaPath = this.startingPath;
+        setTimeout(this.updatePathEl.bind(this), 100);
+    }
+    updatePathEl() {
+        const node = select(this.element).select('.area');
+        if (this.animations) {
+            node.transition().duration(750).attr('d', this.path);
+        }
+        else {
+            node.attr('d', this.path);
+        }
+    }
+    getGradient() {
+        if (this.stops) {
+            return this.stops;
+        }
+        return [
+            {
+                offset: 0,
+                color: this.fill,
+                opacity: this.startOpacity
+            },
+            {
+                offset: 100,
+                color: this.fill,
+                opacity: this.endOpacity
+            }
+        ];
+    }
+}
+AreaComponent.ɵfac = function AreaComponent_Factory(t) { return new (t || AreaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
+AreaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AreaComponent, selectors: [["g", "ngx-charts-area", ""]], inputs: { opacity: "opacity", startOpacity: "startOpacity", endOpacity: "endOpacity", gradient: "gradient", animations: "animations", data: "data", path: "path", startingPath: "startingPath", fill: "fill", stops: "stops" }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c16, decls: 2, vars: 5, consts: [[4, "ngIf"], [1, "area"], ["ngx-charts-svg-linear-gradient", "", 3, "orientation", "name", "stops"]], template: function AreaComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, AreaComponent__svg_defs_0_Template, 2, 3, "defs", 0);
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelement(1, "path", 1);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngIf", ctx.gradient);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("opacity", ctx.opacity);
+        ɵngcc0.ɵɵattribute("d", ctx.areaPath)("fill", ctx.gradient ? ctx.gradientFill : ctx.fill);
+    } }, directives: [ɵngcc1.NgIf, SvgLinearGradientComponent], encapsulation: 2, changeDetection: 0 });
+AreaComponent.ctorParameters = () => [
+    { type: ElementRef }
+];
+AreaComponent.propDecorators = {
+    data: [{ type: Input }],
+    path: [{ type: Input }],
+    startingPath: [{ type: Input }],
+    fill: [{ type: Input }],
+    opacity: [{ type: Input }],
+    startOpacity: [{ type: Input }],
+    endOpacity: [{ type: Input }],
+    gradient: [{ type: Input }],
+    stops: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AreaComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-area]',
+                template: `
+    <svg:defs *ngIf="gradient">
+      <svg:g
+        ngx-charts-svg-linear-gradient
+        [orientation]="barOrientation.Vertical"
+        [name]="gradientId"
+        [stops]="gradientStops"
+      />
+    </svg:defs>
+    <svg:path class="area" [attr.d]="areaPath" [attr.fill]="gradient ? gradientFill : fill" [style.opacity]="opacity" />
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { opacity: [{
+            type: Input
+        }], startOpacity: [{
+            type: Input
+        }], endOpacity: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], data: [{
+            type: Input
+        }], path: [{
+            type: Input
+        }], startingPath: [{
+            type: Input
+        }], fill: [{
+            type: Input
+        }], stops: [{
+            type: Input
+        }] }); })();
+
+// Robert Penner's easeOutExpo
+function easeOutExpo(t, b, c, d) {
+    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;
+}
+/**
+ * Counts from a number to the end incrementally.
+ */
+function count(countFrom, countTo, countDecimals, countDuration, callback) {
+    const startVal = Number(countFrom);
+    const endVal = Number(countTo);
+    const countDown = startVal > endVal;
+    const decimals = Math.max(0, countDecimals);
+    const dec = Math.pow(10, decimals);
+    const duration = Number(countDuration) * 1000;
+    let startTime;
+    function runCount(timestamp) {
+        let frameVal;
+        const progress = timestamp - startTime;
+        if (countDown) {
+            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);
+        }
+        else {
+            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);
+        }
+        if (countDown) {
+            frameVal = frameVal < endVal ? endVal : frameVal;
+        }
+        else {
+            frameVal = frameVal > endVal ? endVal : frameVal;
+        }
+        frameVal = Math.round(frameVal * dec) / dec;
+        const tick = progress < duration;
+        callback({
+            value: frameVal,
+            progress,
+            timestamp,
+            finished: !tick
+        });
+        if (tick) {
+            return requestAnimationFrame(val => runCount(val));
+        }
+    }
+    return requestAnimationFrame(timestamp => {
+        startTime = timestamp;
+        return runCount(timestamp);
+    });
+}
+/**
+ * Determine decimals places
+ *
+ * @export
+ */
+function decimalChecker(countTo) {
+    const endVal = Number(countTo);
+    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {
+        return 2;
+    }
+    return 0;
+}
+
+/**
+ * Count up component
+ *
+ * Loosely inspired by:
+ *  - https://github.com/izupet/angular2-counto
+ *  - https://inorganik.github.io/countUp.js/
+ *
+ * @export
+ */
+class CountUpDirective {
+    constructor(cd, element) {
+        this.cd = cd;
+        this.countDuration = 1;
+        this.countPrefix = '';
+        this.countSuffix = '';
+        this.countChange = new EventEmitter();
+        this.countFinish = new EventEmitter();
+        this.value = '';
+        this._countDecimals = 0;
+        this._countTo = 0;
+        this._countFrom = 0;
+        this.nativeElement = element.nativeElement;
+    }
+    set countDecimals(val) {
+        this._countDecimals = val;
+    }
+    get countDecimals() {
+        if (this._countDecimals)
+            return this._countDecimals;
+        return decimalChecker(this.countTo);
+    }
+    set countTo(val) {
+        this._countTo = parseFloat(val);
+        this.start();
+    }
+    get countTo() {
+        return this._countTo;
+    }
+    set countFrom(val) {
+        this._countFrom = parseFloat(val);
+        this.start();
+    }
+    get countFrom() {
+        return this._countFrom;
+    }
+    ngOnDestroy() {
+        cancelAnimationFrame(this.animationReq);
+    }
+    start() {
+        cancelAnimationFrame(this.animationReq);
+        const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);
+        const callback = ({ value, progress, finished }) => {
+            this.value = valueFormatting(value);
+            this.cd.markForCheck();
+            if (!finished)
+                this.countChange.emit({ value: this.value, progress });
+            if (finished)
+                this.countFinish.emit({ value: this.value, progress });
+        };
+        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);
+    }
+}
+CountUpDirective.ɵfac = function CountUpDirective_Factory(t) { return new (t || CountUpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
+CountUpDirective.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CountUpDirective, selectors: [["", "ngx-charts-count-up", ""]], inputs: { countDuration: "countDuration", countPrefix: "countPrefix", countSuffix: "countSuffix", countDecimals: "countDecimals", countTo: "countTo", countFrom: "countFrom", valueFormatting: "valueFormatting" }, outputs: { countChange: "countChange", countFinish: "countFinish" }, attrs: _c17, decls: 1, vars: 1, template: function CountUpDirective_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtext(0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.value, " ");
+    } }, encapsulation: 2 });
+CountUpDirective.ctorParameters = () => [
+    { type: ChangeDetectorRef },
+    { type: ElementRef }
+];
+CountUpDirective.propDecorators = {
+    countDuration: [{ type: Input }],
+    countPrefix: [{ type: Input }],
+    countSuffix: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    countDecimals: [{ type: Input }],
+    countTo: [{ type: Input }],
+    countFrom: [{ type: Input }],
+    countChange: [{ type: Output }],
+    countFinish: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CountUpDirective, [{
+        type: Component,
+        args: [{
+                selector: '[ngx-charts-count-up]',
+                template: ` {{ value }} `
+            }]
+    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { countDuration: [{
+            type: Input
+        }], countPrefix: [{
+            type: Input
+        }], countSuffix: [{
+            type: Input
+        }], countChange: [{
+            type: Output
+        }], countFinish: [{
+            type: Output
+        }], countDecimals: [{
+            type: Input
+        }], countTo: [{
+            type: Input
+        }], countFrom: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }] }); })();
+
+// If we don't check whether 'window' and 'global' variables are defined,
+// code will fail in browser/node with 'variable is undefined' error.
+let root;
+if (typeof window !== 'undefined') {
+    root = window;
+}
+else if (typeof global !== 'undefined') {
+    root = global;
+}
+// tslint:disable-next-line:variable-name
+const MouseEvent = root.MouseEvent;
+function createMouseEvent(name, bubbles = false, cancelable = true) {
+    // Calling new of an event does not work correctly on IE. The following is a tested workaround
+    // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11
+    if (typeof MouseEvent === 'function') {
+        // Sane browsers
+        return new MouseEvent(name, { bubbles, cancelable });
+    }
+    else {
+        // IE
+        const event = document.createEvent('MouseEvent');
+        event.initEvent(name, bubbles, cancelable);
+        return event;
+    }
+}
+
+class TooltipArea {
+    constructor(platformId) {
+        this.platformId = platformId;
+        this.anchorOpacity = 0;
+        this.anchorPos = -1;
+        this.anchorValues = [];
+        this.placementTypes = PlacementTypes;
+        this.styleTypes = StyleTypes;
+        this.showPercentage = false;
+        this.tooltipDisabled = false;
+        this.hover = new EventEmitter();
+    }
+    getValues(xVal) {
+        const results = [];
+        for (const group of this.results) {
+            const item = group.series.find(d => d.name.toString() === xVal.toString());
+            let groupName = group.name;
+            if (groupName instanceof Date) {
+                groupName = groupName.toLocaleDateString();
+            }
+            if (item) {
+                const label = item.name;
+                let val = item.value;
+                if (this.showPercentage) {
+                    val = (item.d1 - item.d0).toFixed(2) + '%';
+                }
+                let color;
+                if (this.colors.scaleType === ScaleType.Linear) {
+                    let v = val;
+                    if (item.d1) {
+                        v = item.d1;
+                    }
+                    color = this.colors.getColor(v);
+                }
+                else {
+                    color = this.colors.getColor(group.name);
+                }
+                const data = Object.assign({}, item, {
+                    value: val,
+                    name: label,
+                    series: groupName,
+                    min: item.min,
+                    max: item.max,
+                    color
+                });
+                results.push(data);
+            }
+        }
+        return results;
+    }
+    mouseMove(event) {
+        if (!isPlatformBrowser(this.platformId)) {
+            return;
+        }
+        const xPos = event.pageX - event.target.getBoundingClientRect().left;
+        const closestIndex = this.findClosestPointIndex(xPos);
+        const closestPoint = this.xSet[closestIndex];
+        this.anchorPos = this.xScale(closestPoint);
+        this.anchorPos = Math.max(0, this.anchorPos);
+        this.anchorPos = Math.min(this.dims.width, this.anchorPos);
+        this.anchorValues = this.getValues(closestPoint);
+        if (this.anchorPos !== this.lastAnchorPos) {
+            const ev = createMouseEvent('mouseleave');
+            this.tooltipAnchor.nativeElement.dispatchEvent(ev);
+            this.anchorOpacity = 0.7;
+            this.hover.emit({
+                value: closestPoint
+            });
+            this.showTooltip();
+            this.lastAnchorPos = this.anchorPos;
+        }
+    }
+    findClosestPointIndex(xPos) {
+        let minIndex = 0;
+        let maxIndex = this.xSet.length - 1;
+        let minDiff = Number.MAX_VALUE;
+        let closestIndex = 0;
+        while (minIndex <= maxIndex) {
+            const currentIndex = ((minIndex + maxIndex) / 2) | 0;
+            const currentElement = this.xScale(this.xSet[currentIndex]);
+            const curDiff = Math.abs(currentElement - xPos);
+            if (curDiff < minDiff) {
+                minDiff = curDiff;
+                closestIndex = currentIndex;
+            }
+            if (currentElement < xPos) {
+                minIndex = currentIndex + 1;
+            }
+            else if (currentElement > xPos) {
+                maxIndex = currentIndex - 1;
+            }
+            else {
+                minDiff = 0;
+                closestIndex = currentIndex;
+                break;
+            }
+        }
+        return closestIndex;
+    }
+    showTooltip() {
+        const event = createMouseEvent('mouseenter');
+        this.tooltipAnchor.nativeElement.dispatchEvent(event);
+    }
+    hideTooltip() {
+        const event = createMouseEvent('mouseleave');
+        this.tooltipAnchor.nativeElement.dispatchEvent(event);
+        this.anchorOpacity = 0;
+        this.lastAnchorPos = -1;
+    }
+    getToolTipText(tooltipItem) {
+        let result = '';
+        if (tooltipItem.series !== undefined) {
+            result += tooltipItem.series;
+        }
+        else {
+            result += '???';
+        }
+        result += ': ';
+        if (tooltipItem.value !== undefined) {
+            result += tooltipItem.value.toLocaleString();
+        }
+        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {
+            result += ' (';
+            if (tooltipItem.min !== undefined) {
+                if (tooltipItem.max === undefined) {
+                    result += '≥';
+                }
+                result += tooltipItem.min.toLocaleString();
+                if (tooltipItem.max !== undefined) {
+                    result += ' - ';
+                }
+            }
+            else if (tooltipItem.max !== undefined) {
+                result += '≤';
+            }
+            if (tooltipItem.max !== undefined) {
+                result += tooltipItem.max.toLocaleString();
+            }
+            result += ')';
+        }
+        return result;
+    }
+}
+TooltipArea.ɵfac = function TooltipArea_Factory(t) { return new (t || TooltipArea)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
+TooltipArea.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TooltipArea, selectors: [["g", "ngx-charts-tooltip-area", ""]], viewQuery: function TooltipArea_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵviewQuery(_c18, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipAnchor = _t.first);
+    } }, inputs: { showPercentage: "showPercentage", tooltipDisabled: "tooltipDisabled", dims: "dims", xSet: "xSet", xScale: "xScale", yScale: "yScale", results: "results", colors: "colors", tooltipTemplate: "tooltipTemplate" }, outputs: { hover: "hover" }, attrs: _c19, decls: 6, vars: 18, consts: [["y", "0", 1, "tooltip-area", 2, "opacity", "0", "cursor", "auto", 3, "mousemove", "mouseleave"], ["defaultTooltipTemplate", ""], ["y", "0", "ngx-tooltip", "", 1, "tooltip-anchor", 3, "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipSpacing", "tooltipTemplate", "tooltipContext", "tooltipImmediateExit"], ["tooltipAnchor", ""], [1, "area-tooltip-container"], ["class", "tooltip-item", 4, "ngFor", "ngForOf"], [1, "tooltip-item"], [1, "tooltip-item-color"]], template: function TooltipArea_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g");
+        ɵngcc0.ɵɵelementStart(1, "rect", 0);
+        ɵngcc0.ɵɵlistener("mousemove", function TooltipArea_Template__svg_rect_mousemove_1_listener($event) { return ctx.mouseMove($event); })("mouseleave", function TooltipArea_Template__svg_rect_mouseleave_1_listener() { return ctx.hideTooltip(); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(2, TooltipArea__svg_ng_template_2_Template, 2, 1, "ng-template", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);
+        ɵngcc0.ɵɵelement(4, "rect", 2, 3);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        const _r0 = ɵngcc0.ɵɵreference(3);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("x", 0)("width", ctx.dims.width)("height", ctx.dims.height);
+        ɵngcc0.ɵɵadvance(3);
+        ɵngcc0.ɵɵstyleProp("opacity", ctx.anchorOpacity)("pointer-events", "none");
+        ɵngcc0.ɵɵproperty("@animationState", ctx.anchorOpacity !== 0 ? "active" : "inactive")("tooltipDisabled", ctx.tooltipDisabled)("tooltipPlacement", ctx.placementTypes.Right)("tooltipType", ctx.styleTypes.tooltip)("tooltipSpacing", 15)("tooltipTemplate", ctx.tooltipTemplate ? ctx.tooltipTemplate : _r0)("tooltipContext", ctx.anchorValues)("tooltipImmediateExit", true);
+        ɵngcc0.ɵɵattribute("x", ctx.anchorPos)("width", 1)("height", ctx.dims.height);
+    } }, directives: [TooltipDirective, ɵngcc1.NgForOf], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition('inactive => active', [
+                    style({
+                        opacity: 0
+                    }),
+                    animate(250, style({ opacity: 0.7 }))
+                ]),
+                transition('active => inactive', [
+                    style({
+                        opacity: 0.7
+                    }),
+                    animate(250, style({ opacity: 0 }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+TooltipArea.ctorParameters = () => [
+    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
+];
+TooltipArea.propDecorators = {
+    dims: [{ type: Input }],
+    xSet: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    results: [{ type: Input }],
+    colors: [{ type: Input }],
+    showPercentage: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    hover: [{ type: Output }],
+    tooltipAnchor: [{ type: ViewChild, args: ['tooltipAnchor', { static: false },] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipArea, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-tooltip-area]',
+                template: `
+    <svg:g>
+      <svg:rect
+        class="tooltip-area"
+        [attr.x]="0"
+        y="0"
+        [attr.width]="dims.width"
+        [attr.height]="dims.height"
+        style="opacity: 0; cursor: 'auto';"
+        (mousemove)="mouseMove($event)"
+        (mouseleave)="hideTooltip()"
+      />
+      <ng-template #defaultTooltipTemplate let-model="model">
+        <xhtml:div class="area-tooltip-container">
+          <xhtml:div *ngFor="let tooltipItem of model" class="tooltip-item">
+            <xhtml:span class="tooltip-item-color" [style.background-color]="tooltipItem.color"></xhtml:span>
+            {{ getToolTipText(tooltipItem) }}
+          </xhtml:div>
+        </xhtml:div>
+      </ng-template>
+      <svg:rect
+        #tooltipAnchor
+        [@animationState]="anchorOpacity !== 0 ? 'active' : 'inactive'"
+        class="tooltip-anchor"
+        [attr.x]="anchorPos"
+        y="0"
+        [attr.width]="1"
+        [attr.height]="dims.height"
+        [style.opacity]="anchorOpacity"
+        [style.pointer-events]="'none'"
+        ngx-tooltip
+        [tooltipDisabled]="tooltipDisabled"
+        [tooltipPlacement]="placementTypes.Right"
+        [tooltipType]="styleTypes.tooltip"
+        [tooltipSpacing]="15"
+        [tooltipTemplate]="tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate"
+        [tooltipContext]="anchorValues"
+        [tooltipImmediateExit]="true"
+      />
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition('inactive => active', [
+                            style({
+                                opacity: 0
+                            }),
+                            animate(250, style({ opacity: 0.7 }))
+                        ]),
+                        transition('active => inactive', [
+                            style({
+                                opacity: 0.7
+                            }),
+                            animate(250, style({ opacity: 0 }))
+                        ])
+                    ])
+                ]
+            }]
+    }], function () { return [{ type: undefined, decorators: [{
+                type: Inject,
+                args: [PLATFORM_ID]
+            }] }]; }, { showPercentage: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], hover: [{
+            type: Output
+        }], dims: [{
+            type: Input
+        }], xSet: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], results: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }], tooltipAnchor: [{
+            type: ViewChild,
+            args: ['tooltipAnchor', { static: false }]
+        }] }); })();
+
+class Timeline {
+    constructor(element, cd) {
+        this.cd = cd;
+        this.height = 50;
+        this.select = new EventEmitter();
+        this.onDomainChange = new EventEmitter();
+        this.initialized = false;
+        this.element = element.nativeElement;
+    }
+    ngOnChanges(changes) {
+        this.update();
+        if (!this.initialized) {
+            this.addBrush();
+            this.initialized = true;
+        }
+    }
+    update() {
+        this.dims = this.getDims();
+        this.height = this.dims.height;
+        const offsetY = this.view[1] - this.height;
+        this.xDomain = this.getXDomain();
+        this.xScale = this.getXScale();
+        if (this.brush) {
+            this.updateBrush();
+        }
+        this.transform = `translate(0 , ${offsetY})`;
+        this.filterId = 'filter' + id().toString();
+        this.filter = `url(#${this.filterId})`;
+        this.cd.markForCheck();
+    }
+    getXDomain() {
+        let values = [];
+        for (const results of this.results) {
+            for (const d of results.series) {
+                if (!values.includes(d.name)) {
+                    values.push(d.name);
+                }
+            }
+        }
+        let domain = [];
+        if (this.scaleType === ScaleType.Time) {
+            const min = Math.min(...values);
+            const max = Math.max(...values);
+            domain = [min, max];
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            values = values.map(v => Number(v));
+            const min = Math.min(...values);
+            const max = Math.max(...values);
+            domain = [min, max];
+        }
+        else {
+            domain = values;
+        }
+        return domain;
+    }
+    getXScale() {
+        let scale;
+        if (this.scaleType === ScaleType.Time) {
+            scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);
+        }
+        else if (this.scaleType === ScaleType.Ordinal) {
+            scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);
+        }
+        return scale;
+    }
+    addBrush() {
+        if (this.brush)
+            return;
+        const height = this.height;
+        const width = this.view[0];
+        this.brush = brushX()
+            .extent([
+            [0, 0],
+            [width, height]
+        ])
+            .on('brush end', ({ selection }) => {
+            const newSelection = selection || this.xScale.range();
+            const newDomain = newSelection.map(this.xScale.invert);
+            this.onDomainChange.emit(newDomain);
+            this.cd.markForCheck();
+        });
+        select(this.element).select('.brush').call(this.brush);
+    }
+    updateBrush() {
+        if (!this.brush)
+            return;
+        const height = this.height;
+        const width = this.view[0];
+        this.brush.extent([
+            [0, 0],
+            [width, height]
+        ]);
+        select(this.element).select('.brush').call(this.brush);
+        // clear hardcoded properties so they can be defined by CSS
+        select(this.element)
+            .select('.selection')
+            .attr('fill', undefined)
+            .attr('stroke', undefined)
+            .attr('fill-opacity', undefined);
+        this.cd.markForCheck();
+    }
+    getDims() {
+        const width = this.view[0];
+        const dims = {
+            width,
+            height: this.height
+        };
+        return dims;
+    }
+}
+Timeline.ɵfac = function Timeline_Factory(t) { return new (t || Timeline)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
+Timeline.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Timeline, selectors: [["g", "ngx-charts-timeline", ""]], inputs: { height: "height", view: "view", results: "results", scheme: "scheme", customColors: "customColors", legend: "legend", autoScale: "autoScale", scaleType: "scaleType" }, outputs: { select: "select", onDomainChange: "onDomainChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c20, ngContentSelectors: _c2, decls: 7, vars: 4, consts: [[1, "timeline"], ["in", "SourceGraphic", "type", "matrix", "values", "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"], [1, "embedded-chart"], ["x", "0", "y", "0", 1, "brush-background"], [1, "brush"]], template: function Timeline_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵprojectionDef();
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g", 0);
+        ɵngcc0.ɵɵelementStart(1, "filter");
+        ɵngcc0.ɵɵelement(2, "feColorMatrix", 1);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(3, "g", 2);
+        ɵngcc0.ɵɵprojection(4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelement(5, "rect", 3);
+        ɵngcc0.ɵɵelement(6, "g", 4);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("id", ctx.filterId);
+        ɵngcc0.ɵɵadvance(4);
+        ɵngcc0.ɵɵattribute("width", ctx.view[0])("height", ctx.height);
+    } }, styles: [".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\n"], encapsulation: 2, changeDetection: 0 });
+Timeline.ctorParameters = () => [
+    { type: ElementRef },
+    { type: ChangeDetectorRef }
+];
+Timeline.propDecorators = {
+    view: [{ type: Input }],
+    results: [{ type: Input }],
+    scheme: [{ type: Input }],
+    customColors: [{ type: Input }],
+    legend: [{ type: Input }],
+    autoScale: [{ type: Input }],
+    scaleType: [{ type: Input }],
+    height: [{ type: Input }],
+    select: [{ type: Output }],
+    onDomainChange: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Timeline, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-timeline]',
+                template: `
+    <svg:g class="timeline" [attr.transform]="transform">
+      <svg:filter [attr.id]="filterId">
+        <svg:feColorMatrix
+          in="SourceGraphic"
+          type="matrix"
+          values="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"
+        />
+      </svg:filter>
+      <svg:g class="embedded-chart">
+        <ng-content></ng-content>
+      </svg:g>
+      <svg:rect x="0" [attr.width]="view[0]" y="0" [attr.height]="height" class="brush-background" />
+      <svg:g class="brush"></svg:g>
+    </svg:g>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\n"]
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { height: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], onDomainChange: [{
+            type: Output
+        }], view: [{
+            type: Input
+        }], results: [{
+            type: Input
+        }], scheme: [{
+            type: Input
+        }], customColors: [{
+            type: Input
+        }], legend: [{
+            type: Input
+        }], autoScale: [{
+            type: Input
+        }], scaleType: [{
+            type: Input
+        }] }); })();
+
+class LegendComponent {
+    constructor(cd) {
+        this.cd = cd;
+        this.horizontal = false;
+        this.labelClick = new EventEmitter();
+        this.labelActivate = new EventEmitter();
+        this.labelDeactivate = new EventEmitter();
+        this.legendEntries = [];
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.cd.markForCheck();
+        this.legendEntries = this.getLegendEntries();
+    }
+    getLegendEntries() {
+        const items = [];
+        for (const label of this.data) {
+            const formattedLabel = formatLabel(label);
+            const idx = items.findIndex(i => {
+                return i.label === formattedLabel;
+            });
+            if (idx === -1) {
+                items.push({
+                    label,
+                    formattedLabel,
+                    color: this.colors.getColor(label)
+                });
+            }
+        }
+        return items;
+    }
+    isActive(entry) {
+        if (!this.activeEntries)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.label === d.name;
+        });
+        return item !== undefined;
+    }
+    activate(item) {
+        this.labelActivate.emit(item);
+    }
+    deactivate(item) {
+        this.labelDeactivate.emit(item);
+    }
+    trackBy(index, item) {
+        return item.label;
+    }
+}
+LegendComponent.ɵfac = function LegendComponent_Factory(t) { return new (t || LegendComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
+LegendComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LegendComponent, selectors: [["ngx-charts-legend"]], inputs: { horizontal: "horizontal", data: "data", title: "title", colors: "colors", height: "height", width: "width", activeEntries: "activeEntries" }, outputs: { labelClick: "labelClick", labelActivate: "labelActivate", labelDeactivate: "labelDeactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 9, consts: [["class", "legend-title", 4, "ngIf"], [1, "legend-wrap"], [1, "legend-labels"], ["class", "legend-label", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "legend-title"], [1, "legend-title-text"], [1, "legend-label"], [3, "label", "formattedLabel", "color", "isActive", "select", "activate", "deactivate"]], template: function LegendComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "div");
+        ɵngcc0.ɵɵtemplate(1, LegendComponent_header_1_Template, 3, 1, "header", 0);
+        ɵngcc0.ɵɵelementStart(2, "div", 1);
+        ɵngcc0.ɵɵelementStart(3, "ul", 2);
+        ɵngcc0.ɵɵtemplate(4, LegendComponent_li_4_Template, 2, 4, "li", 3);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵstyleProp("width", ctx.width, "px");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", (ctx.title == null ? null : ctx.title.length) > 0);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵstyleProp("max-height", ctx.height - 45, "px");
+        ɵngcc0.ɵɵclassProp("horizontal-legend", ctx.horizontal);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.legendEntries)("ngForTrackBy", ctx.trackBy);
+    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgForOf, LegendEntryComponent]; }, styles: [".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:bold}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\n"], encapsulation: 2, changeDetection: 0 });
+LegendComponent.ctorParameters = () => [
+    { type: ChangeDetectorRef }
+];
+LegendComponent.propDecorators = {
+    data: [{ type: Input }],
+    title: [{ type: Input }],
+    colors: [{ type: Input }],
+    height: [{ type: Input }],
+    width: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    horizontal: [{ type: Input }],
+    labelClick: [{ type: Output }],
+    labelActivate: [{ type: Output }],
+    labelDeactivate: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LegendComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-legend',
+                template: `
+    <div [style.width.px]="width">
+      <header class="legend-title" *ngIf="title?.length > 0">
+        <span class="legend-title-text">{{ title }}</span>
+      </header>
+      <div class="legend-wrap">
+        <ul class="legend-labels" [class.horizontal-legend]="horizontal" [style.max-height.px]="height - 45">
+          <li *ngFor="let entry of legendEntries; trackBy: trackBy" class="legend-label">
+            <ngx-charts-legend-entry
+              [label]="entry.label"
+              [formattedLabel]="entry.formattedLabel"
+              [color]="entry.color"
+              [isActive]="isActive(entry)"
+              (select)="labelClick.emit($event)"
+              (activate)="activate($event)"
+              (deactivate)="deactivate($event)"
+            >
+            </ngx-charts-legend-entry>
+          </li>
+        </ul>
+      </div>
+    </div>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:bold}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\n"]
+            }]
+    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { horizontal: [{
+            type: Input
+        }], labelClick: [{
+            type: Output
+        }], labelActivate: [{
+            type: Output
+        }], labelDeactivate: [{
+            type: Output
+        }], data: [{
+            type: Input
+        }], title: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], height: [{
+            type: Input
+        }], width: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }] }); })();
+
+class LegendEntryComponent {
+    constructor() {
+        this.isActive = false;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.toggle = new EventEmitter();
+    }
+    get trimmedLabel() {
+        return this.formattedLabel || '(empty)';
+    }
+    onMouseEnter() {
+        this.activate.emit({ name: this.label });
+    }
+    onMouseLeave() {
+        this.deactivate.emit({ name: this.label });
+    }
+}
+LegendEntryComponent.ɵfac = function LegendEntryComponent_Factory(t) { return new (t || LegendEntryComponent)(); };
+LegendEntryComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LegendEntryComponent, selectors: [["ngx-charts-legend-entry"]], hostBindings: function LegendEntryComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("mouseenter", function LegendEntryComponent_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function LegendEntryComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
+    } }, inputs: { isActive: "isActive", color: "color", label: "label", formattedLabel: "formattedLabel" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate", toggle: "toggle" }, decls: 4, vars: 6, consts: [["tabindex", "-1", 3, "title", "click"], [1, "legend-label-color", 3, "click"], [1, "legend-label-text"]], template: function LegendEntryComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "span", 0);
+        ɵngcc0.ɵɵlistener("click", function LegendEntryComponent_Template_span_click_0_listener() { return ctx.select.emit(ctx.formattedLabel); });
+        ɵngcc0.ɵɵelementStart(1, "span", 1);
+        ɵngcc0.ɵɵlistener("click", function LegendEntryComponent_Template_span_click_1_listener() { return ctx.toggle.emit(ctx.formattedLabel); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(2, "span", 2);
+        ɵngcc0.ɵɵtext(3);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵclassProp("active", ctx.isActive);
+        ɵngcc0.ɵɵproperty("title", ctx.formattedLabel);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("background-color", ctx.color);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.trimmedLabel, " ");
+    } }, encapsulation: 2, changeDetection: 0 });
+LegendEntryComponent.propDecorators = {
+    color: [{ type: Input }],
+    label: [{ type: Input }],
+    formattedLabel: [{ type: Input }],
+    isActive: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    toggle: [{ type: Output }],
+    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
+    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LegendEntryComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-legend-entry',
+                template: `
+    <span [title]="formattedLabel" tabindex="-1" [class.active]="isActive" (click)="select.emit(formattedLabel)">
+      <span class="legend-label-color" [style.background-color]="color" (click)="toggle.emit(formattedLabel)"> </span>
+      <span class="legend-label-text">
+        {{ trimmedLabel }}
+      </span>
+    </span>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { isActive: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], toggle: [{
+            type: Output
+        }], onMouseEnter: [{
+            type: HostListener,
+            args: ['mouseenter']
+        }], onMouseLeave: [{
+            type: HostListener,
+            args: ['mouseleave']
+        }], color: [{
+            type: Input
+        }], label: [{
+            type: Input
+        }], formattedLabel: [{
+            type: Input
+        }] }); })();
+
+class ScaleLegendComponent {
+    constructor() {
+        this.horizontal = false;
+    }
+    ngOnChanges(changes) {
+        const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());
+        const direction = this.horizontal ? 'right' : 'bottom';
+        this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;
+    }
+    /**
+     * Generates the string used in the gradient stylesheet properties
+     * @param colors array of colors
+     * @param splits array of splits on a scale of (0, 1)
+     */
+    gradientString(colors, splits) {
+        // add the 100%
+        splits.push(1);
+        const pairs = [];
+        colors.reverse().forEach((c, i) => {
+            pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);
+        });
+        return pairs.join(', ');
+    }
+}
+ScaleLegendComponent.ɵfac = function ScaleLegendComponent_Factory(t) { return new (t || ScaleLegendComponent)(); };
+ScaleLegendComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ScaleLegendComponent, selectors: [["ngx-charts-scale-legend"]], inputs: { horizontal: "horizontal", valueRange: "valueRange", colors: "colors", height: "height", width: "width" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 8, vars: 10, consts: [[1, "scale-legend"], [1, "scale-legend-label"], [1, "scale-legend-wrap"]], template: function ScaleLegendComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "div", 0);
+        ɵngcc0.ɵɵelementStart(1, "div", 1);
+        ɵngcc0.ɵɵelementStart(2, "span");
+        ɵngcc0.ɵɵtext(3);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelement(4, "div", 2);
+        ɵngcc0.ɵɵelementStart(5, "div", 1);
+        ɵngcc0.ɵɵelementStart(6, "span");
+        ɵngcc0.ɵɵtext(7);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵstyleProp("height", ctx.horizontal ? undefined : ctx.height, "px")("width", ctx.width, "px");
+        ɵngcc0.ɵɵclassProp("horizontal-legend", ctx.horizontal);
+        ɵngcc0.ɵɵadvance(3);
+        ɵngcc0.ɵɵtextInterpolate(ctx.valueRange[1].toLocaleString());
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("background", ctx.gradient);
+        ɵngcc0.ɵɵadvance(3);
+        ɵngcc0.ɵɵtextInterpolate(ctx.valueRange[0].toLocaleString());
+    } }, styles: [".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\n"], encapsulation: 2, changeDetection: 0 });
+ScaleLegendComponent.propDecorators = {
+    valueRange: [{ type: Input }],
+    colors: [{ type: Input }],
+    height: [{ type: Input }],
+    width: [{ type: Input }],
+    horizontal: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ScaleLegendComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-scale-legend',
+                template: `
+    <div
+      class="scale-legend"
+      [class.horizontal-legend]="horizontal"
+      [style.height.px]="horizontal ? undefined : height"
+      [style.width.px]="width"
+    >
+      <div class="scale-legend-label">
+        <span>{{ valueRange[1].toLocaleString() }}</span>
+      </div>
+      <div class="scale-legend-wrap" [style.background]="gradient"></div>
+      <div class="scale-legend-label">
+        <span>{{ valueRange[0].toLocaleString() }}</span>
+      </div>
+    </div>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\n"]
+            }]
+    }], function () { return []; }, { horizontal: [{
+            type: Input
+        }], valueRange: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], height: [{
+            type: Input
+        }], width: [{
+            type: Input
+        }] }); })();
+
+class AdvancedLegendComponent {
+    constructor() {
+        this.label = 'Total';
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.legendItems = [];
+        this.labelFormatting = label => label;
+        this.percentageFormatting = percentage => percentage;
+        this.defaultValueFormatting = value => value.toLocaleString();
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    getTotal() {
+        return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);
+    }
+    update() {
+        this.total = this.getTotal();
+        this.roundedTotal = this.total;
+        this.legendItems = this.getLegendItems();
+    }
+    getLegendItems() {
+        return this.data.map(d => {
+            const label = formatLabel(d.name);
+            const value = d.value;
+            const color = this.colors.getColor(label);
+            const percentage = this.total > 0 ? (value / this.total) * 100 : 0;
+            const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;
+            return {
+                _value: value,
+                data: d,
+                value,
+                color,
+                label: formattedLabel,
+                displayLabel: trimLabel(formattedLabel, 20),
+                origialLabel: d.name,
+                percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()
+            };
+        });
+    }
+    trackBy(index, item) {
+        return item.label;
+    }
+}
+AdvancedLegendComponent.ɵfac = function AdvancedLegendComponent_Factory(t) { return new (t || AdvancedLegendComponent)(); };
+AdvancedLegendComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AdvancedLegendComponent, selectors: [["ngx-charts-advanced-legend"]], inputs: { label: "label", animations: "animations", labelFormatting: "labelFormatting", percentageFormatting: "percentageFormatting", width: "width", data: "data", colors: "colors", valueFormatting: "valueFormatting" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 8, vars: 7, consts: [[1, "advanced-pie-legend"], ["class", "total-value", "ngx-charts-count-up", "", 3, "countTo", "valueFormatting", 4, "ngIf"], ["class", "total-value", 4, "ngIf"], [1, "total-label"], [1, "legend-items-container"], [1, "legend-items"], ["tabindex", "-1", "class", "legend-item", 3, "mouseenter", "mouseleave", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-count-up", "", 1, "total-value", 3, "countTo", "valueFormatting"], [1, "total-value"], ["tabindex", "-1", 1, "legend-item", 3, "mouseenter", "mouseleave", "click"], [1, "item-color"], ["class", "item-value", "ngx-charts-count-up", "", 3, "countTo", "valueFormatting", 4, "ngIf"], ["class", "item-value", 4, "ngIf"], [1, "item-label"], ["class", "item-percent", "ngx-charts-count-up", "", 3, "countTo", "countSuffix", 4, "ngIf"], ["class", "item-percent", 4, "ngIf"], ["ngx-charts-count-up", "", 1, "item-value", 3, "countTo", "valueFormatting"], [1, "item-value"], ["ngx-charts-count-up", "", 1, "item-percent", 3, "countTo", "countSuffix"], [1, "item-percent"]], template: function AdvancedLegendComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "div", 0);
+        ɵngcc0.ɵɵtemplate(1, AdvancedLegendComponent_div_1_Template, 1, 2, "div", 1);
+        ɵngcc0.ɵɵtemplate(2, AdvancedLegendComponent_div_2_Template, 2, 1, "div", 2);
+        ɵngcc0.ɵɵelementStart(3, "div", 3);
+        ɵngcc0.ɵɵtext(4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(5, "div", 4);
+        ɵngcc0.ɵɵelementStart(6, "div", 5);
+        ɵngcc0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_Template, 8, 7, "div", 6);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵstyleProp("width", ctx.width, "px");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", !ctx.animations);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.label, " ");
+        ɵngcc0.ɵɵadvance(3);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.legendItems)("ngForTrackBy", ctx.trackBy);
+    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, CountUpDirective], styles: [".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\n"], encapsulation: 2, changeDetection: 0 });
+AdvancedLegendComponent.propDecorators = {
+    width: [{ type: Input }],
+    data: [{ type: Input }],
+    colors: [{ type: Input }],
+    label: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    valueFormatting: [{ type: Input }],
+    labelFormatting: [{ type: Input }],
+    percentageFormatting: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AdvancedLegendComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-advanced-legend',
+                template: `
+    <div class="advanced-pie-legend" [style.width.px]="width">
+      <div
+        *ngIf="animations"
+        class="total-value"
+        ngx-charts-count-up
+        [countTo]="roundedTotal"
+        [valueFormatting]="valueFormatting"
+      ></div>
+      <div class="total-value" *ngIf="!animations">
+        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}
+      </div>
+      <div class="total-label">
+        {{ label }}
+      </div>
+      <div class="legend-items-container">
+        <div class="legend-items">
+          <div
+            *ngFor="let legendItem of legendItems; trackBy: trackBy"
+            tabindex="-1"
+            class="legend-item"
+            (mouseenter)="activate.emit(legendItem.data)"
+            (mouseleave)="deactivate.emit(legendItem.data)"
+            (click)="select.emit(legendItem.data)"
+          >
+            <div class="item-color" [style.border-left-color]="legendItem.color"></div>
+            <div
+              *ngIf="animations"
+              class="item-value"
+              ngx-charts-count-up
+              [countTo]="legendItem._value"
+              [valueFormatting]="valueFormatting"
+            ></div>
+            <div *ngIf="!animations" class="item-value">
+              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}
+            </div>
+            <div class="item-label">{{ legendItem.displayLabel }}</div>
+            <div
+              *ngIf="animations"
+              class="item-percent"
+              ngx-charts-count-up
+              [countTo]="legendItem.percentage"
+              [countSuffix]="'%'"
+            ></div>
+            <div *ngIf="!animations" class="item-percent">{{ legendItem.percentage.toLocaleString() }}%</div>
+          </div>
+        </div>
+      </div>
+    </div>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\n"]
+            }]
+    }], function () { return []; }, { label: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], labelFormatting: [{
+            type: Input
+        }], percentageFormatting: [{
+            type: Input
+        }], width: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }] }); })();
+
+const COMPONENTS = [
+    AreaComponent,
+    BaseChartComponent,
+    CountUpDirective,
+    TooltipArea,
+    ChartComponent,
+    LegendComponent,
+    LegendEntryComponent,
+    ScaleLegendComponent,
+    CircleComponent,
+    CircleSeriesComponent,
+    GridPanelComponent,
+    GridPanelSeriesComponent,
+    SvgLinearGradientComponent,
+    SvgRadialGradientComponent,
+    Timeline,
+    AdvancedLegendComponent
+];
+class ChartCommonModule {
+}
+ChartCommonModule.ɵfac = function ChartCommonModule_Factory(t) { return new (t || ChartCommonModule)(); };
+ChartCommonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ChartCommonModule });
+ChartCommonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ChartCommonModule, { declarations: function () { return [AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent, VisibilityObserver]; }, imports: function () { return [CommonModule, AxesModule, TooltipModule]; }, exports: function () { return [CommonModule, AxesModule, TooltipModule, AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent, VisibilityObserver]; } }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ChartCommonModule, [{
+        type: NgModule,
+        args: [{
+                imports: [CommonModule, AxesModule, TooltipModule],
+                declarations: [...COMPONENTS, VisibilityObserver],
+                exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]
+            }]
+    }], null, null); })();
+
+function calculateViewDimensions({ width, height, margins, showXAxis = false, showYAxis = false, xAxisHeight = 0, yAxisWidth = 0, showXLabel = false, showYLabel = false, showLegend = false, legendType = ScaleType.Ordinal, legendPosition = LegendPosition.Right, columns = 12 }) {
+    let xOffset = margins[3];
+    let chartWidth = width;
+    let chartHeight = height - margins[0] - margins[2];
+    if (showLegend && legendPosition === LegendPosition.Right) {
+        if (legendType === ScaleType.Ordinal) {
+            columns -= 2;
+        }
+        else {
+            columns -= 1;
+        }
+    }
+    chartWidth = (chartWidth * columns) / 12;
+    chartWidth = chartWidth - margins[1] - margins[3];
+    if (showXAxis) {
+        chartHeight -= 5;
+        chartHeight -= xAxisHeight;
+        if (showXLabel) {
+            // text height + spacing between axis label and tick labels
+            const offset = 25 + 5;
+            chartHeight -= offset;
+        }
+    }
+    if (showYAxis) {
+        chartWidth -= 5;
+        chartWidth -= yAxisWidth;
+        xOffset += yAxisWidth;
+        xOffset += 10;
+        if (showYLabel) {
+            // text height + spacing between axis label and tick labels
+            const offset = 25 + 5;
+            chartWidth -= offset;
+            xOffset += offset;
+        }
+    }
+    chartWidth = Math.max(0, chartWidth);
+    chartHeight = Math.max(0, chartHeight);
+    return {
+        width: Math.floor(chartWidth),
+        height: Math.floor(chartHeight),
+        xOffset: Math.floor(xOffset)
+    };
+}
+
+let colorSets = [
+    {
+        name: 'vivid',
+        selectable: true,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#647c8a',
+            '#3f51b5',
+            '#2196f3',
+            '#00b862',
+            '#afdf0a',
+            '#a7b61a',
+            '#f3e562',
+            '#ff9800',
+            '#ff5722',
+            '#ff4514'
+        ]
+    },
+    {
+        name: 'natural',
+        selectable: true,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#bf9d76',
+            '#e99450',
+            '#d89f59',
+            '#f2dfa7',
+            '#a5d7c6',
+            '#7794b1',
+            '#afafaf',
+            '#707160',
+            '#ba9383',
+            '#d9d5c3'
+        ]
+    },
+    {
+        name: 'cool',
+        selectable: true,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#a8385d',
+            '#7aa3e5',
+            '#a27ea8',
+            '#aae3f5',
+            '#adcded',
+            '#a95963',
+            '#8796c0',
+            '#7ed3ed',
+            '#50abcc',
+            '#ad6886'
+        ]
+    },
+    {
+        name: 'fire',
+        selectable: true,
+        group: ScaleType.Ordinal,
+        domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']
+    },
+    {
+        name: 'solar',
+        selectable: true,
+        group: ScaleType.Linear,
+        domain: [
+            '#fff8e1',
+            '#ffecb3',
+            '#ffe082',
+            '#ffd54f',
+            '#ffca28',
+            '#ffc107',
+            '#ffb300',
+            '#ffa000',
+            '#ff8f00',
+            '#ff6f00'
+        ]
+    },
+    {
+        name: 'air',
+        selectable: true,
+        group: ScaleType.Linear,
+        domain: [
+            '#e1f5fe',
+            '#b3e5fc',
+            '#81d4fa',
+            '#4fc3f7',
+            '#29b6f6',
+            '#03a9f4',
+            '#039be5',
+            '#0288d1',
+            '#0277bd',
+            '#01579b'
+        ]
+    },
+    {
+        name: 'aqua',
+        selectable: true,
+        group: ScaleType.Linear,
+        domain: [
+            '#e0f7fa',
+            '#b2ebf2',
+            '#80deea',
+            '#4dd0e1',
+            '#26c6da',
+            '#00bcd4',
+            '#00acc1',
+            '#0097a7',
+            '#00838f',
+            '#006064'
+        ]
+    },
+    {
+        name: 'flame',
+        selectable: false,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#A10A28',
+            '#D3342D',
+            '#EF6D49',
+            '#FAAD67',
+            '#FDDE90',
+            '#DBED91',
+            '#A9D770',
+            '#6CBA67',
+            '#2C9653',
+            '#146738'
+        ]
+    },
+    {
+        name: 'ocean',
+        selectable: false,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#1D68FB',
+            '#33C0FC',
+            '#4AFFFE',
+            '#AFFFFF',
+            '#FFFC63',
+            '#FDBD2D',
+            '#FC8A25',
+            '#FA4F1E',
+            '#FA141B',
+            '#BA38D1'
+        ]
+    },
+    {
+        name: 'forest',
+        selectable: false,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#55C22D',
+            '#C1F33D',
+            '#3CC099',
+            '#AFFFFF',
+            '#8CFC9D',
+            '#76CFFA',
+            '#BA60FB',
+            '#EE6490',
+            '#C42A1C',
+            '#FC9F32'
+        ]
+    },
+    {
+        name: 'horizon',
+        selectable: false,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#2597FB',
+            '#65EBFD',
+            '#99FDD0',
+            '#FCEE4B',
+            '#FEFCFA',
+            '#FDD6E3',
+            '#FCB1A8',
+            '#EF6F7B',
+            '#CB96E8',
+            '#EFDEE0'
+        ]
+    },
+    {
+        name: 'neons',
+        selectable: false,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#FF3333',
+            '#FF33FF',
+            '#CC33FF',
+            '#0000FF',
+            '#33CCFF',
+            '#33FFFF',
+            '#33FF66',
+            '#CCFF33',
+            '#FFCC00',
+            '#FF6600'
+        ]
+    },
+    {
+        name: 'picnic',
+        selectable: false,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#FAC51D',
+            '#66BD6D',
+            '#FAA026',
+            '#29BB9C',
+            '#E96B56',
+            '#55ACD2',
+            '#B7332F',
+            '#2C83C9',
+            '#9166B8',
+            '#92E7E8'
+        ]
+    },
+    {
+        name: 'night',
+        selectable: false,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#2B1B5A',
+            '#501356',
+            '#183356',
+            '#28203F',
+            '#391B3C',
+            '#1E2B3C',
+            '#120634',
+            '#2D0432',
+            '#051932',
+            '#453080',
+            '#75267D',
+            '#2C507D',
+            '#4B3880',
+            '#752F7D',
+            '#35547D'
+        ]
+    },
+    {
+        name: 'nightLights',
+        selectable: false,
+        group: ScaleType.Ordinal,
+        domain: [
+            '#4e31a5',
+            '#9c25a7',
+            '#3065ab',
+            '#57468b',
+            '#904497',
+            '#46648b',
+            '#32118d',
+            '#a00fb3',
+            '#1052a2',
+            '#6e51bd',
+            '#b63cc3',
+            '#6c97cb',
+            '#8671c1',
+            '#b455be',
+            '#7496c3'
+        ]
+    }
+];
+
+class ColorHelper {
+    constructor(scheme, type, domain, customColors) {
+        if (typeof scheme === 'string') {
+            scheme = colorSets.find(cs => {
+                return cs.name === scheme;
+            });
+        }
+        this.colorDomain = scheme.domain;
+        this.scaleType = type;
+        this.domain = domain;
+        this.customColors = customColors;
+        this.scale = this.generateColorScheme(scheme, type, this.domain);
+    }
+    generateColorScheme(scheme, type, domain) {
+        if (typeof scheme === 'string') {
+            scheme = colorSets.find(cs => {
+                return cs.name === scheme;
+            });
+        }
+        let colorScale;
+        switch (type) {
+            case ScaleType.Quantile:
+                colorScale = scaleQuantile()
+                    .range(scheme.domain)
+                    .domain(domain);
+                break;
+            case ScaleType.Ordinal:
+                colorScale = scaleOrdinal()
+                    .range(scheme.domain)
+                    .domain(domain);
+                break;
+            case ScaleType.Linear:
+                {
+                    const colorDomain = [...scheme.domain];
+                    if (colorDomain.length === 1) {
+                        colorDomain.push(colorDomain[0]);
+                        this.colorDomain = colorDomain;
+                    }
+                    const points = range(0, 1, 1.0 / colorDomain.length);
+                    colorScale = scaleLinear()
+                        .range(colorDomain)
+                        .domain(points);
+                }
+                break;
+            default:
+                break;
+        }
+        return colorScale;
+    }
+    getColor(value) {
+        if (value === undefined || value === null) {
+            throw new Error('Value can not be null');
+        }
+        if (this.scaleType === ScaleType.Linear) {
+            const valueScale = scaleLinear()
+                .domain(this.domain)
+                .range([0, 1]);
+            return this.scale(valueScale(value));
+        }
+        else {
+            if (typeof this.customColors === 'function') {
+                return this.customColors(value);
+            }
+            const formattedValue = value.toString();
+            let found; // todo type customColors
+            if (this.customColors && this.customColors.length > 0) {
+                found = this.customColors.find(mapping => {
+                    return mapping.name.toLowerCase() === formattedValue.toLowerCase();
+                });
+            }
+            if (found) {
+                return found.value;
+            }
+            else {
+                return this.scale(value);
+            }
+        }
+    }
+    getLinearGradientStops(value, start) {
+        if (start === undefined) {
+            start = this.domain[0];
+        }
+        const valueScale = scaleLinear()
+            .domain(this.domain)
+            .range([0, 1]);
+        const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);
+        const endColor = this.getColor(value);
+        // generate the stops
+        const startVal = valueScale(start);
+        const startColor = this.getColor(start);
+        const endVal = valueScale(value);
+        let i = 1;
+        let currentVal = startVal;
+        const stops = [];
+        stops.push({
+            color: startColor,
+            offset: startVal,
+            originalOffset: startVal,
+            opacity: 1
+        });
+        while (currentVal < endVal && i < this.colorDomain.length) {
+            const color = this.colorDomain[i];
+            const offset = colorValueScale(color);
+            if (offset <= startVal) {
+                i++;
+                continue;
+            }
+            if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {
+                break;
+            }
+            stops.push({
+                color,
+                offset,
+                opacity: 1
+            });
+            currentVal = offset;
+            i++;
+        }
+        if (stops[stops.length - 1].offset < 100) {
+            stops.push({
+                color: endColor,
+                offset: endVal,
+                opacity: 1
+            });
+        }
+        if (endVal === startVal) {
+            stops[0].offset = 0;
+            stops[1].offset = 100;
+        }
+        else {
+            // normalize the offsets into percentages
+            if (stops[stops.length - 1].offset !== 100) {
+                for (const s of stops) {
+                    s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;
+                }
+            }
+        }
+        return stops;
+    }
+}
+
+/**
+ * Based on the data, return an array with unique values.
+ *
+ * @export
+ * @returns array
+ */
+function getUniqueXDomainValues(results) {
+    const valueSet = new Set();
+    for (const result of results) {
+        for (const d of result.series) {
+            valueSet.add(d.name);
+        }
+    }
+    return Array.from(valueSet);
+}
+/**
+ * Get the scaleType of enumerable of values.
+ * @returns  'time', 'linear' or 'ordinal'
+ */
+function getScaleType(values, checkDateType = true) {
+    if (checkDateType) {
+        const allDates = values.every(value => value instanceof Date);
+        if (allDates) {
+            return ScaleType.Time;
+        }
+    }
+    const allNumbers = values.every(value => typeof value === 'number');
+    if (allNumbers) {
+        return ScaleType.Linear;
+    }
+    return ScaleType.Ordinal;
+}
+function getXDomainArray(values, xScaleMin, xScaleMax) {
+    const scaleType = getScaleType(values);
+    let xSet = [];
+    let domain = [];
+    if (scaleType === ScaleType.Linear) {
+        values = values.map(v => Number(v));
+    }
+    let min;
+    let max;
+    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {
+        const mappedValues = values.map(v => Number(v));
+        min = xScaleMin ? xScaleMin : Math.min(...mappedValues);
+        max = xScaleMax ? xScaleMax : Math.max(...mappedValues);
+    }
+    if (scaleType === ScaleType.Time) {
+        domain = [new Date(min), new Date(max)];
+        xSet = [...values].sort((a, b) => {
+            const aDate = a.getTime();
+            const bDate = b.getTime();
+            if (aDate > bDate)
+                return 1;
+            if (bDate > aDate)
+                return -1;
+            return 0;
+        });
+    }
+    else if (scaleType === ScaleType.Linear) {
+        domain = [min, max];
+        // Use compare function to sort numbers numerically
+        xSet = [...values].sort((a, b) => a - b);
+    }
+    else {
+        domain = values;
+        xSet = values;
+    }
+    return { domain, xSet, scaleType };
+}
+
+class AreaChartComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.xAxis = false;
+        this.yAxis = false;
+        this.baseValue = 'auto';
+        this.autoScale = false;
+        this.timeline = false;
+        this.showGridLines = true;
+        this.curve = curveLinear;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.roundDomains = false;
+        this.tooltipDisabled = false;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.timelineHeight = 50;
+        this.timelinePadding = 10;
+        this.trackBy = (index, item) => {
+            return item.name;
+        };
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        if (this.timeline) {
+            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;
+        }
+        this.xDomain = this.getXDomain();
+        if (this.filteredDomain) {
+            this.xDomain = this.filteredDomain;
+        }
+        this.yDomain = this.getYDomain();
+        this.seriesDomain = this.getSeriesDomain();
+        this.xScale = this.getXScale(this.xDomain, this.dims.width);
+        this.yScale = this.getYScale(this.yDomain, this.dims.height);
+        this.updateTimeline();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;
+        this.clipPathId = 'clip' + id().toString();
+        this.clipPath = `url(#${this.clipPathId})`;
+    }
+    updateTimeline() {
+        if (this.timeline) {
+            this.timelineWidth = this.dims.width;
+            this.timelineXDomain = this.getXDomain();
+            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);
+            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);
+            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;
+        }
+    }
+    getXDomain() {
+        let values = getUniqueXDomainValues(this.results);
+        this.scaleType = getScaleType(values);
+        let domain = [];
+        if (this.scaleType === ScaleType.Linear) {
+            values = values.map(v => Number(v));
+        }
+        let min;
+        let max;
+        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {
+            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);
+            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);
+        }
+        if (this.scaleType === ScaleType.Time) {
+            domain = [new Date(min), new Date(max)];
+            this.xSet = [...values].sort((a, b) => {
+                const aDate = a.getTime();
+                const bDate = b.getTime();
+                if (aDate > bDate)
+                    return 1;
+                if (bDate > aDate)
+                    return -1;
+                return 0;
+            });
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            domain = [min, max];
+            // Use compare function to sort numbers numerically
+            this.xSet = [...values].sort((a, b) => a - b);
+        }
+        else {
+            domain = values;
+            this.xSet = values;
+        }
+        return domain;
+    }
+    getYDomain() {
+        const domain = [];
+        for (const results of this.results) {
+            for (const d of results.series) {
+                if (!domain.includes(d.value)) {
+                    domain.push(d.value);
+                }
+            }
+        }
+        const values = [...domain];
+        if (!this.autoScale) {
+            values.push(0);
+        }
+        if (this.baseValue !== 'auto') {
+            values.push(this.baseValue);
+        }
+        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);
+        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);
+        return [min, max];
+    }
+    getSeriesDomain() {
+        return this.results.map(d => d.name);
+    }
+    getXScale(domain, width) {
+        let scale;
+        if (this.scaleType === ScaleType.Time) {
+            scale = scaleTime();
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            scale = scaleLinear();
+        }
+        else if (this.scaleType === ScaleType.Ordinal) {
+            scale = scalePoint().padding(0.1);
+        }
+        scale.range([0, width]).domain(domain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    getYScale(domain, height) {
+        const scale = scaleLinear().range([height, 0]).domain(domain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    getScaleType(values) {
+        let date = true;
+        let num = true;
+        for (const value of values) {
+            if (isDate(value)) {
+                date = false;
+            }
+            if (isNumber(value)) {
+                num = false;
+            }
+        }
+        if (date) {
+            return ScaleType.Time;
+        }
+        if (num) {
+            return ScaleType.Linear;
+        }
+        return ScaleType.Ordinal;
+    }
+    updateDomain(domain) {
+        this.filteredDomain = domain;
+        this.xDomain = this.filteredDomain;
+        this.xScale = this.getXScale(this.xDomain, this.dims.width);
+    }
+    updateHoveredVertical(item) {
+        this.hoveredVertical = item.value;
+        this.deactivateAll();
+    }
+    hideCircles() {
+        this.hoveredVertical = null;
+        this.deactivateAll();
+    }
+    onClick(data, series) {
+        if (series) {
+            data.series = series.name;
+        }
+        this.select.emit(data);
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.seriesDomain;
+        }
+        else {
+            domain = this.yDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.seriesDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.yDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item, ...this.activeEntries];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+    deactivateAll() {
+        this.activeEntries = [...this.activeEntries];
+        for (const entry of this.activeEntries) {
+            this.deactivate.emit({ value: entry, entries: [] });
+        }
+        this.activeEntries = [];
+    }
+}
+AreaChartComponent.ɵfac = function AreaChartComponent_Factory(t) { return ɵAreaChartComponent_BaseFactory(t || AreaChartComponent); };
+AreaChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AreaChartComponent, selectors: [["ngx-charts-area-chart"]], contentQueries: function AreaChartComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);
+    } }, hostBindings: function AreaChartComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("mouseleave", function AreaChartComponent_mouseleave_HostBindingHandler() { return ctx.hideCircles(); });
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", xAxis: "xAxis", yAxis: "yAxis", baseValue: "baseValue", autoScale: "autoScale", timeline: "timeline", showGridLines: "showGridLines", curve: "curve", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", roundDomains: "roundDomains", tooltipDisabled: "tooltipDisabled", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", xScaleMin: "xScaleMin", xScaleMax: "xScaleMax", yScaleMin: "yScaleMin", yScaleMax: "yScaleMax" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 20, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "area-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "mouseleave", 4, "ngIf"], ["ngx-charts-timeline", "", 3, "results", "view", "height", "scheme", "customColors", "legend", "scaleType", "onDomainChange", 4, "ngIf"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-area-series", "", 3, "xScale", "yScale", "baseValue", "colors", "data", "activeEntries", "scaleType", "gradient", "curve", "animations"], [3, "mouseleave"], ["ngx-charts-tooltip-area", "", 3, "dims", "xSet", "xScale", "yScale", "results", "colors", "tooltipDisabled", "tooltipTemplate", "hover"], [4, "ngFor", "ngForOf"], ["ngx-charts-circle-series", "", 3, "xScale", "yScale", "colors", "activeEntries", "data", "scaleType", "visibleValue", "tooltipDisabled", "tooltipTemplate", "select", "activate", "deactivate"], ["ngx-charts-timeline", "", 3, "results", "view", "height", "scheme", "customColors", "legend", "scaleType", "onDomainChange"], ["ngx-charts-area-series", "", 3, "xScale", "yScale", "baseValue", "colors", "data", "scaleType", "gradient", "curve", "animations"]], template: function AreaChartComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function AreaChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function AreaChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event); })("legendLabelDeactivate", function AreaChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "defs");
+        ɵngcc0.ɵɵelementStart(2, "clipPath");
+        ɵngcc0.ɵɵelement(3, "rect");
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(4, "g", 1);
+        ɵngcc0.ɵɵtemplate(5, AreaChartComponent__svg_g_5_Template, 1, 10, "g", 2);
+        ɵngcc0.ɵɵtemplate(6, AreaChartComponent__svg_g_6_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵelementStart(7, "g");
+        ɵngcc0.ɵɵtemplate(8, AreaChartComponent__svg_g_8_Template, 2, 10, "g", 4);
+        ɵngcc0.ɵɵtemplate(9, AreaChartComponent__svg_g_9_Template, 3, 9, "g", 5);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(10, AreaChartComponent__svg_g_10_Template, 2, 13, "g", 6);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵattribute("id", ctx.clipPathId);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("width", ctx.dims.width + 10)("height", ctx.dims.height + 10)("transform", "translate(-5, -5)");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("clip-path", ctx.clipPath);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", !ctx.tooltipDisabled);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.timeline && ctx.scaleType != "ordinal");
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline]; }, styles: [_c24], encapsulation: 2, changeDetection: 0 });
+AreaChartComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    baseValue: [{ type: Input }],
+    autoScale: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    timeline: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    curve: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    xScaleMin: [{ type: Input }],
+    xScaleMax: [{ type: Input }],
+    yScaleMin: [{ type: Input }],
+    yScaleMax: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }],
+    seriesTooltipTemplate: [{ type: ContentChild, args: ['seriesTooltipTemplate',] }],
+    hideCircles: [{ type: HostListener, args: ['mouseleave',] }]
+};
+const ɵAreaChartComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AreaChartComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AreaChartComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-area-chart',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelClick)="onClick($event)"
+      (legendLabelActivate)="onActivate($event)"
+      (legendLabelDeactivate)="onDeactivate($event)"
+    >
+      <svg:defs>
+        <svg:clipPath [attr.id]="clipPathId">
+          <svg:rect
+            [attr.width]="dims.width + 10"
+            [attr.height]="dims.height + 10"
+            [attr.transform]="'translate(-5, -5)'"
+          />
+        </svg:clipPath>
+      </svg:defs>
+      <svg:g [attr.transform]="transform" class="area-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g [attr.clip-path]="clipPath">
+          <svg:g *ngFor="let series of results; trackBy: trackBy">
+            <svg:g
+              ngx-charts-area-series
+              [xScale]="xScale"
+              [yScale]="yScale"
+              [baseValue]="baseValue"
+              [colors]="colors"
+              [data]="series"
+              [activeEntries]="activeEntries"
+              [scaleType]="scaleType"
+              [gradient]="gradient"
+              [curve]="curve"
+              [animations]="animations"
+            />
+          </svg:g>
+
+          <svg:g *ngIf="!tooltipDisabled" (mouseleave)="hideCircles()">
+            <svg:g
+              ngx-charts-tooltip-area
+              [dims]="dims"
+              [xSet]="xSet"
+              [xScale]="xScale"
+              [yScale]="yScale"
+              [results]="results"
+              [colors]="colors"
+              [tooltipDisabled]="tooltipDisabled"
+              [tooltipTemplate]="seriesTooltipTemplate"
+              (hover)="updateHoveredVertical($event)"
+            />
+
+            <svg:g *ngFor="let series of results">
+              <svg:g
+                ngx-charts-circle-series
+                [xScale]="xScale"
+                [yScale]="yScale"
+                [colors]="colors"
+                [activeEntries]="activeEntries"
+                [data]="series"
+                [scaleType]="scaleType"
+                [visibleValue]="hoveredVertical"
+                [tooltipDisabled]="tooltipDisabled"
+                [tooltipTemplate]="tooltipTemplate"
+                (select)="onClick($event, series)"
+                (activate)="onActivate($event)"
+                (deactivate)="onDeactivate($event)"
+              />
+            </svg:g>
+          </svg:g>
+        </svg:g>
+      </svg:g>
+      <svg:g
+        ngx-charts-timeline
+        *ngIf="timeline && scaleType != 'ordinal'"
+        [attr.transform]="timelineTransform"
+        [results]="results"
+        [view]="[timelineWidth, height]"
+        [height]="timelineHeight"
+        [scheme]="scheme"
+        [customColors]="customColors"
+        [legend]="legend"
+        [scaleType]="scaleType"
+        (onDomainChange)="updateDomain($event)"
+      >
+        <svg:g *ngFor="let series of results; trackBy: trackBy">
+          <svg:g
+            ngx-charts-area-series
+            [xScale]="timelineXScale"
+            [yScale]="timelineYScale"
+            [baseValue]="baseValue"
+            [colors]="colors"
+            [data]="series"
+            [scaleType]="scaleType"
+            [gradient]="gradient"
+            [curve]="curve"
+            [animations]="animations"
+          />
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], baseValue: [{
+            type: Input
+        }], autoScale: [{
+            type: Input
+        }], timeline: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], curve: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], hideCircles: [{
+            type: HostListener,
+            args: ['mouseleave']
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], xScaleMin: [{
+            type: Input
+        }], xScaleMax: [{
+            type: Input
+        }], yScaleMin: [{
+            type: Input
+        }], yScaleMax: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }], seriesTooltipTemplate: [{
+            type: ContentChild,
+            args: ['seriesTooltipTemplate']
+        }] }); })();
+
+class AreaChartNormalizedComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.showXAxisLabel = false;
+        this.showYAxisLabel = false;
+        this.showGridLines = true;
+        this.curve = curveLinear;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.roundDomains = false;
+        this.tooltipDisabled = false;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.yDomain = [0, 100];
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.seriesType = SeriesType;
+        this.timelineHeight = 50;
+        this.timelinePadding = 10;
+        this.trackBy = (index, item) => {
+            return item.name;
+        };
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        if (this.timeline) {
+            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;
+        }
+        this.xDomain = this.getXDomain();
+        if (this.filteredDomain) {
+            this.xDomain = this.filteredDomain;
+        }
+        this.seriesDomain = this.getSeriesDomain();
+        this.xScale = this.getXScale(this.xDomain, this.dims.width);
+        this.yScale = this.getYScale(this.yDomain, this.dims.height);
+        for (let i = 0; i < this.xSet.length; i++) {
+            const val = this.xSet[i];
+            let d0 = 0;
+            let total = 0;
+            for (const group of this.results) {
+                const d = group.series.find(item => {
+                    let a = item.name;
+                    let b = val;
+                    if (this.scaleType === ScaleType.Time) {
+                        a = a.valueOf();
+                        b = b.valueOf();
+                    }
+                    return a === b;
+                });
+                if (d) {
+                    total += d.value;
+                }
+            }
+            for (const group of this.results) {
+                let d = group.series.find(item => {
+                    let a = item.name;
+                    let b = val;
+                    if (this.scaleType === ScaleType.Time) {
+                        a = a.valueOf();
+                        b = b.valueOf();
+                    }
+                    return a === b;
+                });
+                if (d) {
+                    d.d0 = d0;
+                    d.d1 = d0 + d.value;
+                    d0 += d.value;
+                }
+                else {
+                    d = {
+                        name: val,
+                        value: 0,
+                        d0,
+                        d1: d0
+                    };
+                    group.series.push(d);
+                }
+                if (total > 0) {
+                    d.d0 = (d.d0 * 100) / total;
+                    d.d1 = (d.d1 * 100) / total;
+                }
+                else {
+                    d.d0 = 0;
+                    d.d1 = 0;
+                }
+            }
+        }
+        this.updateTimeline();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+        this.clipPathId = 'clip' + id().toString();
+        this.clipPath = `url(#${this.clipPathId})`;
+    }
+    updateTimeline() {
+        if (this.timeline) {
+            this.timelineWidth = this.dims.width;
+            this.timelineXDomain = this.getXDomain();
+            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);
+            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);
+            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;
+        }
+    }
+    getXDomain() {
+        let values = getUniqueXDomainValues(this.results);
+        this.scaleType = getScaleType(values);
+        let domain = [];
+        if (this.scaleType === ScaleType.Time) {
+            const min = Math.min(...values);
+            const max = Math.max(...values);
+            domain = [new Date(min), new Date(max)];
+            this.xSet = [...values].sort((a, b) => {
+                const aDate = a.getTime();
+                const bDate = b.getTime();
+                if (aDate > bDate)
+                    return 1;
+                if (bDate > aDate)
+                    return -1;
+                return 0;
+            });
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            values = values.map(v => Number(v));
+            const min = Math.min(...values);
+            const max = Math.max(...values);
+            domain = [min, max];
+            // Use compare function to sort numbers numerically
+            this.xSet = [...values].sort((a, b) => a - b);
+        }
+        else {
+            domain = values;
+            this.xSet = values;
+        }
+        return domain;
+    }
+    getSeriesDomain() {
+        return this.results.map(d => d.name);
+    }
+    getXScale(domain, width) {
+        let scale;
+        if (this.scaleType === ScaleType.Time) {
+            scale = scaleTime();
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            scale = scaleLinear();
+        }
+        else if (this.scaleType === ScaleType.Ordinal) {
+            scale = scalePoint().padding(0.1);
+        }
+        scale.range([0, width]).domain(domain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    getYScale(domain, height) {
+        const scale = scaleLinear().range([height, 0]).domain(domain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    updateDomain(domain) {
+        this.filteredDomain = domain;
+        this.xDomain = this.filteredDomain;
+        this.xScale = this.getXScale(this.xDomain, this.dims.width);
+    }
+    updateHoveredVertical(item) {
+        this.hoveredVertical = item.value;
+        this.deactivateAll();
+    }
+    hideCircles() {
+        this.hoveredVertical = null;
+        this.deactivateAll();
+    }
+    onClick(data, series) {
+        if (series) {
+            data.series = series.name;
+        }
+        this.select.emit(data);
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.seriesDomain;
+        }
+        else {
+            domain = this.yDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.seriesDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.yDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item, ...this.activeEntries];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+    deactivateAll() {
+        this.activeEntries = [...this.activeEntries];
+        for (const entry of this.activeEntries) {
+            this.deactivate.emit({ value: entry, entries: [] });
+        }
+        this.activeEntries = [];
+    }
+}
+AreaChartNormalizedComponent.ɵfac = function AreaChartNormalizedComponent_Factory(t) { return ɵAreaChartNormalizedComponent_BaseFactory(t || AreaChartNormalizedComponent); };
+AreaChartNormalizedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AreaChartNormalizedComponent, selectors: [["ngx-charts-area-chart-normalized"]], contentQueries: function AreaChartNormalizedComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);
+    } }, hostBindings: function AreaChartNormalizedComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("mouseleave", function AreaChartNormalizedComponent_mouseleave_HostBindingHandler() { return ctx.hideCircles(); });
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", showGridLines: "showGridLines", curve: "curve", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", roundDomains: "roundDomains", tooltipDisabled: "tooltipDisabled", xAxis: "xAxis", yAxis: "yAxis", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", timeline: "timeline", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 20, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "area-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "mouseleave", 4, "ngIf"], ["ngx-charts-timeline", "", 3, "results", "view", "height", "scheme", "customColors", "legend", "scaleType", "onDomainChange", 4, "ngIf"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-area-series", "", 3, "xScale", "yScale", "colors", "data", "scaleType", "activeEntries", "gradient", "normalized", "curve", "animations"], [3, "mouseleave"], ["ngx-charts-tooltip-area", "", 3, "dims", "xSet", "xScale", "yScale", "results", "colors", "showPercentage", "tooltipDisabled", "tooltipTemplate", "hover"], [4, "ngFor", "ngForOf"], ["ngx-charts-circle-series", "", 3, "type", "xScale", "yScale", "colors", "activeEntries", "data", "scaleType", "visibleValue", "tooltipDisabled", "tooltipTemplate", "select", "activate", "deactivate"], ["ngx-charts-timeline", "", 3, "results", "view", "height", "scheme", "customColors", "legend", "scaleType", "onDomainChange"], ["ngx-charts-area-series", "", 3, "xScale", "yScale", "colors", "data", "scaleType", "gradient", "normalized", "curve", "animations"]], template: function AreaChartNormalizedComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event); })("legendLabelDeactivate", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "defs");
+        ɵngcc0.ɵɵelementStart(2, "clipPath");
+        ɵngcc0.ɵɵelement(3, "rect");
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(4, "g", 1);
+        ɵngcc0.ɵɵtemplate(5, AreaChartNormalizedComponent__svg_g_5_Template, 1, 10, "g", 2);
+        ɵngcc0.ɵɵtemplate(6, AreaChartNormalizedComponent__svg_g_6_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵelementStart(7, "g");
+        ɵngcc0.ɵɵtemplate(8, AreaChartNormalizedComponent__svg_g_8_Template, 2, 10, "g", 4);
+        ɵngcc0.ɵɵtemplate(9, AreaChartNormalizedComponent__svg_g_9_Template, 3, 10, "g", 5);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(10, AreaChartNormalizedComponent__svg_g_10_Template, 2, 13, "g", 6);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵattribute("id", ctx.clipPathId);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("width", ctx.dims.width + 10)("height", ctx.dims.height + 10)("transform", "translate(-5, -5)");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("clip-path", ctx.clipPath);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", !ctx.tooltipDisabled);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.timeline && ctx.scaleType != "ordinal");
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline]; }, styles: [_c24], encapsulation: 2, changeDetection: 0 });
+AreaChartNormalizedComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    timeline: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    curve: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }],
+    seriesTooltipTemplate: [{ type: ContentChild, args: ['seriesTooltipTemplate',] }],
+    hideCircles: [{ type: HostListener, args: ['mouseleave',] }]
+};
+const ɵAreaChartNormalizedComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AreaChartNormalizedComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AreaChartNormalizedComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-area-chart-normalized',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelClick)="onClick($event)"
+      (legendLabelActivate)="onActivate($event)"
+      (legendLabelDeactivate)="onDeactivate($event)"
+    >
+      <svg:defs>
+        <svg:clipPath [attr.id]="clipPathId">
+          <svg:rect
+            [attr.width]="dims.width + 10"
+            [attr.height]="dims.height + 10"
+            [attr.transform]="'translate(-5, -5)'"
+          />
+        </svg:clipPath>
+      </svg:defs>
+      <svg:g [attr.transform]="transform" class="area-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g [attr.clip-path]="clipPath">
+          <svg:g *ngFor="let series of results; trackBy: trackBy">
+            <svg:g
+              ngx-charts-area-series
+              [xScale]="xScale"
+              [yScale]="yScale"
+              [colors]="colors"
+              [data]="series"
+              [scaleType]="scaleType"
+              [activeEntries]="activeEntries"
+              [gradient]="gradient"
+              [normalized]="true"
+              [curve]="curve"
+              [animations]="animations"
+            />
+          </svg:g>
+
+          <svg:g *ngIf="!tooltipDisabled" (mouseleave)="hideCircles()">
+            <svg:g
+              ngx-charts-tooltip-area
+              [dims]="dims"
+              [xSet]="xSet"
+              [xScale]="xScale"
+              [yScale]="yScale"
+              [results]="results"
+              [colors]="colors"
+              [showPercentage]="true"
+              [tooltipDisabled]="tooltipDisabled"
+              [tooltipTemplate]="seriesTooltipTemplate"
+              (hover)="updateHoveredVertical($event)"
+            />
+
+            <svg:g *ngFor="let series of results">
+              <svg:g
+                ngx-charts-circle-series
+                [type]="seriesType.Stacked"
+                [xScale]="xScale"
+                [yScale]="yScale"
+                [colors]="colors"
+                [activeEntries]="activeEntries"
+                [data]="series"
+                [scaleType]="scaleType"
+                [visibleValue]="hoveredVertical"
+                [tooltipDisabled]="tooltipDisabled"
+                [tooltipTemplate]="tooltipTemplate"
+                (select)="onClick($event, series)"
+                (activate)="onActivate($event)"
+                (deactivate)="onDeactivate($event)"
+              />
+            </svg:g>
+          </svg:g>
+        </svg:g>
+      </svg:g>
+      <svg:g
+        ngx-charts-timeline
+        *ngIf="timeline && scaleType != 'ordinal'"
+        [attr.transform]="timelineTransform"
+        [results]="results"
+        [view]="[timelineWidth, height]"
+        [height]="timelineHeight"
+        [scheme]="scheme"
+        [customColors]="customColors"
+        [legend]="legend"
+        [scaleType]="scaleType"
+        (onDomainChange)="updateDomain($event)"
+      >
+        <svg:g *ngFor="let series of results; trackBy: trackBy">
+          <svg:g
+            ngx-charts-area-series
+            [xScale]="timelineXScale"
+            [yScale]="timelineYScale"
+            [colors]="colors"
+            [data]="series"
+            [scaleType]="scaleType"
+            [gradient]="gradient"
+            [normalized]="true"
+            [curve]="curve"
+            [animations]="animations"
+          />
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], curve: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], hideCircles: [{
+            type: HostListener,
+            args: ['mouseleave']
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], timeline: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }], seriesTooltipTemplate: [{
+            type: ContentChild,
+            args: ['seriesTooltipTemplate']
+        }] }); })();
+
+class AreaChartStackedComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.xAxis = false;
+        this.yAxis = false;
+        this.timeline = false;
+        this.showGridLines = true;
+        this.curve = curveLinear;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.roundDomains = false;
+        this.tooltipDisabled = false;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.timelineHeight = 50;
+        this.timelinePadding = 10;
+        this.seriesType = SeriesType;
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        if (this.timeline) {
+            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;
+        }
+        this.xDomain = this.getXDomain();
+        if (this.filteredDomain) {
+            this.xDomain = this.filteredDomain;
+        }
+        this.yDomain = this.getYDomain();
+        this.seriesDomain = this.getSeriesDomain();
+        this.xScale = this.getXScale(this.xDomain, this.dims.width);
+        this.yScale = this.getYScale(this.yDomain, this.dims.height);
+        for (let i = 0; i < this.xSet.length; i++) {
+            const val = this.xSet[i];
+            let d0 = 0;
+            for (const group of this.results) {
+                let d = group.series.find(item => {
+                    let a = item.name;
+                    let b = val;
+                    if (this.scaleType === ScaleType.Time) {
+                        a = a.valueOf();
+                        b = b.valueOf();
+                    }
+                    return a === b;
+                });
+                if (d) {
+                    d.d0 = d0;
+                    d.d1 = d0 + d.value;
+                    d0 += d.value;
+                }
+                else {
+                    d = {
+                        name: val,
+                        value: 0,
+                        d0,
+                        d1: d0
+                    };
+                    group.series.push(d);
+                }
+            }
+        }
+        this.updateTimeline();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+        this.clipPathId = 'clip' + id().toString();
+        this.clipPath = `url(#${this.clipPathId})`;
+    }
+    updateTimeline() {
+        if (this.timeline) {
+            this.timelineWidth = this.dims.width;
+            this.timelineXDomain = this.getXDomain();
+            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);
+            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);
+            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;
+        }
+    }
+    getXDomain() {
+        let values = getUniqueXDomainValues(this.results);
+        this.scaleType = getScaleType(values);
+        let domain = [];
+        if (this.scaleType === ScaleType.Linear) {
+            values = values.map(v => Number(v));
+        }
+        let min;
+        let max;
+        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {
+            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);
+            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);
+        }
+        if (this.scaleType === ScaleType.Time) {
+            domain = [new Date(min), new Date(max)];
+            this.xSet = [...values].sort((a, b) => {
+                const aDate = a.getTime();
+                const bDate = b.getTime();
+                if (aDate > bDate)
+                    return 1;
+                if (bDate > aDate)
+                    return -1;
+                return 0;
+            });
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            domain = [min, max];
+            // Use compare function to sort numbers numerically
+            this.xSet = [...values].sort((a, b) => a - b);
+        }
+        else {
+            domain = values;
+            this.xSet = values;
+        }
+        return domain;
+    }
+    getYDomain() {
+        const domain = [];
+        for (let i = 0; i < this.xSet.length; i++) {
+            const val = this.xSet[i];
+            let sum = 0;
+            for (const group of this.results) {
+                const d = group.series.find(item => {
+                    let a = item.name;
+                    let b = val;
+                    if (this.scaleType === ScaleType.Time) {
+                        a = a.valueOf();
+                        b = b.valueOf();
+                    }
+                    return a === b;
+                });
+                if (d) {
+                    sum += d.value;
+                }
+            }
+            domain.push(sum);
+        }
+        const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);
+        const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);
+        return [min, max];
+    }
+    getSeriesDomain() {
+        return this.results.map(d => d.name);
+    }
+    getXScale(domain, width) {
+        let scale;
+        if (this.scaleType === ScaleType.Time) {
+            scale = scaleTime();
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            scale = scaleLinear();
+        }
+        else if (this.scaleType === ScaleType.Ordinal) {
+            scale = scalePoint().padding(0.1);
+        }
+        scale.range([0, width]).domain(domain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    getYScale(domain, height) {
+        const scale = scaleLinear().range([height, 0]).domain(domain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    updateDomain(domain) {
+        this.filteredDomain = domain;
+        this.xDomain = this.filteredDomain;
+        this.xScale = this.getXScale(this.xDomain, this.dims.width);
+    }
+    updateHoveredVertical(item) {
+        this.hoveredVertical = item.value;
+        this.deactivateAll();
+    }
+    hideCircles() {
+        this.hoveredVertical = null;
+        this.deactivateAll();
+    }
+    onClick(data, series) {
+        if (series) {
+            data.series = series.name;
+        }
+        this.select.emit(data);
+    }
+    trackBy(index, item) {
+        return `${item.name}`;
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.seriesDomain;
+        }
+        else {
+            domain = this.yDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.seriesDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.yDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item, ...this.activeEntries];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+    deactivateAll() {
+        this.activeEntries = [...this.activeEntries];
+        for (const entry of this.activeEntries) {
+            this.deactivate.emit({ value: entry, entries: [] });
+        }
+        this.activeEntries = [];
+    }
+}
+AreaChartStackedComponent.ɵfac = function AreaChartStackedComponent_Factory(t) { return ɵAreaChartStackedComponent_BaseFactory(t || AreaChartStackedComponent); };
+AreaChartStackedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AreaChartStackedComponent, selectors: [["ngx-charts-area-chart-stacked"]], contentQueries: function AreaChartStackedComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);
+    } }, hostBindings: function AreaChartStackedComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("mouseleave", function AreaChartStackedComponent_mouseleave_HostBindingHandler() { return ctx.hideCircles(); });
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", xAxis: "xAxis", yAxis: "yAxis", timeline: "timeline", showGridLines: "showGridLines", curve: "curve", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", roundDomains: "roundDomains", tooltipDisabled: "tooltipDisabled", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", xScaleMin: "xScaleMin", xScaleMax: "xScaleMax", yScaleMin: "yScaleMin", yScaleMax: "yScaleMax" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 20, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "area-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "mouseleave", 4, "ngIf"], ["ngx-charts-timeline", "", 3, "results", "view", "height", "scheme", "customColors", "legend", "scaleType", "onDomainChange", 4, "ngIf"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-area-series", "", 3, "xScale", "yScale", "colors", "data", "scaleType", "gradient", "activeEntries", "stacked", "curve", "animations"], [3, "mouseleave"], ["ngx-charts-tooltip-area", "", 3, "dims", "xSet", "xScale", "yScale", "results", "colors", "tooltipDisabled", "tooltipTemplate", "hover"], ["ngx-charts-circle-series", "", 3, "type", "xScale", "yScale", "colors", "activeEntries", "data", "scaleType", "visibleValue", "tooltipDisabled", "tooltipTemplate", "select", "activate", "deactivate"], ["ngx-charts-timeline", "", 3, "results", "view", "height", "scheme", "customColors", "legend", "scaleType", "onDomainChange"], ["ngx-charts-area-series", "", 3, "xScale", "yScale", "colors", "data", "scaleType", "gradient", "stacked", "curve", "animations"]], template: function AreaChartStackedComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event); })("legendLabelDeactivate", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "defs");
+        ɵngcc0.ɵɵelementStart(2, "clipPath");
+        ɵngcc0.ɵɵelement(3, "rect");
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(4, "g", 1);
+        ɵngcc0.ɵɵtemplate(5, AreaChartStackedComponent__svg_g_5_Template, 1, 10, "g", 2);
+        ɵngcc0.ɵɵtemplate(6, AreaChartStackedComponent__svg_g_6_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵelementStart(7, "g");
+        ɵngcc0.ɵɵtemplate(8, AreaChartStackedComponent__svg_g_8_Template, 2, 10, "g", 4);
+        ɵngcc0.ɵɵtemplate(9, AreaChartStackedComponent__svg_g_9_Template, 3, 10, "g", 5);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(10, AreaChartStackedComponent__svg_g_10_Template, 2, 13, "g", 6);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵattribute("id", ctx.clipPathId);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("width", ctx.dims.width + 10)("height", ctx.dims.height + 10)("transform", "translate(-5, -5)");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("clip-path", ctx.clipPath);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", !ctx.tooltipDisabled);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.timeline && ctx.scaleType != "ordinal");
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline]; }, styles: [_c24], encapsulation: 2, changeDetection: 0 });
+AreaChartStackedComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    timeline: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    curve: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    xScaleMin: [{ type: Input }],
+    xScaleMax: [{ type: Input }],
+    yScaleMin: [{ type: Input }],
+    yScaleMax: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }],
+    seriesTooltipTemplate: [{ type: ContentChild, args: ['seriesTooltipTemplate',] }],
+    hideCircles: [{ type: HostListener, args: ['mouseleave',] }]
+};
+const ɵAreaChartStackedComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AreaChartStackedComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AreaChartStackedComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-area-chart-stacked',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelClick)="onClick($event)"
+      (legendLabelActivate)="onActivate($event)"
+      (legendLabelDeactivate)="onDeactivate($event)"
+    >
+      <svg:defs>
+        <svg:clipPath [attr.id]="clipPathId">
+          <svg:rect
+            [attr.width]="dims.width + 10"
+            [attr.height]="dims.height + 10"
+            [attr.transform]="'translate(-5, -5)'"
+          />
+        </svg:clipPath>
+      </svg:defs>
+      <svg:g [attr.transform]="transform" class="area-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g [attr.clip-path]="clipPath">
+          <svg:g *ngFor="let series of results; trackBy: trackBy">
+            <svg:g
+              ngx-charts-area-series
+              [xScale]="xScale"
+              [yScale]="yScale"
+              [colors]="colors"
+              [data]="series"
+              [scaleType]="scaleType"
+              [gradient]="gradient"
+              [activeEntries]="activeEntries"
+              [stacked]="true"
+              [curve]="curve"
+              [animations]="animations"
+            />
+          </svg:g>
+
+          <svg:g *ngIf="!tooltipDisabled" (mouseleave)="hideCircles()">
+            <svg:g
+              ngx-charts-tooltip-area
+              [dims]="dims"
+              [xSet]="xSet"
+              [xScale]="xScale"
+              [yScale]="yScale"
+              [results]="results"
+              [colors]="colors"
+              [tooltipDisabled]="tooltipDisabled"
+              [tooltipTemplate]="seriesTooltipTemplate"
+              (hover)="updateHoveredVertical($event)"
+            />
+
+            <svg:g *ngFor="let series of results; trackBy: trackBy">
+              <svg:g
+                ngx-charts-circle-series
+                [type]="seriesType.Stacked"
+                [xScale]="xScale"
+                [yScale]="yScale"
+                [colors]="colors"
+                [activeEntries]="activeEntries"
+                [data]="series"
+                [scaleType]="scaleType"
+                [visibleValue]="hoveredVertical"
+                [tooltipDisabled]="tooltipDisabled"
+                [tooltipTemplate]="tooltipTemplate"
+                (select)="onClick($event, series)"
+                (activate)="onActivate($event)"
+                (deactivate)="onDeactivate($event)"
+              />
+            </svg:g>
+          </svg:g>
+        </svg:g>
+      </svg:g>
+      <svg:g
+        ngx-charts-timeline
+        *ngIf="timeline && scaleType != 'ordinal'"
+        [attr.transform]="timelineTransform"
+        [results]="results"
+        [view]="[timelineWidth, height]"
+        [height]="timelineHeight"
+        [scheme]="scheme"
+        [customColors]="customColors"
+        [legend]="legend"
+        [scaleType]="scaleType"
+        (onDomainChange)="updateDomain($event)"
+      >
+        <svg:g *ngFor="let series of results; trackBy: trackBy">
+          <svg:g
+            ngx-charts-area-series
+            [xScale]="timelineXScale"
+            [yScale]="timelineYScale"
+            [colors]="colors"
+            [data]="series"
+            [scaleType]="scaleType"
+            [gradient]="gradient"
+            [stacked]="true"
+            [curve]="curve"
+            [animations]="animations"
+          />
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], timeline: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], curve: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], hideCircles: [{
+            type: HostListener,
+            args: ['mouseleave']
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], xScaleMin: [{
+            type: Input
+        }], xScaleMax: [{
+            type: Input
+        }], yScaleMin: [{
+            type: Input
+        }], yScaleMax: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }], seriesTooltipTemplate: [{
+            type: ContentChild,
+            args: ['seriesTooltipTemplate']
+        }] }); })();
+
+function sortLinear(data, property, direction = 'asc') {
+    return data.sort((a, b) => {
+        if (direction === 'asc') {
+            return a[property] - b[property];
+        }
+        else {
+            return b[property] - a[property];
+        }
+    });
+}
+function sortByDomain(data, property, direction = 'asc', domain) {
+    return data.sort((a, b) => {
+        const aVal = a[property];
+        const bVal = b[property];
+        const aIdx = domain.indexOf(aVal);
+        const bIdx = domain.indexOf(bVal);
+        if (direction === 'asc') {
+            return aIdx - bIdx;
+        }
+        else {
+            return bIdx - aIdx;
+        }
+    });
+}
+function sortByTime(data, property, direction = 'asc') {
+    return data.sort((a, b) => {
+        const aDate = a[property].getTime();
+        const bDate = b[property].getTime();
+        if (direction === 'asc') {
+            if (aDate > bDate)
+                return 1;
+            if (bDate > aDate)
+                return -1;
+            return 0;
+        }
+        else {
+            if (aDate > bDate)
+                return -1;
+            if (bDate > aDate)
+                return 1;
+            return 0;
+        }
+    });
+}
+
+class AreaSeriesComponent {
+    constructor() {
+        this.baseValue = 'auto';
+        this.stacked = false;
+        this.normalized = false;
+        this.animations = true;
+        this.select = new EventEmitter();
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.updateGradient();
+        let currentArea;
+        let startingArea;
+        const xProperty = d => {
+            const label = d.name;
+            return this.xScale(label);
+        };
+        if (this.stacked || this.normalized) {
+            currentArea = area()
+                .x(xProperty)
+                .y0((d, i) => this.yScale(d.d0))
+                .y1((d, i) => this.yScale(d.d1));
+            startingArea = area()
+                .x(xProperty)
+                .y0(d => this.yScale.range()[0])
+                .y1(d => this.yScale.range()[0]);
+        }
+        else {
+            currentArea = area()
+                .x(xProperty)
+                .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))
+                .y1(d => this.yScale(d.value));
+            startingArea = area()
+                .x(xProperty)
+                .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))
+                .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));
+        }
+        currentArea.curve(this.curve);
+        startingArea.curve(this.curve);
+        this.opacity = 0.8;
+        let data = this.data.series;
+        if (this.scaleType === ScaleType.Linear) {
+            data = sortLinear(data, 'name');
+        }
+        else if (this.scaleType === ScaleType.Time) {
+            data = sortByTime(data, 'name');
+        }
+        else {
+            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());
+        }
+        this.path = currentArea(data);
+        this.startingPath = startingArea(data);
+    }
+    updateGradient() {
+        if (this.colors.scaleType === ScaleType.Linear) {
+            this.hasGradient = true;
+            if (this.stacked || this.normalized) {
+                const d0values = this.data.series.map(d => d.d0);
+                const d1values = this.data.series.map(d => d.d1);
+                const max = Math.max(...d1values);
+                const min = Math.min(...d0values);
+                this.gradientStops = this.colors.getLinearGradientStops(max, min);
+            }
+            else {
+                const values = this.data.series.map(d => d.value);
+                const max = Math.max(...values);
+                this.gradientStops = this.colors.getLinearGradientStops(max);
+            }
+        }
+        else {
+            this.hasGradient = false;
+            this.gradientStops = undefined;
+        }
+    }
+    isActive(entry) {
+        if (!this.activeEntries)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.name === d.name;
+        });
+        return item !== undefined;
+    }
+    isInactive(entry) {
+        if (!this.activeEntries || this.activeEntries.length === 0)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.name === d.name;
+        });
+        return item === undefined;
+    }
+}
+AreaSeriesComponent.ɵfac = function AreaSeriesComponent_Factory(t) { return new (t || AreaSeriesComponent)(); };
+AreaSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AreaSeriesComponent, selectors: [["g", "ngx-charts-area-series", ""]], inputs: { baseValue: "baseValue", stacked: "stacked", normalized: "normalized", animations: "animations", data: "data", xScale: "xScale", yScale: "yScale", colors: "colors", scaleType: "scaleType", gradient: "gradient", curve: "curve", activeEntries: "activeEntries" }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c25, decls: 1, vars: 12, consts: [["ngx-charts-area", "", 1, "area-series", 3, "data", "path", "fill", "stops", "startingPath", "opacity", "gradient", "animations"]], template: function AreaSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelement(0, "g", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵclassProp("active", ctx.isActive(ctx.data))("inactive", ctx.isInactive(ctx.data));
+        ɵngcc0.ɵɵproperty("data", ctx.data)("path", ctx.path)("fill", ctx.colors.getColor(ctx.data.name))("stops", ctx.gradientStops)("startingPath", ctx.startingPath)("opacity", ctx.opacity)("gradient", ctx.gradient || ctx.hasGradient)("animations", ctx.animations);
+    } }, directives: [AreaComponent], encapsulation: 2, changeDetection: 0 });
+AreaSeriesComponent.propDecorators = {
+    data: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    baseValue: [{ type: Input }],
+    colors: [{ type: Input }],
+    scaleType: [{ type: Input }],
+    stacked: [{ type: Input }],
+    normalized: [{ type: Input }],
+    gradient: [{ type: Input }],
+    curve: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AreaSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-area-series]',
+                template: `
+    <svg:g
+      ngx-charts-area
+      class="area-series"
+      [data]="data"
+      [path]="path"
+      [fill]="colors.getColor(data.name)"
+      [stops]="gradientStops"
+      [startingPath]="startingPath"
+      [opacity]="opacity"
+      [gradient]="gradient || hasGradient"
+      [animations]="animations"
+      [class.active]="isActive(data)"
+      [class.inactive]="isInactive(data)"
+    />
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { baseValue: [{
+            type: Input
+        }], stacked: [{
+            type: Input
+        }], normalized: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], data: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], scaleType: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], curve: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }] }); })();
+
+class AreaChartModule {
+}
+AreaChartModule.ɵfac = function AreaChartModule_Factory(t) { return new (t || AreaChartModule)(); };
+AreaChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AreaChartModule });
+AreaChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AreaChartModule, { declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent], imports: [ChartCommonModule], exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AreaChartModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule],
+                declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],
+                exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]
+            }]
+    }], null, null); })();
+
+class BarComponent {
+    constructor(element) {
+        this.roundEdges = true;
+        this.gradient = false;
+        this.offset = 0;
+        this.isActive = false;
+        this.animations = true;
+        this.noBarWhenZero = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.hasGradient = false;
+        this.hideBar = false;
+        this.element = element.nativeElement;
+    }
+    ngOnChanges(changes) {
+        if (changes.roundEdges) {
+            this.loadAnimation();
+        }
+        this.update();
+    }
+    update() {
+        this.gradientId = 'grad' + id().toString();
+        this.gradientFill = `url(#${this.gradientId})`;
+        if (this.gradient || this.stops) {
+            this.gradientStops = this.getGradient();
+            this.hasGradient = true;
+        }
+        else {
+            this.hasGradient = false;
+        }
+        this.updatePathEl();
+        this.checkToHideBar();
+    }
+    loadAnimation() {
+        this.path = this.getStartingPath();
+        setTimeout(this.update.bind(this), 100);
+    }
+    updatePathEl() {
+        const node = select(this.element).select('.bar');
+        const path = this.getPath();
+        if (this.animations) {
+            node.transition().duration(500).attr('d', path);
+        }
+        else {
+            node.attr('d', path);
+        }
+    }
+    getGradient() {
+        if (this.stops) {
+            return this.stops;
+        }
+        return [
+            {
+                offset: 0,
+                color: this.fill,
+                opacity: this.getStartOpacity()
+            },
+            {
+                offset: 100,
+                color: this.fill,
+                opacity: 1
+            }
+        ];
+    }
+    getStartingPath() {
+        if (!this.animations) {
+            return this.getPath();
+        }
+        let radius = this.getRadius();
+        let path;
+        if (this.roundEdges) {
+            if (this.orientation === BarOrientation.Vertical) {
+                radius = Math.min(this.height, radius);
+                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);
+            }
+            else if (this.orientation === BarOrientation.Horizontal) {
+                radius = Math.min(this.width, radius);
+                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);
+            }
+        }
+        else {
+            if (this.orientation === BarOrientation.Vertical) {
+                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);
+            }
+            else if (this.orientation === BarOrientation.Horizontal) {
+                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);
+            }
+        }
+        return path;
+    }
+    getPath() {
+        let radius = this.getRadius();
+        let path;
+        if (this.roundEdges) {
+            if (this.orientation === BarOrientation.Vertical) {
+                radius = Math.min(this.height, radius);
+                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);
+            }
+            else if (this.orientation === BarOrientation.Horizontal) {
+                radius = Math.min(this.width, radius);
+                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);
+            }
+        }
+        else {
+            path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);
+        }
+        return path;
+    }
+    getRadius() {
+        let radius = 0;
+        if (this.roundEdges && this.height > 5 && this.width > 5) {
+            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));
+        }
+        return radius;
+    }
+    getStartOpacity() {
+        if (this.roundEdges) {
+            return 0.2;
+        }
+        else {
+            return 0.5;
+        }
+    }
+    get edges() {
+        let edges = [false, false, false, false];
+        if (this.roundEdges) {
+            if (this.orientation === BarOrientation.Vertical) {
+                if (this.data.value > 0) {
+                    edges = [true, true, false, false];
+                }
+                else {
+                    edges = [false, false, true, true];
+                }
+            }
+            else if (this.orientation === BarOrientation.Horizontal) {
+                if (this.data.value > 0) {
+                    edges = [false, true, false, true];
+                }
+                else {
+                    edges = [true, false, true, false];
+                }
+            }
+        }
+        return edges;
+    }
+    onMouseEnter() {
+        this.activate.emit(this.data);
+    }
+    onMouseLeave() {
+        this.deactivate.emit(this.data);
+    }
+    checkToHideBar() {
+        this.hideBar =
+            this.noBarWhenZero &&
+                ((this.orientation === BarOrientation.Vertical && this.height === 0) ||
+                    (this.orientation === BarOrientation.Horizontal && this.width === 0));
+    }
+}
+BarComponent.ɵfac = function BarComponent_Factory(t) { return new (t || BarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
+BarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BarComponent, selectors: [["g", "ngx-charts-bar", ""]], hostBindings: function BarComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("mouseenter", function BarComponent_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function BarComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
+    } }, inputs: { roundEdges: "roundEdges", gradient: "gradient", offset: "offset", isActive: "isActive", animations: "animations", noBarWhenZero: "noBarWhenZero", fill: "fill", data: "data", width: "width", height: "height", x: "x", y: "y", orientation: "orientation", stops: "stops", ariaLabel: "ariaLabel" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c26, decls: 2, vars: 8, consts: [[4, "ngIf"], ["stroke", "none", "role", "img", "tabIndex", "-1", 1, "bar", 3, "click"], ["ngx-charts-svg-linear-gradient", "", 3, "orientation", "name", "stops"]], template: function BarComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, BarComponent__svg_defs_0_Template, 2, 3, "defs", 0);
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "path", 1);
+        ɵngcc0.ɵɵlistener("click", function BarComponent_Template__svg_path_click_1_listener() { return ctx.select.emit(ctx.data); });
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngIf", ctx.hasGradient);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵclassProp("active", ctx.isActive)("hidden", ctx.hideBar);
+        ɵngcc0.ɵɵattribute("d", ctx.path)("aria-label", ctx.ariaLabel)("fill", ctx.hasGradient ? ctx.gradientFill : ctx.fill);
+    } }, directives: [ɵngcc1.NgIf, SvgLinearGradientComponent], encapsulation: 2, changeDetection: 0 });
+BarComponent.ctorParameters = () => [
+    { type: ElementRef }
+];
+BarComponent.propDecorators = {
+    fill: [{ type: Input }],
+    data: [{ type: Input }],
+    width: [{ type: Input }],
+    height: [{ type: Input }],
+    x: [{ type: Input }],
+    y: [{ type: Input }],
+    orientation: [{ type: Input }],
+    roundEdges: [{ type: Input }],
+    gradient: [{ type: Input }],
+    offset: [{ type: Input }],
+    isActive: [{ type: Input }],
+    stops: [{ type: Input }],
+    animations: [{ type: Input }],
+    ariaLabel: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
+    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-bar]',
+                template: `
+    <svg:defs *ngIf="hasGradient">
+      <svg:g ngx-charts-svg-linear-gradient [orientation]="orientation" [name]="gradientId" [stops]="gradientStops" />
+    </svg:defs>
+    <svg:path
+      class="bar"
+      stroke="none"
+      role="img"
+      tabIndex="-1"
+      [class.active]="isActive"
+      [class.hidden]="hideBar"
+      [attr.d]="path"
+      [attr.aria-label]="ariaLabel"
+      [attr.fill]="hasGradient ? gradientFill : fill"
+      (click)="select.emit(data)"
+    />
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { roundEdges: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], offset: [{
+            type: Input
+        }], isActive: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], onMouseEnter: [{
+            type: HostListener,
+            args: ['mouseenter']
+        }], onMouseLeave: [{
+            type: HostListener,
+            args: ['mouseleave']
+        }], fill: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }], width: [{
+            type: Input
+        }], height: [{
+            type: Input
+        }], x: [{
+            type: Input
+        }], y: [{
+            type: Input
+        }], orientation: [{
+            type: Input
+        }], stops: [{
+            type: Input
+        }], ariaLabel: [{
+            type: Input
+        }] }); })();
+
+class BarHorizontalComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.tooltipDisabled = false;
+        this.showGridLines = true;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.barPadding = 8;
+        this.roundDomains = false;
+        this.roundEdges = true;
+        this.showDataLabel = false;
+        this.noBarWhenZero = true;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.dataLabelMaxWidth = { negative: 0, positive: 0 };
+    }
+    update() {
+        super.update();
+        if (!this.showDataLabel) {
+            this.dataLabelMaxWidth = { negative: 0, positive: 0 };
+        }
+        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        this.formatDates();
+        this.xScale = this.getXScale();
+        this.yScale = this.getYScale();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+    }
+    getXScale() {
+        this.xDomain = this.getXDomain();
+        const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    getYScale() {
+        this.yDomain = this.getYDomain();
+        const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);
+        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);
+    }
+    getXDomain() {
+        const values = this.results.map(d => d.value);
+        const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);
+        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);
+        return [min, max];
+    }
+    getYDomain() {
+        return this.results.map(d => d.label);
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.yDomain;
+        }
+        else {
+            domain = this.xDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === 'ordinal') {
+            opts.domain = this.yDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.xDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onDataLabelMaxWidthChanged(event) {
+        if (event.size.negative) {
+            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);
+        }
+        else {
+            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);
+        }
+        if (event.index === this.results.length - 1) {
+            setTimeout(() => this.update());
+        }
+    }
+    onActivate(item, fromLegend = false) {
+        item = this.results.find(d => {
+            if (fromLegend) {
+                return d.label === item.name;
+            }
+            else {
+                return d.name === item.name;
+            }
+        });
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value && d.series === item.series;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item, ...this.activeEntries];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item, fromLegend = false) {
+        item = this.results.find(d => {
+            if (fromLegend) {
+                return d.label === item.name;
+            }
+            else {
+                return d.name === item.name;
+            }
+        });
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value && d.series === item.series;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+BarHorizontalComponent.ɵfac = function BarHorizontalComponent_Factory(t) { return ɵBarHorizontalComponent_BaseFactory(t || BarHorizontalComponent); };
+BarHorizontalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BarHorizontalComponent, selectors: [["ngx-charts-bar-horizontal"]], contentQueries: function BarHorizontalComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", tooltipDisabled: "tooltipDisabled", showGridLines: "showGridLines", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", barPadding: "barPadding", roundDomains: "roundDomains", roundEdges: "roundEdges", showDataLabel: "showDataLabel", noBarWhenZero: "noBarWhenZero", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", xScaleMax: "xScaleMax", xScaleMin: "xScaleMin", dataLabelFormatting: "dataLabelFormatting" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 25, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "bar-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "yAxisOffset", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-series-horizontal", "", 3, "xScale", "yScale", "colors", "series", "dims", "gradient", "tooltipDisabled", "tooltipTemplate", "activeEntries", "roundEdges", "animations", "showDataLabel", "dataLabelFormatting", "noBarWhenZero", "select", "activate", "deactivate", "dataLabelWidthChanged"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "yAxisOffset", "dimensionsChanged"]], template: function BarHorizontalComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event, true); })("legendLabelDeactivate", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event, true); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵtemplate(2, BarHorizontalComponent__svg_g_2_Template, 1, 10, "g", 2);
+        ɵngcc0.ɵɵtemplate(3, BarHorizontalComponent__svg_g_3_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵelementStart(4, "g", 4);
+        ɵngcc0.ɵɵlistener("select", function BarHorizontalComponent_Template__svg_g_select_4_listener($event) { return ctx.onClick($event); })("activate", function BarHorizontalComponent_Template__svg_g_activate_4_listener($event) { return ctx.onActivate($event); })("deactivate", function BarHorizontalComponent_Template__svg_g_deactivate_4_listener($event) { return ctx.onDeactivate($event); })("dataLabelWidthChanged", function BarHorizontalComponent_Template__svg_g_dataLabelWidthChanged_4_listener($event) { return ctx.onDataLabelMaxWidthChanged($event); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(22, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("xScale", ctx.xScale)("yScale", ctx.yScale)("colors", ctx.colors)("series", ctx.results)("dims", ctx.dims)("gradient", ctx.gradient)("tooltipDisabled", ctx.tooltipDisabled)("tooltipTemplate", ctx.tooltipTemplate)("activeEntries", ctx.activeEntries)("roundEdges", ctx.roundEdges)("animations", ctx.animations)("showDataLabel", ctx.showDataLabel)("dataLabelFormatting", ctx.dataLabelFormatting)("noBarWhenZero", ctx.noBarWhenZero);
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, SeriesHorizontal, XAxisComponent, YAxisComponent]; }, styles: [_c24], encapsulation: 2, changeDetection: 0 });
+BarHorizontalComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    barPadding: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    roundEdges: [{ type: Input }],
+    xScaleMax: [{ type: Input }],
+    xScaleMin: [{ type: Input }],
+    showDataLabel: [{ type: Input }],
+    dataLabelFormatting: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵBarHorizontalComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BarHorizontalComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarHorizontalComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-bar-horizontal',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelClick)="onClick($event)"
+      (legendLabelActivate)="onActivate($event, true)"
+      (legendLabelDeactivate)="onDeactivate($event, true)"
+    >
+      <svg:g [attr.transform]="transform" class="bar-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          [yAxisOffset]="dataLabelMaxWidth.negative"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-series-horizontal
+          [xScale]="xScale"
+          [yScale]="yScale"
+          [colors]="colors"
+          [series]="results"
+          [dims]="dims"
+          [gradient]="gradient"
+          [tooltipDisabled]="tooltipDisabled"
+          [tooltipTemplate]="tooltipTemplate"
+          [activeEntries]="activeEntries"
+          [roundEdges]="roundEdges"
+          [animations]="animations"
+          [showDataLabel]="showDataLabel"
+          [dataLabelFormatting]="dataLabelFormatting"
+          [noBarWhenZero]="noBarWhenZero"
+          (select)="onClick($event)"
+          (activate)="onActivate($event)"
+          (deactivate)="onDeactivate($event)"
+          (dataLabelWidthChanged)="onDataLabelMaxWidthChanged($event)"
+        ></svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], barPadding: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], roundEdges: [{
+            type: Input
+        }], showDataLabel: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], xScaleMax: [{
+            type: Input
+        }], xScaleMin: [{
+            type: Input
+        }], dataLabelFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class BarHorizontal2DComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.tooltipDisabled = false;
+        this.showGridLines = true;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.groupPadding = 16;
+        this.barPadding = 8;
+        this.roundDomains = false;
+        this.roundEdges = true;
+        this.showDataLabel = false;
+        this.noBarWhenZero = true;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.dataLabelMaxWidth = { negative: 0, positive: 0 };
+        this.barOrientation = BarOrientation;
+        this.trackBy = (index, item) => {
+            return item.name;
+        };
+    }
+    update() {
+        super.update();
+        if (!this.showDataLabel) {
+            this.dataLabelMaxWidth = { negative: 0, positive: 0 };
+        }
+        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        this.formatDates();
+        this.groupDomain = this.getGroupDomain();
+        this.innerDomain = this.getInnerDomain();
+        this.valueDomain = this.getValueDomain();
+        this.groupScale = this.getGroupScale();
+        this.innerScale = this.getInnerScale();
+        this.valueScale = this.getValueScale();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+    }
+    getGroupScale() {
+        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);
+        return scaleBand()
+            .rangeRound([0, this.dims.height])
+            .paddingInner(spacing)
+            .paddingOuter(spacing / 2)
+            .domain(this.groupDomain);
+    }
+    getInnerScale() {
+        const height = this.groupScale.bandwidth();
+        const spacing = this.innerDomain.length / (height / this.barPadding + 1);
+        return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);
+    }
+    getValueScale() {
+        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    getGroupDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            if (!domain.includes(group.label)) {
+                domain.push(group.label);
+            }
+        }
+        return domain;
+    }
+    getInnerDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            for (const d of group.series) {
+                if (!domain.includes(d.label)) {
+                    domain.push(d.label);
+                }
+            }
+        }
+        return domain;
+    }
+    getValueDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            for (const d of group.series) {
+                if (!domain.includes(d.value)) {
+                    domain.push(d.value);
+                }
+            }
+        }
+        const min = Math.min(0, ...domain);
+        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);
+        return [min, max];
+    }
+    groupTransform(group) {
+        return `translate(0, ${this.groupScale(group.label)})`;
+    }
+    onClick(data, group) {
+        if (group) {
+            data.series = group.name;
+        }
+        this.select.emit(data);
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.innerDomain;
+        }
+        else {
+            domain = this.valueDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.innerDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.valueDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onDataLabelMaxWidthChanged(event, groupIndex) {
+        if (event.size.negative) {
+            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);
+        }
+        else {
+            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);
+        }
+        if (groupIndex === this.results.length - 1) {
+            setTimeout(() => this.update());
+        }
+    }
+    onActivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        const items = this.results
+            .map(g => g.series)
+            .flat()
+            .filter(i => {
+            if (fromLegend) {
+                return i.label === item.name;
+            }
+            else {
+                return i.name === item.name && i.series === item.series;
+            }
+        });
+        this.activeEntries = [...items];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        this.activeEntries = this.activeEntries.filter(i => {
+            if (fromLegend) {
+                return i.label !== item.name;
+            }
+            else {
+                return !(i.name === item.name && i.series === item.series);
+            }
+        });
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+BarHorizontal2DComponent.ɵfac = function BarHorizontal2DComponent_Factory(t) { return ɵBarHorizontal2DComponent_BaseFactory(t || BarHorizontal2DComponent); };
+BarHorizontal2DComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BarHorizontal2DComponent, selectors: [["ngx-charts-bar-horizontal-2d"]], contentQueries: function BarHorizontal2DComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", tooltipDisabled: "tooltipDisabled", showGridLines: "showGridLines", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", groupPadding: "groupPadding", barPadding: "barPadding", roundDomains: "roundDomains", roundEdges: "roundEdges", showDataLabel: "showDataLabel", noBarWhenZero: "noBarWhenZero", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", xScaleMax: "xScaleMax", dataLabelFormatting: "dataLabelFormatting" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 18, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelActivate", "legendLabelDeactivate", "legendLabelClick"], [1, "bar-chart", "chart"], ["ngx-charts-grid-panel-series", "", 3, "xScale", "yScale", "data", "dims", "orient"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "yAxisOffset", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "yAxisOffset", "dimensionsChanged"], ["ngx-charts-series-horizontal", "", 3, "xScale", "activeEntries", "yScale", "colors", "series", "dims", "gradient", "tooltipDisabled", "tooltipTemplate", "seriesName", "roundEdges", "animations", "showDataLabel", "dataLabelFormatting", "noBarWhenZero", "select", "activate", "deactivate", "dataLabelWidthChanged"]], template: function BarHorizontal2DComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelActivate", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event, undefined, true); })("legendLabelDeactivate", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event, undefined, true); })("legendLabelClick", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵelement(2, "g", 2);
+        ɵngcc0.ɵɵtemplate(3, BarHorizontal2DComponent__svg_g_3_Template, 1, 10, "g", 3);
+        ɵngcc0.ɵɵtemplate(4, BarHorizontal2DComponent__svg_g_4_Template, 1, 9, "g", 4);
+        ɵngcc0.ɵɵtemplate(5, BarHorizontal2DComponent__svg_g_5_Template, 2, 17, "g", 5);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(15, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("xScale", ctx.valueScale)("yScale", ctx.groupScale)("data", ctx.results)("dims", ctx.dims)("orient", ctx.barOrientation.Horizontal);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+    } }, directives: function () { return [ChartComponent, GridPanelSeriesComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesHorizontal]; }, styles: [_c24], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1,
+                        transform: '*'
+                    }),
+                    animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+BarHorizontal2DComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    groupPadding: [{ type: Input }],
+    barPadding: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    roundEdges: [{ type: Input }],
+    xScaleMax: [{ type: Input }],
+    showDataLabel: [{ type: Input }],
+    dataLabelFormatting: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵBarHorizontal2DComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BarHorizontal2DComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarHorizontal2DComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-bar-horizontal-2d',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelActivate)="onActivate($event, undefined, true)"
+      (legendLabelDeactivate)="onDeactivate($event, undefined, true)"
+      (legendLabelClick)="onClick($event)"
+    >
+      <svg:g [attr.transform]="transform" class="bar-chart chart">
+        <svg:g
+          ngx-charts-grid-panel-series
+          [xScale]="valueScale"
+          [yScale]="groupScale"
+          [data]="results"
+          [dims]="dims"
+          [orient]="barOrientation.Horizontal"
+        ></svg:g>
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="valueScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="groupScale"
+          [dims]="dims"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          [yAxisOffset]="dataLabelMaxWidth.negative"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g
+          *ngFor="let group of results; let index = index; trackBy: trackBy"
+          [@animationState]="'active'"
+          [attr.transform]="groupTransform(group)"
+        >
+          <svg:g
+            ngx-charts-series-horizontal
+            [xScale]="valueScale"
+            [activeEntries]="activeEntries"
+            [yScale]="innerScale"
+            [colors]="colors"
+            [series]="group.series"
+            [dims]="dims"
+            [gradient]="gradient"
+            [tooltipDisabled]="tooltipDisabled"
+            [tooltipTemplate]="tooltipTemplate"
+            [seriesName]="group.name"
+            [roundEdges]="roundEdges"
+            [animations]="animations"
+            [showDataLabel]="showDataLabel"
+            [dataLabelFormatting]="dataLabelFormatting"
+            [noBarWhenZero]="noBarWhenZero"
+            (select)="onClick($event, group)"
+            (activate)="onActivate($event, group)"
+            (deactivate)="onDeactivate($event, group)"
+            (dataLabelWidthChanged)="onDataLabelMaxWidthChanged($event, index)"
+          />
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1,
+                                transform: '*'
+                            }),
+                            animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                        ])
+                    ])
+                ],
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], groupPadding: [{
+            type: Input
+        }], barPadding: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], roundEdges: [{
+            type: Input
+        }], showDataLabel: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], xScaleMax: [{
+            type: Input
+        }], dataLabelFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+var BarChartType;
+(function (BarChartType) {
+    BarChartType["Standard"] = "standard";
+    BarChartType["Normalized"] = "normalized";
+    BarChartType["Stacked"] = "stacked";
+})(BarChartType || (BarChartType = {}));
+
+class BarHorizontalNormalizedComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.tooltipDisabled = false;
+        this.showGridLines = true;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.barPadding = 8;
+        this.roundDomains = false;
+        this.noBarWhenZero = true;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.valueDomain = [0, 100];
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.barChartType = BarChartType;
+        this.trackBy = (index, item) => {
+            return item.name;
+        };
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        this.formatDates();
+        this.groupDomain = this.getGroupDomain();
+        this.innerDomain = this.getInnerDomain();
+        this.xScale = this.getXScale();
+        this.yScale = this.getYScale();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+    }
+    getGroupDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            if (!domain.includes(group.label)) {
+                domain.push(group.label);
+            }
+        }
+        return domain;
+    }
+    getInnerDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            for (const d of group.series) {
+                if (!domain.includes(d.label)) {
+                    domain.push(d.label);
+                }
+            }
+        }
+        return domain;
+    }
+    getYScale() {
+        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);
+        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);
+    }
+    getXScale() {
+        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    groupTransform(group) {
+        return `translate(0, ${this.yScale(group.name)})`;
+    }
+    onClick(data, group) {
+        if (group) {
+            data.series = group.name;
+        }
+        this.select.emit(data);
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.innerDomain;
+        }
+        else {
+            domain = this.valueDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.innerDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.valueDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        const items = this.results
+            .map(g => g.series)
+            .flat()
+            .filter(i => {
+            if (fromLegend) {
+                return i.label === item.name;
+            }
+            else {
+                return i.name === item.name && i.series === item.series;
+            }
+        });
+        this.activeEntries = [...items];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        this.activeEntries = this.activeEntries.filter(i => {
+            if (fromLegend) {
+                return i.label !== item.name;
+            }
+            else {
+                return !(i.name === item.name && i.series === item.series);
+            }
+        });
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+BarHorizontalNormalizedComponent.ɵfac = function BarHorizontalNormalizedComponent_Factory(t) { return ɵBarHorizontalNormalizedComponent_BaseFactory(t || BarHorizontalNormalizedComponent); };
+BarHorizontalNormalizedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BarHorizontalNormalizedComponent, selectors: [["ngx-charts-bar-horizontal-normalized"]], contentQueries: function BarHorizontalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", tooltipDisabled: "tooltipDisabled", showGridLines: "showGridLines", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", barPadding: "barPadding", roundDomains: "roundDomains", noBarWhenZero: "noBarWhenZero", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 13, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelActivate", "legendLabelDeactivate", "legendLabelClick"], [1, "bar-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-series-horizontal", "", 3, "type", "xScale", "yScale", "activeEntries", "colors", "series", "dims", "gradient", "tooltipDisabled", "tooltipTemplate", "seriesName", "animations", "noBarWhenZero", "select", "activate", "deactivate"]], template: function BarHorizontalNormalizedComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelActivate", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event, undefined, true); })("legendLabelDeactivate", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event, undefined, true); })("legendLabelClick", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵtemplate(2, BarHorizontalNormalizedComponent__svg_g_2_Template, 1, 10, "g", 2);
+        ɵngcc0.ɵɵtemplate(3, BarHorizontalNormalizedComponent__svg_g_3_Template, 1, 8, "g", 3);
+        ɵngcc0.ɵɵtemplate(4, BarHorizontalNormalizedComponent__svg_g_4_Template, 2, 15, "g", 4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesHorizontal]; }, styles: [_c24], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1,
+                        transform: '*'
+                    }),
+                    animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+BarHorizontalNormalizedComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    barPadding: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵBarHorizontalNormalizedComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BarHorizontalNormalizedComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarHorizontalNormalizedComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-bar-horizontal-normalized',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelActivate)="onActivate($event, undefined, true)"
+      (legendLabelDeactivate)="onDeactivate($event, undefined, true)"
+      (legendLabelClick)="onClick($event)"
+    >
+      <svg:g [attr.transform]="transform" class="bar-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g
+          *ngFor="let group of results; trackBy: trackBy"
+          [@animationState]="'active'"
+          [attr.transform]="groupTransform(group)"
+        >
+          <svg:g
+            ngx-charts-series-horizontal
+            [type]="barChartType.Normalized"
+            [xScale]="xScale"
+            [yScale]="yScale"
+            [activeEntries]="activeEntries"
+            [colors]="colors"
+            [series]="group.series"
+            [dims]="dims"
+            [gradient]="gradient"
+            [tooltipDisabled]="tooltipDisabled"
+            [tooltipTemplate]="tooltipTemplate"
+            [seriesName]="group.name"
+            [animations]="animations"
+            (select)="onClick($event, group)"
+            (activate)="onActivate($event, group)"
+            (deactivate)="onDeactivate($event, group)"
+            [noBarWhenZero]="noBarWhenZero"
+          />
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1,
+                                transform: '*'
+                            }),
+                            animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                        ])
+                    ])
+                ],
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], barPadding: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class BarHorizontalStackedComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.tooltipDisabled = false;
+        this.showGridLines = true;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.barPadding = 8;
+        this.roundDomains = false;
+        this.showDataLabel = false;
+        this.noBarWhenZero = true;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.dataLabelMaxWidth = { negative: 0, positive: 0 };
+        this.barChartType = BarChartType;
+        this.trackBy = (index, item) => {
+            return item.name;
+        };
+    }
+    update() {
+        super.update();
+        if (!this.showDataLabel) {
+            this.dataLabelMaxWidth = { negative: 0, positive: 0 };
+        }
+        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        this.formatDates();
+        this.groupDomain = this.getGroupDomain();
+        this.innerDomain = this.getInnerDomain();
+        this.valueDomain = this.getValueDomain();
+        this.xScale = this.getXScale();
+        this.yScale = this.getYScale();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+    }
+    getGroupDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            if (!domain.includes(group.label)) {
+                domain.push(group.label);
+            }
+        }
+        return domain;
+    }
+    getInnerDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            for (const d of group.series) {
+                if (!domain.includes(d.label)) {
+                    domain.push(d.label);
+                }
+            }
+        }
+        return domain;
+    }
+    getValueDomain() {
+        const domain = [];
+        let smallest = 0;
+        let biggest = 0;
+        for (const group of this.results) {
+            let smallestSum = 0;
+            let biggestSum = 0;
+            for (const d of group.series) {
+                if (d.value < 0) {
+                    smallestSum += d.value;
+                }
+                else {
+                    biggestSum += d.value;
+                }
+                smallest = d.value < smallest ? d.value : smallest;
+                biggest = d.value > biggest ? d.value : biggest;
+            }
+            domain.push(smallestSum);
+            domain.push(biggestSum);
+        }
+        domain.push(smallest);
+        domain.push(biggest);
+        const min = Math.min(0, ...domain);
+        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);
+        return [min, max];
+    }
+    getYScale() {
+        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);
+        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);
+    }
+    getXScale() {
+        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    groupTransform(group) {
+        return `translate(0, ${this.yScale(group.name)})`;
+    }
+    onClick(data, group) {
+        if (group) {
+            data.series = group.name;
+        }
+        this.select.emit(data);
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.innerDomain;
+        }
+        else {
+            domain = this.valueDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.innerDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.valueDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onDataLabelMaxWidthChanged(event, groupIndex) {
+        if (event.size.negative) {
+            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);
+        }
+        else {
+            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);
+        }
+        if (groupIndex === this.results.length - 1) {
+            setTimeout(() => this.update());
+        }
+    }
+    onActivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        const items = this.results
+            .map(g => g.series)
+            .flat()
+            .filter(i => {
+            if (fromLegend) {
+                return i.label === item.name;
+            }
+            else {
+                return i.name === item.name && i.series === item.series;
+            }
+        });
+        this.activeEntries = [...items];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        this.activeEntries = this.activeEntries.filter(i => {
+            if (fromLegend) {
+                return i.label !== item.name;
+            }
+            else {
+                return !(i.name === item.name && i.series === item.series);
+            }
+        });
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+BarHorizontalStackedComponent.ɵfac = function BarHorizontalStackedComponent_Factory(t) { return ɵBarHorizontalStackedComponent_BaseFactory(t || BarHorizontalStackedComponent); };
+BarHorizontalStackedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BarHorizontalStackedComponent, selectors: [["ngx-charts-bar-horizontal-stacked"]], contentQueries: function BarHorizontalStackedComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", tooltipDisabled: "tooltipDisabled", showGridLines: "showGridLines", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", barPadding: "barPadding", roundDomains: "roundDomains", showDataLabel: "showDataLabel", noBarWhenZero: "noBarWhenZero", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", xScaleMax: "xScaleMax", dataLabelFormatting: "dataLabelFormatting" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 13, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelActivate", "legendLabelDeactivate", "legendLabelClick"], [1, "bar-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "yAxisOffset", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "yAxisOffset", "dimensionsChanged"], ["ngx-charts-series-horizontal", "", 3, "type", "xScale", "yScale", "colors", "series", "activeEntries", "dims", "gradient", "tooltipDisabled", "tooltipTemplate", "seriesName", "animations", "showDataLabel", "dataLabelFormatting", "noBarWhenZero", "select", "activate", "deactivate", "dataLabelWidthChanged"]], template: function BarHorizontalStackedComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelActivate", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event, undefined, true); })("legendLabelDeactivate", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event, undefined, true); })("legendLabelClick", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵtemplate(2, BarHorizontalStackedComponent__svg_g_2_Template, 1, 10, "g", 2);
+        ɵngcc0.ɵɵtemplate(3, BarHorizontalStackedComponent__svg_g_3_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵtemplate(4, BarHorizontalStackedComponent__svg_g_4_Template, 2, 17, "g", 4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesHorizontal]; }, styles: [_c24], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1,
+                        transform: '*'
+                    }),
+                    animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+BarHorizontalStackedComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    barPadding: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    xScaleMax: [{ type: Input }],
+    showDataLabel: [{ type: Input }],
+    dataLabelFormatting: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵBarHorizontalStackedComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BarHorizontalStackedComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarHorizontalStackedComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-bar-horizontal-stacked',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelActivate)="onActivate($event, undefined, true)"
+      (legendLabelDeactivate)="onDeactivate($event, undefined, true)"
+      (legendLabelClick)="onClick($event)"
+    >
+      <svg:g [attr.transform]="transform" class="bar-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          [yAxisOffset]="dataLabelMaxWidth.negative"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g
+          *ngFor="let group of results; let index = index; trackBy: trackBy"
+          [@animationState]="'active'"
+          [attr.transform]="groupTransform(group)"
+        >
+          <svg:g
+            ngx-charts-series-horizontal
+            [type]="barChartType.Stacked"
+            [xScale]="xScale"
+            [yScale]="yScale"
+            [colors]="colors"
+            [series]="group.series"
+            [activeEntries]="activeEntries"
+            [dims]="dims"
+            [gradient]="gradient"
+            [tooltipDisabled]="tooltipDisabled"
+            [tooltipTemplate]="tooltipTemplate"
+            [seriesName]="group.name"
+            [animations]="animations"
+            [showDataLabel]="showDataLabel"
+            [dataLabelFormatting]="dataLabelFormatting"
+            [noBarWhenZero]="noBarWhenZero"
+            (select)="onClick($event, group)"
+            (activate)="onActivate($event, group)"
+            (deactivate)="onDeactivate($event, group)"
+            (dataLabelWidthChanged)="onDataLabelMaxWidthChanged($event, index)"
+          />
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1,
+                                transform: '*'
+                            }),
+                            animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                        ])
+                    ])
+                ],
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], barPadding: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], showDataLabel: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], xScaleMax: [{
+            type: Input
+        }], dataLabelFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class BarVerticalComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.tooltipDisabled = false;
+        this.showGridLines = true;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.barPadding = 8;
+        this.roundDomains = false;
+        this.roundEdges = true;
+        this.showDataLabel = false;
+        this.noBarWhenZero = true;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.dataLabelMaxHeight = { negative: 0, positive: 0 };
+    }
+    update() {
+        super.update();
+        if (!this.showDataLabel) {
+            this.dataLabelMaxHeight = { negative: 0, positive: 0 };
+        }
+        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        this.formatDates();
+        if (this.showDataLabel) {
+            this.dims.height -= this.dataLabelMaxHeight.negative;
+        }
+        this.xScale = this.getXScale();
+        this.yScale = this.getYScale();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;
+    }
+    getXScale() {
+        this.xDomain = this.getXDomain();
+        const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);
+        return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);
+    }
+    getYScale() {
+        this.yDomain = this.getYDomain();
+        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    getXDomain() {
+        return this.results.map(d => d.label);
+    }
+    getYDomain() {
+        const values = this.results.map(d => d.value);
+        let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);
+        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {
+            min = Math.min(min, ...this.yAxisTicks);
+        }
+        let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);
+        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {
+            max = Math.max(max, ...this.yAxisTicks);
+        }
+        return [min, max];
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.xDomain;
+        }
+        else {
+            domain = this.yDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.xDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.yDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onDataLabelMaxHeightChanged(event) {
+        if (event.size.negative) {
+            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);
+        }
+        else {
+            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);
+        }
+        if (event.index === this.results.length - 1) {
+            setTimeout(() => this.update());
+        }
+    }
+    onActivate(item, fromLegend = false) {
+        item = this.results.find(d => {
+            if (fromLegend) {
+                return d.label === item.name;
+            }
+            else {
+                return d.name === item.name;
+            }
+        });
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value && d.series === item.series;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item, ...this.activeEntries];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item, fromLegend = false) {
+        item = this.results.find(d => {
+            if (fromLegend) {
+                return d.label === item.name;
+            }
+            else {
+                return d.name === item.name;
+            }
+        });
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value && d.series === item.series;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+BarVerticalComponent.ɵfac = function BarVerticalComponent_Factory(t) { return ɵBarVerticalComponent_BaseFactory(t || BarVerticalComponent); };
+BarVerticalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BarVerticalComponent, selectors: [["ngx-charts-bar-vertical"]], contentQueries: function BarVerticalComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", tooltipDisabled: "tooltipDisabled", showGridLines: "showGridLines", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", barPadding: "barPadding", roundDomains: "roundDomains", roundEdges: "roundEdges", showDataLabel: "showDataLabel", noBarWhenZero: "noBarWhenZero", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", yScaleMax: "yScaleMax", yScaleMin: "yScaleMin", dataLabelFormatting: "dataLabelFormatting" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 25, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "bar-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "xAxisOffset", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-series-vertical", "", 3, "xScale", "yScale", "colors", "series", "dims", "gradient", "tooltipDisabled", "tooltipTemplate", "showDataLabel", "dataLabelFormatting", "activeEntries", "roundEdges", "animations", "noBarWhenZero", "activate", "deactivate", "select", "dataLabelHeightChanged"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "xAxisOffset", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"]], template: function BarVerticalComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event, true); })("legendLabelDeactivate", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event, true); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵtemplate(2, BarVerticalComponent__svg_g_2_Template, 1, 11, "g", 2);
+        ɵngcc0.ɵɵtemplate(3, BarVerticalComponent__svg_g_3_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵelementStart(4, "g", 4);
+        ɵngcc0.ɵɵlistener("activate", function BarVerticalComponent_Template__svg_g_activate_4_listener($event) { return ctx.onActivate($event); })("deactivate", function BarVerticalComponent_Template__svg_g_deactivate_4_listener($event) { return ctx.onDeactivate($event); })("select", function BarVerticalComponent_Template__svg_g_select_4_listener($event) { return ctx.onClick($event); })("dataLabelHeightChanged", function BarVerticalComponent_Template__svg_g_dataLabelHeightChanged_4_listener($event) { return ctx.onDataLabelMaxHeightChanged($event); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(22, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("xScale", ctx.xScale)("yScale", ctx.yScale)("colors", ctx.colors)("series", ctx.results)("dims", ctx.dims)("gradient", ctx.gradient)("tooltipDisabled", ctx.tooltipDisabled)("tooltipTemplate", ctx.tooltipTemplate)("showDataLabel", ctx.showDataLabel)("dataLabelFormatting", ctx.dataLabelFormatting)("activeEntries", ctx.activeEntries)("roundEdges", ctx.roundEdges)("animations", ctx.animations)("noBarWhenZero", ctx.noBarWhenZero);
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, SeriesVerticalComponent, XAxisComponent, YAxisComponent]; }, styles: [_c24], encapsulation: 2, changeDetection: 0 });
+BarVerticalComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    barPadding: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    roundEdges: [{ type: Input }],
+    yScaleMax: [{ type: Input }],
+    yScaleMin: [{ type: Input }],
+    showDataLabel: [{ type: Input }],
+    dataLabelFormatting: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵBarVerticalComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BarVerticalComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarVerticalComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-bar-vertical',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelClick)="onClick($event)"
+      (legendLabelActivate)="onActivate($event, true)"
+      (legendLabelDeactivate)="onDeactivate($event, true)"
+    >
+      <svg:g [attr.transform]="transform" class="bar-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          [xAxisOffset]="dataLabelMaxHeight.negative"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-series-vertical
+          [xScale]="xScale"
+          [yScale]="yScale"
+          [colors]="colors"
+          [series]="results"
+          [dims]="dims"
+          [gradient]="gradient"
+          [tooltipDisabled]="tooltipDisabled"
+          [tooltipTemplate]="tooltipTemplate"
+          [showDataLabel]="showDataLabel"
+          [dataLabelFormatting]="dataLabelFormatting"
+          [activeEntries]="activeEntries"
+          [roundEdges]="roundEdges"
+          [animations]="animations"
+          [noBarWhenZero]="noBarWhenZero"
+          (activate)="onActivate($event)"
+          (deactivate)="onDeactivate($event)"
+          (select)="onClick($event)"
+          (dataLabelHeightChanged)="onDataLabelMaxHeightChanged($event)"
+        ></svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], barPadding: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], roundEdges: [{
+            type: Input
+        }], showDataLabel: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], yScaleMax: [{
+            type: Input
+        }], yScaleMin: [{
+            type: Input
+        }], dataLabelFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class BarVertical2DComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.tooltipDisabled = false;
+        this.scaleType = ScaleType.Ordinal;
+        this.showGridLines = true;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.groupPadding = 16;
+        this.barPadding = 8;
+        this.roundDomains = false;
+        this.roundEdges = true;
+        this.showDataLabel = false;
+        this.noBarWhenZero = true;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.dataLabelMaxHeight = { negative: 0, positive: 0 };
+        this.barOrientation = BarOrientation;
+        this.trackBy = (index, item) => {
+            return item.name;
+        };
+    }
+    update() {
+        super.update();
+        if (!this.showDataLabel) {
+            this.dataLabelMaxHeight = { negative: 0, positive: 0 };
+        }
+        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        if (this.showDataLabel) {
+            this.dims.height -= this.dataLabelMaxHeight.negative;
+        }
+        this.formatDates();
+        this.groupDomain = this.getGroupDomain();
+        this.innerDomain = this.getInnerDomain();
+        this.valueDomain = this.getValueDomain();
+        this.groupScale = this.getGroupScale();
+        this.innerScale = this.getInnerScale();
+        this.valueScale = this.getValueScale();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;
+    }
+    onDataLabelMaxHeightChanged(event, groupIndex) {
+        if (event.size.negative) {
+            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);
+        }
+        else {
+            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);
+        }
+        if (groupIndex === this.results.length - 1) {
+            setTimeout(() => this.update());
+        }
+    }
+    getGroupScale() {
+        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);
+        return scaleBand()
+            .rangeRound([0, this.dims.width])
+            .paddingInner(spacing)
+            .paddingOuter(spacing / 2)
+            .domain(this.groupDomain);
+    }
+    getInnerScale() {
+        const width = this.groupScale.bandwidth();
+        const spacing = this.innerDomain.length / (width / this.barPadding + 1);
+        return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);
+    }
+    getValueScale() {
+        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    getGroupDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            if (!domain.includes(group.label)) {
+                domain.push(group.label);
+            }
+        }
+        return domain;
+    }
+    getInnerDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            for (const d of group.series) {
+                if (!domain.includes(d.label)) {
+                    domain.push(d.label);
+                }
+            }
+        }
+        return domain;
+    }
+    getValueDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            for (const d of group.series) {
+                if (!domain.includes(d.value)) {
+                    domain.push(d.value);
+                }
+            }
+        }
+        const min = Math.min(0, ...domain);
+        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);
+        return [min, max];
+    }
+    groupTransform(group) {
+        return `translate(${this.groupScale(group.label)}, 0)`;
+    }
+    onClick(data, group) {
+        if (group) {
+            data.series = group.name;
+        }
+        this.select.emit(data);
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.innerDomain;
+        }
+        else {
+            domain = this.valueDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.innerDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.valueDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        const items = this.results
+            .map(g => g.series)
+            .flat()
+            .filter(i => {
+            if (fromLegend) {
+                return i.label === item.name;
+            }
+            else {
+                return i.name === item.name && i.series === item.series;
+            }
+        });
+        this.activeEntries = [...items];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        this.activeEntries = this.activeEntries.filter(i => {
+            if (fromLegend) {
+                return i.label !== item.name;
+            }
+            else {
+                return !(i.name === item.name && i.series === item.series);
+            }
+        });
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+BarVertical2DComponent.ɵfac = function BarVertical2DComponent_Factory(t) { return ɵBarVertical2DComponent_BaseFactory(t || BarVertical2DComponent); };
+BarVertical2DComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BarVertical2DComponent, selectors: [["ngx-charts-bar-vertical-2d"]], contentQueries: function BarVertical2DComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", tooltipDisabled: "tooltipDisabled", scaleType: "scaleType", showGridLines: "showGridLines", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", groupPadding: "groupPadding", barPadding: "barPadding", roundDomains: "roundDomains", roundEdges: "roundEdges", showDataLabel: "showDataLabel", noBarWhenZero: "noBarWhenZero", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", yScaleMax: "yScaleMax", dataLabelFormatting: "dataLabelFormatting" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 18, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelActivate", "legendLabelDeactivate", "legendLabelClick"], [1, "bar-chart", "chart"], ["ngx-charts-grid-panel-series", "", 3, "xScale", "yScale", "data", "dims", "orient"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "xAxisOffset", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-series-vertical", "", 3, "activeEntries", "xScale", "yScale", "colors", "series", "dims", "gradient", "tooltipDisabled", "tooltipTemplate", "showDataLabel", "dataLabelFormatting", "seriesName", "roundEdges", "animations", "noBarWhenZero", "select", "activate", "deactivate", "dataLabelHeightChanged", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "xAxisOffset", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-series-vertical", "", 3, "activeEntries", "xScale", "yScale", "colors", "series", "dims", "gradient", "tooltipDisabled", "tooltipTemplate", "showDataLabel", "dataLabelFormatting", "seriesName", "roundEdges", "animations", "noBarWhenZero", "select", "activate", "deactivate", "dataLabelHeightChanged"]], template: function BarVertical2DComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelActivate", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event, undefined, true); })("legendLabelDeactivate", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event, undefined, true); })("legendLabelClick", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵelement(2, "g", 2);
+        ɵngcc0.ɵɵtemplate(3, BarVertical2DComponent__svg_g_3_Template, 1, 10, "g", 3);
+        ɵngcc0.ɵɵtemplate(4, BarVertical2DComponent__svg_g_4_Template, 1, 9, "g", 4);
+        ɵngcc0.ɵɵtemplate(5, BarVertical2DComponent__svg_g_5_Template, 1, 17, "g", 5);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(15, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("xScale", ctx.groupScale)("yScale", ctx.valueScale)("data", ctx.results)("dims", ctx.dims)("orient", ctx.barOrientation.Vertical);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+    } }, directives: function () { return [ChartComponent, GridPanelSeriesComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesVerticalComponent]; }, styles: [_c24], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1,
+                        transform: '*'
+                    }),
+                    animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+BarVertical2DComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    scaleType: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    groupPadding: [{ type: Input }],
+    barPadding: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    roundEdges: [{ type: Input }],
+    yScaleMax: [{ type: Input }],
+    showDataLabel: [{ type: Input }],
+    dataLabelFormatting: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵBarVertical2DComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BarVertical2DComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarVertical2DComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-bar-vertical-2d',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelActivate)="onActivate($event, undefined, true)"
+      (legendLabelDeactivate)="onDeactivate($event, undefined, true)"
+      (legendLabelClick)="onClick($event)"
+    >
+      <svg:g [attr.transform]="transform" class="bar-chart chart">
+        <svg:g
+          ngx-charts-grid-panel-series
+          [xScale]="groupScale"
+          [yScale]="valueScale"
+          [data]="results"
+          [dims]="dims"
+          [orient]="barOrientation.Vertical"
+        ></svg:g>
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="groupScale"
+          [dims]="dims"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          [xAxisOffset]="dataLabelMaxHeight.negative"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="valueScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-series-vertical
+          *ngFor="let group of results; let index = index; trackBy: trackBy"
+          [@animationState]="'active'"
+          [attr.transform]="groupTransform(group)"
+          [activeEntries]="activeEntries"
+          [xScale]="innerScale"
+          [yScale]="valueScale"
+          [colors]="colors"
+          [series]="group.series"
+          [dims]="dims"
+          [gradient]="gradient"
+          [tooltipDisabled]="tooltipDisabled"
+          [tooltipTemplate]="tooltipTemplate"
+          [showDataLabel]="showDataLabel"
+          [dataLabelFormatting]="dataLabelFormatting"
+          [seriesName]="group.name"
+          [roundEdges]="roundEdges"
+          [animations]="animations"
+          [noBarWhenZero]="noBarWhenZero"
+          (select)="onClick($event, group)"
+          (activate)="onActivate($event, group)"
+          (deactivate)="onDeactivate($event, group)"
+          (dataLabelHeightChanged)="onDataLabelMaxHeightChanged($event, index)"
+        />
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1,
+                                transform: '*'
+                            }),
+                            animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                        ])
+                    ])
+                ],
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], scaleType: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], groupPadding: [{
+            type: Input
+        }], barPadding: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], roundEdges: [{
+            type: Input
+        }], showDataLabel: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], yScaleMax: [{
+            type: Input
+        }], dataLabelFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class BarVerticalNormalizedComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.tooltipDisabled = false;
+        this.showGridLines = true;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.barPadding = 8;
+        this.roundDomains = false;
+        this.noBarWhenZero = true;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.valueDomain = [0, 100];
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.barChartType = BarChartType;
+        this.trackBy = (index, item) => {
+            return item.name;
+        };
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        this.formatDates();
+        this.groupDomain = this.getGroupDomain();
+        this.innerDomain = this.getInnerDomain();
+        this.xScale = this.getXScale();
+        this.yScale = this.getYScale();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+    }
+    getGroupDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            if (!domain.includes(group.label)) {
+                domain.push(group.label);
+            }
+        }
+        return domain;
+    }
+    getInnerDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            for (const d of group.series) {
+                if (!domain.includes(d.label)) {
+                    domain.push(d.label);
+                }
+            }
+        }
+        return domain;
+    }
+    getXScale() {
+        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);
+        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);
+    }
+    getYScale() {
+        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    groupTransform(group) {
+        return `translate(${this.xScale(group.name)}, 0)`;
+    }
+    onClick(data, group) {
+        if (group) {
+            data.series = group.name;
+        }
+        this.select.emit(data);
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.innerDomain;
+        }
+        else {
+            domain = this.valueDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.innerDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.valueDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        const items = this.results
+            .map(g => g.series)
+            .flat()
+            .filter(i => {
+            if (fromLegend) {
+                return i.label === item.name;
+            }
+            else {
+                return i.name === item.name && i.series === item.series;
+            }
+        });
+        this.activeEntries = [...items];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        this.activeEntries = this.activeEntries.filter(i => {
+            if (fromLegend) {
+                return i.label !== item.name;
+            }
+            else {
+                return !(i.name === item.name && i.series === item.series);
+            }
+        });
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+BarVerticalNormalizedComponent.ɵfac = function BarVerticalNormalizedComponent_Factory(t) { return ɵBarVerticalNormalizedComponent_BaseFactory(t || BarVerticalNormalizedComponent); };
+BarVerticalNormalizedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BarVerticalNormalizedComponent, selectors: [["ngx-charts-bar-vertical-normalized"]], contentQueries: function BarVerticalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", tooltipDisabled: "tooltipDisabled", showGridLines: "showGridLines", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", barPadding: "barPadding", roundDomains: "roundDomains", noBarWhenZero: "noBarWhenZero", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 13, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelActivate", "legendLabelDeactivate", "legendLabelClick"], [1, "bar-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-series-vertical", "", 3, "type", "xScale", "yScale", "activeEntries", "colors", "series", "dims", "gradient", "tooltipDisabled", "tooltipTemplate", "seriesName", "animations", "noBarWhenZero", "select", "activate", "deactivate"]], template: function BarVerticalNormalizedComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelActivate", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event, undefined, true); })("legendLabelDeactivate", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event, undefined, true); })("legendLabelClick", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵtemplate(2, BarVerticalNormalizedComponent__svg_g_2_Template, 1, 9, "g", 2);
+        ɵngcc0.ɵɵtemplate(3, BarVerticalNormalizedComponent__svg_g_3_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵtemplate(4, BarVerticalNormalizedComponent__svg_g_4_Template, 2, 15, "g", 4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesVerticalComponent]; }, styles: [_c24], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1,
+                        transform: '*'
+                    }),
+                    animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+BarVerticalNormalizedComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    barPadding: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵBarVerticalNormalizedComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BarVerticalNormalizedComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarVerticalNormalizedComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-bar-vertical-normalized',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelActivate)="onActivate($event, undefined, true)"
+      (legendLabelDeactivate)="onDeactivate($event, undefined, true)"
+      (legendLabelClick)="onClick($event)"
+    >
+      <svg:g [attr.transform]="transform" class="bar-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g
+          *ngFor="let group of results; trackBy: trackBy"
+          [@animationState]="'active'"
+          [attr.transform]="groupTransform(group)"
+        >
+          <svg:g
+            ngx-charts-series-vertical
+            [type]="barChartType.Normalized"
+            [xScale]="xScale"
+            [yScale]="yScale"
+            [activeEntries]="activeEntries"
+            [colors]="colors"
+            [series]="group.series"
+            [dims]="dims"
+            [gradient]="gradient"
+            [tooltipDisabled]="tooltipDisabled"
+            [tooltipTemplate]="tooltipTemplate"
+            [seriesName]="group.name"
+            [animations]="animations"
+            [noBarWhenZero]="noBarWhenZero"
+            (select)="onClick($event, group)"
+            (activate)="onActivate($event, group)"
+            (deactivate)="onDeactivate($event, group)"
+          />
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1,
+                                transform: '*'
+                            }),
+                            animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                        ])
+                    ])
+                ],
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], barPadding: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class BarVerticalStackedComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.tooltipDisabled = false;
+        this.showGridLines = true;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.barPadding = 8;
+        this.roundDomains = false;
+        this.showDataLabel = false;
+        this.noBarWhenZero = true;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.dataLabelMaxHeight = { negative: 0, positive: 0 };
+        this.barChartType = BarChartType;
+        this.trackBy = (index, item) => {
+            return item.name;
+        };
+    }
+    update() {
+        super.update();
+        if (!this.showDataLabel) {
+            this.dataLabelMaxHeight = { negative: 0, positive: 0 };
+        }
+        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        if (this.showDataLabel) {
+            this.dims.height -= this.dataLabelMaxHeight.negative;
+        }
+        this.formatDates();
+        this.groupDomain = this.getGroupDomain();
+        this.innerDomain = this.getInnerDomain();
+        this.valueDomain = this.getValueDomain();
+        this.xScale = this.getXScale();
+        this.yScale = this.getYScale();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;
+    }
+    getGroupDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            if (!domain.includes(group.label)) {
+                domain.push(group.label);
+            }
+        }
+        return domain;
+    }
+    getInnerDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            for (const d of group.series) {
+                if (!domain.includes(d.label)) {
+                    domain.push(d.label);
+                }
+            }
+        }
+        return domain;
+    }
+    getValueDomain() {
+        const domain = [];
+        let smallest = 0;
+        let biggest = 0;
+        for (const group of this.results) {
+            let smallestSum = 0;
+            let biggestSum = 0;
+            for (const d of group.series) {
+                if (d.value < 0) {
+                    smallestSum += d.value;
+                }
+                else {
+                    biggestSum += d.value;
+                }
+                smallest = d.value < smallest ? d.value : smallest;
+                biggest = d.value > biggest ? d.value : biggest;
+            }
+            domain.push(smallestSum);
+            domain.push(biggestSum);
+        }
+        domain.push(smallest);
+        domain.push(biggest);
+        const min = Math.min(0, ...domain);
+        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);
+        return [min, max];
+    }
+    getXScale() {
+        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);
+        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);
+    }
+    getYScale() {
+        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    onDataLabelMaxHeightChanged(event, groupIndex) {
+        if (event.size.negative) {
+            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);
+        }
+        else {
+            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);
+        }
+        if (groupIndex === this.results.length - 1) {
+            setTimeout(() => this.update());
+        }
+    }
+    groupTransform(group) {
+        return `translate(${this.xScale(group.name) || 0}, 0)`;
+    }
+    onClick(data, group) {
+        if (group) {
+            data.series = group.name;
+        }
+        this.select.emit(data);
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.innerDomain;
+        }
+        else {
+            domain = this.valueDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.innerDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.valueDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        const items = this.results
+            .map(g => g.series)
+            .flat()
+            .filter(i => {
+            if (fromLegend) {
+                return i.label === item.name;
+            }
+            else {
+                return i.name === item.name && i.series === item.series;
+            }
+        });
+        this.activeEntries = [...items];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        this.activeEntries = this.activeEntries.filter(i => {
+            if (fromLegend) {
+                return i.label !== item.name;
+            }
+            else {
+                return !(i.name === item.name && i.series === item.series);
+            }
+        });
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+BarVerticalStackedComponent.ɵfac = function BarVerticalStackedComponent_Factory(t) { return ɵBarVerticalStackedComponent_BaseFactory(t || BarVerticalStackedComponent); };
+BarVerticalStackedComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BarVerticalStackedComponent, selectors: [["ngx-charts-bar-vertical-stacked"]], contentQueries: function BarVerticalStackedComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", tooltipDisabled: "tooltipDisabled", showGridLines: "showGridLines", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", barPadding: "barPadding", roundDomains: "roundDomains", showDataLabel: "showDataLabel", noBarWhenZero: "noBarWhenZero", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", yScaleMax: "yScaleMax", dataLabelFormatting: "dataLabelFormatting" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 13, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelActivate", "legendLabelDeactivate", "legendLabelClick"], [1, "bar-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "xAxisOffset", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "xAxisOffset", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-series-vertical", "", 3, "type", "xScale", "yScale", "activeEntries", "colors", "series", "dims", "gradient", "tooltipDisabled", "tooltipTemplate", "showDataLabel", "dataLabelFormatting", "seriesName", "animations", "noBarWhenZero", "select", "activate", "deactivate", "dataLabelHeightChanged"]], template: function BarVerticalStackedComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelActivate", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event, undefined, true); })("legendLabelDeactivate", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event, undefined, true); })("legendLabelClick", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵtemplate(2, BarVerticalStackedComponent__svg_g_2_Template, 1, 10, "g", 2);
+        ɵngcc0.ɵɵtemplate(3, BarVerticalStackedComponent__svg_g_3_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵtemplate(4, BarVerticalStackedComponent__svg_g_4_Template, 2, 17, "g", 4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, SeriesVerticalComponent]; }, styles: [_c24], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1,
+                        transform: '*'
+                    }),
+                    animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+BarVerticalStackedComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    barPadding: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    yScaleMax: [{ type: Input }],
+    showDataLabel: [{ type: Input }],
+    dataLabelFormatting: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵBarVerticalStackedComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BarVerticalStackedComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarVerticalStackedComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-bar-vertical-stacked',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelActivate)="onActivate($event, undefined, true)"
+      (legendLabelDeactivate)="onDeactivate($event, undefined, true)"
+      (legendLabelClick)="onClick($event)"
+    >
+      <svg:g [attr.transform]="transform" class="bar-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          [xAxisOffset]="dataLabelMaxHeight.negative"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g
+          *ngFor="let group of results; let index = index; trackBy: trackBy"
+          [@animationState]="'active'"
+          [attr.transform]="groupTransform(group)"
+        >
+          <svg:g
+            ngx-charts-series-vertical
+            [type]="barChartType.Stacked"
+            [xScale]="xScale"
+            [yScale]="yScale"
+            [activeEntries]="activeEntries"
+            [colors]="colors"
+            [series]="group.series"
+            [dims]="dims"
+            [gradient]="gradient"
+            [tooltipDisabled]="tooltipDisabled"
+            [tooltipTemplate]="tooltipTemplate"
+            [showDataLabel]="showDataLabel"
+            [dataLabelFormatting]="dataLabelFormatting"
+            [seriesName]="group.name"
+            [animations]="animations"
+            [noBarWhenZero]="noBarWhenZero"
+            (select)="onClick($event, group)"
+            (activate)="onActivate($event, group)"
+            (deactivate)="onDeactivate($event, group)"
+            (dataLabelHeightChanged)="onDataLabelMaxHeightChanged($event, index)"
+          />
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1,
+                                transform: '*'
+                            }),
+                            animate(500, style({ opacity: 0, transform: 'scale(0)' }))
+                        ])
+                    ])
+                ],
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], barPadding: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], showDataLabel: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], yScaleMax: [{
+            type: Input
+        }], dataLabelFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+var D0Types;
+(function (D0Types) {
+    D0Types["positive"] = "positive";
+    D0Types["negative"] = "negative";
+})(D0Types || (D0Types = {}));
+
+class SeriesHorizontal {
+    constructor() {
+        this.type = BarChartType.Standard;
+        this.tooltipDisabled = false;
+        this.animations = true;
+        this.showDataLabel = false;
+        this.noBarWhenZero = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.dataLabelWidthChanged = new EventEmitter();
+        this.barsForDataLabels = [];
+        this.barOrientation = BarOrientation;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.updateTooltipSettings();
+        const d0 = {
+            [D0Types.positive]: 0,
+            [D0Types.negative]: 0
+        };
+        let d0Type;
+        d0Type = D0Types.positive;
+        let total;
+        if (this.type === BarChartType.Normalized) {
+            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);
+        }
+        const xScaleMin = Math.max(this.xScale.domain()[0], 0);
+        this.bars = this.series.map(d => {
+            let value = d.value;
+            const label = this.getLabel(d);
+            const formattedLabel = formatLabel(label);
+            const roundEdges = this.roundEdges;
+            d0Type = value > 0 ? D0Types.positive : D0Types.negative;
+            const bar = {
+                value,
+                label,
+                roundEdges,
+                data: d,
+                formattedLabel
+            };
+            bar.height = this.yScale.bandwidth();
+            if (this.type === BarChartType.Standard) {
+                bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));
+                if (value < 0) {
+                    bar.x = this.xScale(value);
+                }
+                else {
+                    bar.x = this.xScale(xScaleMin);
+                }
+                bar.y = this.yScale(label);
+            }
+            else if (this.type === BarChartType.Stacked) {
+                const offset0 = d0[d0Type];
+                const offset1 = offset0 + value;
+                d0[d0Type] += value;
+                bar.width = this.xScale(offset1) - this.xScale(offset0);
+                bar.x = this.xScale(offset0);
+                bar.y = 0;
+                bar.offset0 = offset0;
+                bar.offset1 = offset1;
+            }
+            else if (this.type === BarChartType.Normalized) {
+                let offset0 = d0[d0Type];
+                let offset1 = offset0 + value;
+                d0[d0Type] += value;
+                if (total > 0) {
+                    offset0 = (offset0 * 100) / total;
+                    offset1 = (offset1 * 100) / total;
+                }
+                else {
+                    offset0 = 0;
+                    offset1 = 0;
+                }
+                bar.width = this.xScale(offset1) - this.xScale(offset0);
+                bar.x = this.xScale(offset0);
+                bar.y = 0;
+                bar.offset0 = offset0;
+                bar.offset1 = offset1;
+                value = (offset1 - offset0).toFixed(2) + '%';
+            }
+            if (this.colors.scaleType === ScaleType.Ordinal) {
+                bar.color = this.colors.getColor(label);
+            }
+            else {
+                if (this.type === BarChartType.Standard) {
+                    bar.color = this.colors.getColor(value);
+                    bar.gradientStops = this.colors.getLinearGradientStops(value);
+                }
+                else {
+                    bar.color = this.colors.getColor(bar.offset1);
+                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);
+                }
+            }
+            let tooltipLabel = formattedLabel;
+            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();
+            if (this.seriesName !== null && this.seriesName !== undefined) {
+                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;
+                bar.data.series = this.seriesName;
+                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;
+            }
+            bar.tooltipText = this.tooltipDisabled
+                ? undefined
+                : `
+        <span class="tooltip-label">${escapeLabel(tooltipLabel)}</span>
+        <span class="tooltip-val">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>
+      `;
+            return bar;
+        });
+        this.updateDataLabels();
+    }
+    updateDataLabels() {
+        if (this.type === BarChartType.Stacked) {
+            this.barsForDataLabels = [];
+            const section = {};
+            section.series = this.seriesName;
+            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);
+            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);
+            section.total = totalPositive + totalNegative;
+            section.x = 0;
+            section.y = 0;
+            // if total is positive then we show it on the right, otherwise on the left
+            if (section.total > 0) {
+                section.width = this.xScale(totalPositive);
+            }
+            else {
+                section.width = this.xScale(totalNegative);
+            }
+            section.height = this.yScale.bandwidth();
+            this.barsForDataLabels.push(section);
+        }
+        else {
+            this.barsForDataLabels = this.series.map(d => {
+                var _a;
+                const section = {};
+                section.series = (_a = this.seriesName) !== null && _a !== void 0 ? _a : d.label;
+                section.total = d.value;
+                section.x = this.xScale(0);
+                section.y = this.yScale(d.label);
+                section.width = this.xScale(section.total) - this.xScale(0);
+                section.height = this.yScale.bandwidth();
+                return section;
+            });
+        }
+    }
+    updateTooltipSettings() {
+        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;
+        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;
+    }
+    isActive(entry) {
+        if (!this.activeEntries)
+            return false;
+        const item = this.activeEntries.find(active => {
+            return entry.name === active.name && entry.value === active.value;
+        });
+        return item !== undefined;
+    }
+    getLabel(dataItem) {
+        if (dataItem.label) {
+            return dataItem.label;
+        }
+        return dataItem.name;
+    }
+    trackBy(index, bar) {
+        return bar.label;
+    }
+    trackDataLabelBy(index, barLabel) {
+        return index + '#' + barLabel.series + '#' + barLabel.total;
+    }
+    click(data) {
+        this.select.emit(data);
+    }
+}
+SeriesHorizontal.ɵfac = function SeriesHorizontal_Factory(t) { return new (t || SeriesHorizontal)(); };
+SeriesHorizontal.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SeriesHorizontal, selectors: [["g", "ngx-charts-series-horizontal", ""]], inputs: { type: "type", tooltipDisabled: "tooltipDisabled", animations: "animations", showDataLabel: "showDataLabel", noBarWhenZero: "noBarWhenZero", dims: "dims", series: "series", xScale: "xScale", yScale: "yScale", colors: "colors", gradient: "gradient", activeEntries: "activeEntries", seriesName: "seriesName", tooltipTemplate: "tooltipTemplate", roundEdges: "roundEdges", dataLabelFormatting: "dataLabelFormatting" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate", dataLabelWidthChanged: "dataLabelWidthChanged" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c27, decls: 2, vars: 3, consts: [["ngx-charts-bar", "", "ngx-tooltip", "", 3, "width", "height", "x", "y", "fill", "stops", "data", "orientation", "roundEdges", "gradient", "isActive", "ariaLabel", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "noBarWhenZero", "select", "activate", "deactivate", 4, "ngFor", "ngForOf", "ngForTrackBy"], [4, "ngIf"], ["ngx-charts-bar", "", "ngx-tooltip", "", 3, "width", "height", "x", "y", "fill", "stops", "data", "orientation", "roundEdges", "gradient", "isActive", "ariaLabel", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "noBarWhenZero", "select", "activate", "deactivate"], ["ngx-charts-bar-label", "", 3, "barX", "barY", "barWidth", "barHeight", "value", "valueFormatting", "orientation", "dimensionsChanged", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-bar-label", "", 3, "barX", "barY", "barWidth", "barHeight", "value", "valueFormatting", "orientation", "dimensionsChanged"]], template: function SeriesHorizontal_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, SeriesHorizontal__svg_g_0_Template, 1, 21, "g", 0);
+        ɵngcc0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1_Template, 2, 2, "g", 1);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.bars)("ngForTrackBy", ctx.trackBy);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.showDataLabel);
+    } }, directives: function () { return [ɵngcc1.NgForOf, ɵngcc1.NgIf, BarComponent, TooltipDirective, BarLabelComponent]; }, encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1
+                    }),
+                    animate(500, style({ opacity: 0 }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+SeriesHorizontal.propDecorators = {
+    dims: [{ type: Input }],
+    type: [{ type: Input }],
+    series: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    colors: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    gradient: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    seriesName: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    roundEdges: [{ type: Input }],
+    animations: [{ type: Input }],
+    showDataLabel: [{ type: Input }],
+    dataLabelFormatting: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    dataLabelWidthChanged: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SeriesHorizontal, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-series-horizontal]',
+                template: `
+    <svg:g
+      ngx-charts-bar
+      *ngFor="let bar of bars; trackBy: trackBy"
+      [@animationState]="'active'"
+      [width]="bar.width"
+      [height]="bar.height"
+      [x]="bar.x"
+      [y]="bar.y"
+      [fill]="bar.color"
+      [stops]="bar.gradientStops"
+      [data]="bar.data"
+      [orientation]="barOrientation.Horizontal"
+      [roundEdges]="bar.roundEdges"
+      (select)="click($event)"
+      [gradient]="gradient"
+      [isActive]="isActive(bar.data)"
+      [ariaLabel]="bar.ariaLabel"
+      [animations]="animations"
+      (activate)="activate.emit($event)"
+      (deactivate)="deactivate.emit($event)"
+      ngx-tooltip
+      [tooltipDisabled]="tooltipDisabled"
+      [tooltipPlacement]="tooltipPlacement"
+      [tooltipType]="tooltipType"
+      [tooltipTitle]="tooltipTemplate ? undefined : bar.tooltipText"
+      [tooltipTemplate]="tooltipTemplate"
+      [tooltipContext]="bar.data"
+      [noBarWhenZero]="noBarWhenZero"
+    ></svg:g>
+    <svg:g *ngIf="showDataLabel">
+      <svg:g
+        ngx-charts-bar-label
+        *ngFor="let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy"
+        [barX]="b.x"
+        [barY]="b.y"
+        [barWidth]="b.width"
+        [barHeight]="b.height"
+        [value]="b.total"
+        [valueFormatting]="dataLabelFormatting"
+        [orientation]="barOrientation.Horizontal"
+        (dimensionsChanged)="dataLabelWidthChanged.emit({ size: $event, index: i })"
+      />
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1
+                            }),
+                            animate(500, style({ opacity: 0 }))
+                        ])
+                    ])
+                ]
+            }]
+    }], function () { return []; }, { type: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], showDataLabel: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], dataLabelWidthChanged: [{
+            type: Output
+        }], dims: [{
+            type: Input
+        }], series: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], seriesName: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }], roundEdges: [{
+            type: Input
+        }], dataLabelFormatting: [{
+            type: Input
+        }] }); })();
+
+class SeriesVerticalComponent {
+    constructor() {
+        this.type = BarChartType.Standard;
+        this.tooltipDisabled = false;
+        this.animations = true;
+        this.showDataLabel = false;
+        this.noBarWhenZero = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.dataLabelHeightChanged = new EventEmitter();
+        this.barsForDataLabels = [];
+        this.barOrientation = BarOrientation;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.updateTooltipSettings();
+        let width;
+        if (this.series.length) {
+            width = this.xScale.bandwidth();
+        }
+        width = Math.round(width);
+        const yScaleMin = Math.max(this.yScale.domain()[0], 0);
+        const d0 = {
+            [D0Types.positive]: 0,
+            [D0Types.negative]: 0
+        };
+        let d0Type = D0Types.positive;
+        let total;
+        if (this.type === BarChartType.Normalized) {
+            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);
+        }
+        this.bars = this.series.map((d, index) => {
+            let value = d.value;
+            const label = this.getLabel(d);
+            const formattedLabel = formatLabel(label);
+            const roundEdges = this.roundEdges;
+            d0Type = value > 0 ? D0Types.positive : D0Types.negative;
+            const bar = {
+                value,
+                label,
+                roundEdges,
+                data: d,
+                width,
+                formattedLabel,
+                height: 0,
+                x: 0,
+                y: 0
+            };
+            if (this.type === BarChartType.Standard) {
+                bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));
+                bar.x = this.xScale(label);
+                if (value < 0) {
+                    bar.y = this.yScale(0);
+                }
+                else {
+                    bar.y = this.yScale(value);
+                }
+            }
+            else if (this.type === BarChartType.Stacked) {
+                const offset0 = d0[d0Type];
+                const offset1 = offset0 + value;
+                d0[d0Type] += value;
+                bar.height = this.yScale(offset0) - this.yScale(offset1);
+                bar.x = 0;
+                bar.y = this.yScale(offset1);
+                bar.offset0 = offset0;
+                bar.offset1 = offset1;
+            }
+            else if (this.type === BarChartType.Normalized) {
+                let offset0 = d0[d0Type];
+                let offset1 = offset0 + value;
+                d0[d0Type] += value;
+                if (total > 0) {
+                    offset0 = (offset0 * 100) / total;
+                    offset1 = (offset1 * 100) / total;
+                }
+                else {
+                    offset0 = 0;
+                    offset1 = 0;
+                }
+                bar.height = this.yScale(offset0) - this.yScale(offset1);
+                bar.x = 0;
+                bar.y = this.yScale(offset1);
+                bar.offset0 = offset0;
+                bar.offset1 = offset1;
+                value = (offset1 - offset0).toFixed(2) + '%';
+            }
+            if (this.colors.scaleType === ScaleType.Ordinal) {
+                bar.color = this.colors.getColor(label);
+            }
+            else {
+                if (this.type === BarChartType.Standard) {
+                    bar.color = this.colors.getColor(value);
+                    bar.gradientStops = this.colors.getLinearGradientStops(value);
+                }
+                else {
+                    bar.color = this.colors.getColor(bar.offset1);
+                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);
+                }
+            }
+            let tooltipLabel = formattedLabel;
+            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();
+            if (this.seriesName !== null && this.seriesName !== undefined) {
+                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;
+                bar.data.series = this.seriesName;
+                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;
+            }
+            bar.tooltipText = this.tooltipDisabled
+                ? undefined
+                : `
+        <span class="tooltip-label">${escapeLabel(tooltipLabel)}</span>
+        <span class="tooltip-val">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>
+      `;
+            return bar;
+        });
+        this.updateDataLabels();
+    }
+    updateDataLabels() {
+        if (this.type === BarChartType.Stacked) {
+            this.barsForDataLabels = [];
+            const section = {};
+            section.series = this.seriesName;
+            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);
+            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);
+            section.total = totalPositive + totalNegative;
+            section.x = 0;
+            section.y = 0;
+            if (section.total > 0) {
+                section.height = this.yScale(totalPositive);
+            }
+            else {
+                section.height = this.yScale(totalNegative);
+            }
+            section.width = this.xScale.bandwidth();
+            this.barsForDataLabels.push(section);
+        }
+        else {
+            this.barsForDataLabels = this.series.map(d => {
+                var _a;
+                const section = {};
+                section.series = (_a = this.seriesName) !== null && _a !== void 0 ? _a : d.label;
+                section.total = d.value;
+                section.x = this.xScale(d.label);
+                section.y = this.yScale(0);
+                section.height = this.yScale(section.total) - this.yScale(0);
+                section.width = this.xScale.bandwidth();
+                return section;
+            });
+        }
+    }
+    updateTooltipSettings() {
+        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;
+        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;
+    }
+    isActive(entry) {
+        if (!this.activeEntries)
+            return false;
+        const item = this.activeEntries.find(active => {
+            return entry.name === active.name && entry.value === active.value;
+        });
+        return item !== undefined;
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    getLabel(dataItem) {
+        if (dataItem.label) {
+            return dataItem.label;
+        }
+        return dataItem.name;
+    }
+    trackBy(index, bar) {
+        return bar.label;
+    }
+    trackDataLabelBy(index, barLabel) {
+        return index + '#' + barLabel.series + '#' + barLabel.total;
+    }
+}
+SeriesVerticalComponent.ɵfac = function SeriesVerticalComponent_Factory(t) { return new (t || SeriesVerticalComponent)(); };
+SeriesVerticalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SeriesVerticalComponent, selectors: [["g", "ngx-charts-series-vertical", ""]], inputs: { type: "type", tooltipDisabled: "tooltipDisabled", animations: "animations", showDataLabel: "showDataLabel", noBarWhenZero: "noBarWhenZero", dims: "dims", series: "series", xScale: "xScale", yScale: "yScale", colors: "colors", gradient: "gradient", activeEntries: "activeEntries", seriesName: "seriesName", tooltipTemplate: "tooltipTemplate", roundEdges: "roundEdges", dataLabelFormatting: "dataLabelFormatting" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate", dataLabelHeightChanged: "dataLabelHeightChanged" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c28, decls: 2, vars: 3, consts: [["ngx-charts-bar", "", "ngx-tooltip", "", 3, "width", "height", "x", "y", "fill", "stops", "data", "orientation", "roundEdges", "gradient", "ariaLabel", "isActive", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "noBarWhenZero", "animations", "select", "activate", "deactivate", 4, "ngFor", "ngForOf", "ngForTrackBy"], [4, "ngIf"], ["ngx-charts-bar", "", "ngx-tooltip", "", 3, "width", "height", "x", "y", "fill", "stops", "data", "orientation", "roundEdges", "gradient", "ariaLabel", "isActive", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "noBarWhenZero", "animations", "select", "activate", "deactivate"], ["ngx-charts-bar-label", "", 3, "barX", "barY", "barWidth", "barHeight", "value", "valueFormatting", "orientation", "dimensionsChanged", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-bar-label", "", 3, "barX", "barY", "barWidth", "barHeight", "value", "valueFormatting", "orientation", "dimensionsChanged"]], template: function SeriesVerticalComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, SeriesVerticalComponent__svg_g_0_Template, 1, 22, "g", 0);
+        ɵngcc0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1_Template, 2, 2, "g", 1);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.bars)("ngForTrackBy", ctx.trackBy);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.showDataLabel);
+    } }, directives: function () { return [ɵngcc1.NgForOf, ɵngcc1.NgIf, BarComponent, TooltipDirective, BarLabelComponent]; }, encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1
+                    }),
+                    animate(500, style({ opacity: 0 }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+SeriesVerticalComponent.propDecorators = {
+    dims: [{ type: Input }],
+    type: [{ type: Input }],
+    series: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    colors: [{ type: Input }],
+    gradient: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    seriesName: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    roundEdges: [{ type: Input }],
+    animations: [{ type: Input }],
+    showDataLabel: [{ type: Input }],
+    dataLabelFormatting: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    dataLabelHeightChanged: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SeriesVerticalComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-series-vertical]',
+                template: `
+    <svg:g
+      ngx-charts-bar
+      *ngFor="let bar of bars; trackBy: trackBy"
+      [@animationState]="'active'"
+      [@.disabled]="!animations"
+      [width]="bar.width"
+      [height]="bar.height"
+      [x]="bar.x"
+      [y]="bar.y"
+      [fill]="bar.color"
+      [stops]="bar.gradientStops"
+      [data]="bar.data"
+      [orientation]="barOrientation.Vertical"
+      [roundEdges]="bar.roundEdges"
+      [gradient]="gradient"
+      [ariaLabel]="bar.ariaLabel"
+      [isActive]="isActive(bar.data)"
+      (select)="onClick($event)"
+      (activate)="activate.emit($event)"
+      (deactivate)="deactivate.emit($event)"
+      ngx-tooltip
+      [tooltipDisabled]="tooltipDisabled"
+      [tooltipPlacement]="tooltipPlacement"
+      [tooltipType]="tooltipType"
+      [tooltipTitle]="tooltipTemplate ? undefined : bar.tooltipText"
+      [tooltipTemplate]="tooltipTemplate"
+      [tooltipContext]="bar.data"
+      [noBarWhenZero]="noBarWhenZero"
+      [animations]="animations"
+    ></svg:g>
+    <svg:g *ngIf="showDataLabel">
+      <svg:g
+        ngx-charts-bar-label
+        *ngFor="let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy"
+        [barX]="b.x"
+        [barY]="b.y"
+        [barWidth]="b.width"
+        [barHeight]="b.height"
+        [value]="b.total"
+        [valueFormatting]="dataLabelFormatting"
+        [orientation]="barOrientation.Vertical"
+        (dimensionsChanged)="dataLabelHeightChanged.emit({ size: $event, index: i })"
+      />
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1
+                            }),
+                            animate(500, style({ opacity: 0 }))
+                        ])
+                    ])
+                ]
+            }]
+    }], function () { return []; }, { type: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], showDataLabel: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], dataLabelHeightChanged: [{
+            type: Output
+        }], dims: [{
+            type: Input
+        }], series: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], seriesName: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }], roundEdges: [{
+            type: Input
+        }], dataLabelFormatting: [{
+            type: Input
+        }] }); })();
+
+class BarLabelComponent {
+    constructor(element) {
+        this.dimensionsChanged = new EventEmitter();
+        this.horizontalPadding = 2;
+        this.verticalPadding = 5;
+        this.element = element.nativeElement;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    getSize() {
+        const h = this.element.getBoundingClientRect().height;
+        const w = this.element.getBoundingClientRect().width;
+        return { height: h, width: w, negative: this.value < 0 };
+    }
+    ngAfterViewInit() {
+        this.dimensionsChanged.emit(this.getSize());
+    }
+    update() {
+        if (this.valueFormatting) {
+            this.formatedValue = this.valueFormatting(this.value);
+        }
+        else {
+            this.formatedValue = formatLabel(this.value);
+        }
+        if (this.orientation === 'horizontal') {
+            this.x = this.barX + this.barWidth;
+            // if the value is negative then it's on the left of the x0.
+            // we need to put the data label in front of the bar
+            if (this.value < 0) {
+                this.x = this.x - this.horizontalPadding;
+                this.textAnchor = 'end';
+            }
+            else {
+                this.x = this.x + this.horizontalPadding;
+                this.textAnchor = 'start';
+            }
+            this.y = this.barY + this.barHeight / 2;
+        }
+        else {
+            // orientation must be "vertical"
+            this.x = this.barX + this.barWidth / 2;
+            this.y = this.barY + this.barHeight;
+            if (this.value < 0) {
+                this.y = this.y + this.verticalPadding;
+                this.textAnchor = 'end';
+            }
+            else {
+                this.y = this.y - this.verticalPadding;
+                this.textAnchor = 'start';
+            }
+            this.transform = `rotate(-45, ${this.x} , ${this.y})`;
+        }
+    }
+}
+BarLabelComponent.ɵfac = function BarLabelComponent_Factory(t) { return new (t || BarLabelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
+BarLabelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BarLabelComponent, selectors: [["g", "ngx-charts-bar-label", ""]], inputs: { value: "value", valueFormatting: "valueFormatting", barX: "barX", barY: "barY", barWidth: "barWidth", barHeight: "barHeight", orientation: "orientation" }, outputs: { dimensionsChanged: "dimensionsChanged" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c29, decls: 2, vars: 5, consts: [["alignment-baseline", "middle", 1, "textDataLabel"]], template: function BarLabelComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "text", 0);
+        ɵngcc0.ɵɵtext(1);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵattribute("text-anchor", ctx.textAnchor)("transform", ctx.transform)("x", ctx.x)("y", ctx.y);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.formatedValue, " ");
+    } }, styles: [".textDataLabel[_ngcontent-%COMP%]{font-size:11px}"], changeDetection: 0 });
+BarLabelComponent.ctorParameters = () => [
+    { type: ElementRef }
+];
+BarLabelComponent.propDecorators = {
+    value: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    barX: [{ type: Input }],
+    barY: [{ type: Input }],
+    barWidth: [{ type: Input }],
+    barHeight: [{ type: Input }],
+    orientation: [{ type: Input }],
+    dimensionsChanged: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarLabelComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-bar-label]',
+                template: `
+    <svg:text
+      class="textDataLabel"
+      alignment-baseline="middle"
+      [attr.text-anchor]="textAnchor"
+      [attr.transform]="transform"
+      [attr.x]="x"
+      [attr.y]="y"
+    >
+      {{ formatedValue }}
+    </svg:text>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".textDataLabel{font-size:11px}\n"]
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { dimensionsChanged: [{
+            type: Output
+        }], value: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }], barX: [{
+            type: Input
+        }], barY: [{
+            type: Input
+        }], barWidth: [{
+            type: Input
+        }], barHeight: [{
+            type: Input
+        }], orientation: [{
+            type: Input
+        }] }); })();
+
+class BarChartModule {
+}
+BarChartModule.ɵfac = function BarChartModule_Factory(t) { return new (t || BarChartModule)(); };
+BarChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BarChartModule });
+BarChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BarChartModule, { declarations: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent], imports: [ChartCommonModule], exports: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BarChartModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule],
+                declarations: [
+                    BarComponent,
+                    BarHorizontalComponent,
+                    BarHorizontal2DComponent,
+                    BarHorizontalNormalizedComponent,
+                    BarHorizontalStackedComponent,
+                    BarVerticalComponent,
+                    BarVertical2DComponent,
+                    BarVerticalNormalizedComponent,
+                    BarVerticalStackedComponent,
+                    BarLabelComponent,
+                    SeriesHorizontal,
+                    SeriesVerticalComponent
+                ],
+                exports: [
+                    BarComponent,
+                    BarHorizontalComponent,
+                    BarHorizontal2DComponent,
+                    BarHorizontalNormalizedComponent,
+                    BarHorizontalStackedComponent,
+                    BarVerticalComponent,
+                    BarVertical2DComponent,
+                    BarVerticalNormalizedComponent,
+                    BarVerticalStackedComponent,
+                    BarLabelComponent,
+                    SeriesHorizontal,
+                    SeriesVerticalComponent
+                ]
+            }]
+    }], null, null); })();
+
+class BoxChartComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        /** Show or hide the legend. */
+        this.legend = false;
+        this.legendPosition = LegendPosition.Right;
+        this.legendTitle = 'Legend';
+        this.showGridLines = true;
+        this.xAxis = true;
+        this.yAxis = true;
+        this.showXAxisLabel = true;
+        this.showYAxisLabel = true;
+        this.roundDomains = false;
+        this.roundEdges = true;
+        this.strokeColor = '#FFFFFF';
+        this.strokeWidth = 2;
+        this.tooltipDisabled = false;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        /** Chart Margins (For each side, counterclock wise). */
+        this.margin = [10, 20, 10, 20];
+        /** Chart X axis dimension. */
+        this.xAxisHeight = 0;
+        /** Chart Y axis dimension. */
+        this.yAxisWidth = 0;
+    }
+    trackBy(index, item) {
+        return item.name;
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendPosition: this.legendPosition
+        });
+        this.xDomain = this.getXDomain();
+        this.yDomain = this.getYDomain();
+        this.seriesDomain = this.getSeriesDomain();
+        this.setScales();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+    }
+    setColors() {
+        let domain = [];
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.seriesDomain;
+        }
+        else {
+            domain = this.yDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    setScales() {
+        this.xScale = this.getXScale(this.xDomain, this.dims.width);
+        this.yScale = this.getYScale(this.yDomain, this.dims.height);
+    }
+    getXScale(domain, width) {
+        const scale = scaleBand()
+            .domain(domain.map(d => d.toString()))
+            .rangeRound([0, width])
+            .padding(0.5);
+        return scale;
+    }
+    getYScale(domain, height) {
+        const scale = scaleLinear().domain(domain).range([height, 0]);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    getUniqueBoxChartXDomainValues(results) {
+        const valueSet = new Set();
+        for (const result of results) {
+            valueSet.add(result.name);
+        }
+        return Array.from(valueSet);
+    }
+    getXDomain() {
+        let domain = [];
+        const values = this.getUniqueBoxChartXDomainValues(this.results);
+        let min;
+        let max;
+        if (typeof values[0] === 'string') {
+            domain = values.map(val => val.toString());
+        }
+        else if (typeof values[0] === 'number') {
+            const mappedValues = values.map(v => Number(v));
+            min = Math.min(...mappedValues);
+            max = Math.max(...mappedValues);
+            domain = [min, max];
+        }
+        else {
+            const mappedValues = values.map(v => Number(new Date(v)));
+            min = Math.min(...mappedValues);
+            max = Math.max(...mappedValues);
+            domain = [new Date(min), new Date(max)];
+        }
+        return domain;
+    }
+    getYDomain() {
+        const domain = [];
+        for (const results of this.results) {
+            for (const d of results.series) {
+                if (domain.indexOf(d.value) < 0) {
+                    domain.push(d.value);
+                }
+            }
+        }
+        const values = [...domain];
+        const mappedValues = values.map(v => Number(v));
+        const min = Math.min(...mappedValues);
+        const max = Math.max(...mappedValues);
+        return [min, max];
+    }
+    getSeriesDomain() {
+        return this.results.map(d => `${d.name}`);
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    onActivate(data) {
+        this.activate.emit(data);
+    }
+    onDeactivate(data) {
+        this.deactivate.emit(data);
+    }
+    getLegendOptions() {
+        const legendOpts = {
+            scaleType: this.schemeType,
+            colors: this.colors,
+            domain: [],
+            position: this.legendPosition,
+            title: this.legendTitle
+        };
+        if (this.schemeType === ScaleType.Ordinal) {
+            legendOpts.domain = this.xDomain;
+            legendOpts.colors = this.colors;
+        }
+        else {
+            legendOpts.domain = this.yDomain;
+            legendOpts.colors = this.colors.scale;
+        }
+        return legendOpts;
+    }
+}
+BoxChartComponent.ɵfac = function BoxChartComponent_Factory(t) { return ɵBoxChartComponent_BaseFactory(t || BoxChartComponent); };
+BoxChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BoxChartComponent, selectors: [["ngx-charts-box-chart"]], contentQueries: function BoxChartComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legend: "legend", legendPosition: "legendPosition", legendTitle: "legendTitle", showGridLines: "showGridLines", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", roundDomains: "roundDomains", roundEdges: "roundEdges", strokeColor: "strokeColor", strokeWidth: "strokeWidth", tooltipDisabled: "tooltipDisabled", legendOptionsConfig: "legendOptionsConfig", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 21, consts: [[3, "view", "showLegend", "legendOptions", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "box-chart", "chart"], ["ngx-charts-x-axis", "", 3, "showGridLines", "dims", "xScale", "showLabel", "labelText", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "showGridLines", "dims", "yScale", "showLabel", "labelText", "dimensionsChanged"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-box-series", "", 3, "xScale", "yScale", "colors", "roundEdges", "strokeColor", "strokeWidth", "tooltipDisabled", "tooltipTemplate", "series", "dims", "animations", "gradient", "activate", "deactivate", "select"]], template: function BoxChartComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function BoxChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function BoxChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event); })("legendLabelDeactivate", function BoxChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵelementStart(2, "g", 2);
+        ɵngcc0.ɵɵlistener("dimensionsChanged", function BoxChartComponent_Template__svg_g_dimensionsChanged_2_listener($event) { return ctx.updateXAxisHeight($event); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(3, "g", 3);
+        ɵngcc0.ɵɵlistener("dimensionsChanged", function BoxChartComponent_Template__svg_g_dimensionsChanged_3_listener($event) { return ctx.updateYAxisWidth($event); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(4, "g");
+        ɵngcc0.ɵɵtemplate(5, BoxChartComponent__svg_g_5_Template, 2, 12, "g", 4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(18, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("showGridLines", ctx.showGridLines)("dims", ctx.dims)("xScale", ctx.xScale)("showLabel", ctx.showXAxisLabel)("labelText", ctx.xAxisLabel);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("showGridLines", ctx.showGridLines)("dims", ctx.dims)("yScale", ctx.yScale)("showLabel", ctx.showYAxisLabel)("labelText", ctx.yAxisLabel);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+    } }, directives: function () { return [ChartComponent, XAxisComponent, YAxisComponent, ɵngcc1.NgForOf, BoxSeriesComponent]; }, styles: [_c24], encapsulation: 2, changeDetection: 0 });
+BoxChartComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendOptionsConfig: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    roundEdges: [{ type: Input }],
+    strokeColor: [{ type: Input }],
+    strokeWidth: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    gradient: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate', { static: false },] }]
+};
+const ɵBoxChartComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BoxChartComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BoxChartComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-box-chart',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [animations]="animations"
+      (legendLabelClick)="onClick($event)"
+      (legendLabelActivate)="onActivate($event)"
+      (legendLabelDeactivate)="onDeactivate($event)"
+    >
+      <svg:g [attr.transform]="transform" class="box-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          [showGridLines]="showGridLines"
+          [dims]="dims"
+          [xScale]="xScale"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        />
+        <svg:g
+          ngx-charts-y-axis
+          [showGridLines]="showGridLines"
+          [dims]="dims"
+          [yScale]="yScale"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        />
+      </svg:g>
+      <svg:g [attr.transform]="transform">
+        <svg:g *ngFor="let result of results; trackBy: trackBy">
+          <svg:g
+            ngx-charts-box-series
+            [xScale]="xScale"
+            [yScale]="yScale"
+            [colors]="colors"
+            [roundEdges]="roundEdges"
+            [strokeColor]="strokeColor"
+            [strokeWidth]="strokeWidth"
+            [tooltipDisabled]="tooltipDisabled"
+            [tooltipTemplate]="tooltipTemplate"
+            [series]="result"
+            [dims]="dims"
+            [animations]="animations"
+            [gradient]="gradient"
+            (activate)="onActivate($event)"
+            (deactivate)="onDeactivate($event)"
+            (select)="onClick($event)"
+          />
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], roundEdges: [{
+            type: Input
+        }], strokeColor: [{
+            type: Input
+        }], strokeWidth: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], legendOptionsConfig: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate', { static: false }]
+        }] }); })();
+
+class BoxSeriesComponent {
+    constructor() {
+        this.animations = true;
+        this.tooltipDisabled = false;
+        this.gradient = false;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    update() {
+        this.updateTooltipSettings();
+        const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;
+        const seriesName = this.series.name;
+        // Calculate Quantile and Whiskers for each box serie.
+        this.counts = this.series.series;
+        const mappedCounts = this.counts.map(serie => Number(serie.value));
+        this.whiskers = [min(mappedCounts), max(mappedCounts)];
+        // We get the group count and must sort it in order to retrieve quantiles.
+        const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));
+        this.quartiles = this.getBoxQuantiles(groupCounts);
+        this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);
+        const value = this.quartiles[1];
+        const formattedLabel = formatLabel(seriesName);
+        const box = {
+            value,
+            data: this.counts,
+            label: seriesName,
+            formattedLabel,
+            width,
+            height: 0,
+            x: 0,
+            y: 0,
+            roundEdges: this.roundEdges,
+            quartiles: this.quartiles,
+            lineCoordinates: this.lineCoordinates
+        };
+        box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));
+        box.x = this.xScale(seriesName.toString());
+        box.y = this.yScale(this.quartiles[2]);
+        box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();
+        if (this.colors.scaleType === ScaleType.Ordinal) {
+            box.color = this.colors.getColor(seriesName);
+        }
+        else {
+            box.color = this.colors.getColor(this.quartiles[1]);
+            box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);
+        }
+        const tooltipLabel = formattedLabel;
+        const formattedTooltipLabel = `
+    <span class="tooltip-label">${escapeLabel(tooltipLabel)}</span>
+    <span class="tooltip-val">
+      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>
+      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}
+    </span>`;
+        box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;
+        this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;
+        this.box = box;
+    }
+    getBoxQuantiles(inputData) {
+        return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];
+    }
+    getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {
+        // The X value is not being centered, so had to sum half the width to align it.
+        const commonX = this.xScale(seriesName);
+        const offsetX = commonX + barWidth / 2;
+        const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);
+        const whiskerLineWidth = Math.max(barWidth / 3, 1);
+        const whiskerZero = this.yScale(whiskers[0]);
+        const whiskerOne = this.yScale(whiskers[1]);
+        const median = this.yScale(quartiles[1]);
+        const topLine = {
+            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerZero },
+            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerZero }
+        };
+        const medianLine = {
+            v1: { x: offsetX + medianLineWidth / 2, y: median },
+            v2: { x: offsetX - medianLineWidth / 2, y: median }
+        };
+        const bottomLine = {
+            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerOne },
+            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerOne }
+        };
+        const verticalLine = {
+            v1: { x: offsetX, y: whiskerZero },
+            v2: { x: offsetX, y: whiskerOne }
+        };
+        return [verticalLine, topLine, medianLine, bottomLine];
+    }
+    updateTooltipSettings() {
+        if (this.tooltipDisabled) {
+            this.tooltipPlacement = undefined;
+            this.tooltipType = undefined;
+        }
+        else {
+            if (!this.tooltipPlacement) {
+                this.tooltipPlacement = PlacementTypes.Top;
+            }
+            if (!this.tooltipType) {
+                this.tooltipType = StyleTypes.tooltip;
+            }
+        }
+    }
+}
+BoxSeriesComponent.ɵfac = function BoxSeriesComponent_Factory(t) { return new (t || BoxSeriesComponent)(); };
+BoxSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BoxSeriesComponent, selectors: [["g", "ngx-charts-box-series", ""]], inputs: { animations: "animations", tooltipDisabled: "tooltipDisabled", gradient: "gradient", tooltipPlacement: "tooltipPlacement", tooltipType: "tooltipType", dims: "dims", series: "series", xScale: "xScale", yScale: "yScale", colors: "colors", strokeColor: "strokeColor", strokeWidth: "strokeWidth", tooltipTemplate: "tooltipTemplate", roundEdges: "roundEdges" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c30, decls: 1, vars: 22, consts: [["ngx-charts-box", "", "ngx-tooltip", "", 3, "width", "height", "x", "y", "roundEdges", "fill", "gradientStops", "strokeColor", "strokeWidth", "data", "lineCoordinates", "gradient", "ariaLabel", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "animations", "select", "activate", "deactivate"]], template: function BoxSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g", 0);
+        ɵngcc0.ɵɵlistener("select", function BoxSeriesComponent_Template__svg_g_select_0_listener($event) { return ctx.onClick($event); })("activate", function BoxSeriesComponent_Template__svg_g_activate_0_listener($event) { return ctx.activate.emit($event); })("deactivate", function BoxSeriesComponent_Template__svg_g_deactivate_0_listener($event) { return ctx.deactivate.emit($event); });
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("@animationState", "active")("@.disabled", !ctx.animations)("width", ctx.box.width)("height", ctx.box.height)("x", ctx.box.x)("y", ctx.box.y)("roundEdges", ctx.box.roundEdges)("fill", ctx.box.color)("gradientStops", ctx.box.gradientStops)("strokeColor", ctx.strokeColor)("strokeWidth", ctx.strokeWidth)("data", ctx.box.data)("lineCoordinates", ctx.box.lineCoordinates)("gradient", ctx.gradient)("ariaLabel", ctx.box.ariaLabel)("tooltipDisabled", ctx.tooltipDisabled)("tooltipPlacement", ctx.tooltipPlacement)("tooltipType", ctx.tooltipType)("tooltipTitle", ctx.tooltipTitle)("tooltipTemplate", ctx.tooltipTemplate)("tooltipContext", ctx.box.data)("animations", ctx.animations);
+    } }, directives: function () { return [BoxComponent, TooltipDirective]; }, encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1
+                    }),
+                    animate(500, style({ opacity: 0 }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+BoxSeriesComponent.propDecorators = {
+    dims: [{ type: Input }],
+    series: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    colors: [{ type: Input }],
+    animations: [{ type: Input }],
+    strokeColor: [{ type: Input }],
+    strokeWidth: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    tooltipPlacement: [{ type: Input }],
+    tooltipType: [{ type: Input }],
+    roundEdges: [{ type: Input }],
+    gradient: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BoxSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-box-series]',
+                template: `
+    <svg:g
+      ngx-charts-box
+      [@animationState]="'active'"
+      [@.disabled]="!animations"
+      [width]="box.width"
+      [height]="box.height"
+      [x]="box.x"
+      [y]="box.y"
+      [roundEdges]="box.roundEdges"
+      [fill]="box.color"
+      [gradientStops]="box.gradientStops"
+      [strokeColor]="strokeColor"
+      [strokeWidth]="strokeWidth"
+      [data]="box.data"
+      [lineCoordinates]="box.lineCoordinates"
+      [gradient]="gradient"
+      [ariaLabel]="box.ariaLabel"
+      (select)="onClick($event)"
+      (activate)="activate.emit($event)"
+      (deactivate)="deactivate.emit($event)"
+      ngx-tooltip
+      [tooltipDisabled]="tooltipDisabled"
+      [tooltipPlacement]="tooltipPlacement"
+      [tooltipType]="tooltipType"
+      [tooltipTitle]="tooltipTitle"
+      [tooltipTemplate]="tooltipTemplate"
+      [tooltipContext]="box.data"
+      [animations]="animations"
+    ></svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1
+                            }),
+                            animate(500, style({ opacity: 0 }))
+                        ])
+                    ])
+                ]
+            }]
+    }], function () { return []; }, { animations: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], tooltipPlacement: [{
+            type: Input
+        }], tooltipType: [{
+            type: Input
+        }], dims: [{
+            type: Input
+        }], series: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], strokeColor: [{
+            type: Input
+        }], strokeWidth: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }], roundEdges: [{
+            type: Input
+        }] }); })();
+
+class BoxComponent {
+    constructor(element, cd) {
+        this.cd = cd;
+        this.roundEdges = true;
+        this.gradient = false;
+        this.offset = 0;
+        this.isActive = false;
+        this.animations = true;
+        this.noBarWhenZero = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.BarOrientation = BarOrientation;
+        this.initialized = false;
+        this.hasGradient = false;
+        this.hideBar = false;
+        this.nativeElm = element.nativeElement;
+    }
+    ngOnChanges(changes) {
+        if (!this.initialized) {
+            this.loadAnimation();
+            this.initialized = true;
+        }
+        else {
+            this.update();
+        }
+    }
+    update() {
+        this.boxStrokeWidth = Math.max(this.strokeWidth, 1);
+        this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);
+        this.medianLineWidth = 1.5 * this.strokeWidth;
+        this.gradientId = 'grad' + id().toString();
+        this.gradientFill = `url(#${this.gradientId})`;
+        if (this.gradient) {
+            this.gradientStops = this.getGradient();
+            this.hasGradient = true;
+        }
+        else {
+            this.hasGradient = false;
+        }
+        this.updateLineEl();
+        this.updatePathEl();
+        this.checkToHideBar();
+        this.maskLineId = 'mask' + id().toString();
+        this.maskLine = `url(#${this.maskLineId})`;
+        if (this.cd) {
+            this.cd.markForCheck();
+        }
+    }
+    loadAnimation() {
+        this.boxPath = this.oldPath = this.getStartingPath();
+        this.oldLineCoordinates = this.getStartingLineCoordinates();
+        setTimeout(this.update.bind(this), 100);
+    }
+    updatePathEl() {
+        const nodeBar = select(this.nativeElm).selectAll('.bar');
+        const path = this.getPath();
+        if (this.animations) {
+            nodeBar
+                .attr('d', this.oldPath)
+                .transition()
+                .ease(easeSinInOut)
+                .duration(500)
+                .attrTween('d', this.pathTween(path, 4));
+        }
+        else {
+            nodeBar.attr('d', path);
+        }
+        this.oldPath = path;
+    }
+    updateLineEl() {
+        const lineEl = select(this.nativeElm).selectAll('.bar-line');
+        const lineCoordinates = this.lineCoordinates;
+        const oldLineCoordinates = this.oldLineCoordinates;
+        if (this.animations) {
+            lineEl
+                .attr('x1', (_, index) => oldLineCoordinates[index].v1.x)
+                .attr('y1', (_, index) => oldLineCoordinates[index].v1.y)
+                .attr('x2', (_, index) => oldLineCoordinates[index].v2.x)
+                .attr('y2', (_, index) => oldLineCoordinates[index].v2.y)
+                .transition()
+                .ease(easeSinInOut)
+                .duration(500)
+                .attr('x1', (_, index) => lineCoordinates[index].v1.x)
+                .attr('y1', (_, index) => lineCoordinates[index].v1.y)
+                .attr('x2', (_, index) => lineCoordinates[index].v2.x)
+                .attr('y2', (_, index) => lineCoordinates[index].v2.y);
+        }
+        else {
+            lineEl
+                .attr('x1', (_, index) => lineCoordinates[index].v1.x)
+                .attr('y1', (_, index) => lineCoordinates[index].v1.y)
+                .attr('x2', (_, index) => lineCoordinates[index].v2.x)
+                .attr('y2', (_, index) => lineCoordinates[index].v2.y);
+        }
+        this.oldLineCoordinates = [...lineCoordinates];
+    }
+    /**
+     * See [D3 Selections](https://www.d3indepth.com/selections/)
+     * @param d The joined data.
+     * @param index The index of the element within the selection
+     * @param node The node element (Line).
+     */
+    lineTween(attr, d, index, node) {
+        const nodeLineEl = node[index];
+        return nodeLineEl[attr].baseVal.value;
+    }
+    // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.
+    pathTween(d1, precision) {
+        return function () {
+            // tslint:disable-next-line: no-this-assignment
+            const path0 = this;
+            const path1 = this.cloneNode();
+            path1.setAttribute('d', d1);
+            const n0 = path0 === null || path0 === void 0 ? void 0 : path0.getTotalLength();
+            const n1 = path1 === null || path1 === void 0 ? void 0 : path1.getTotalLength();
+            // Uniform sampling of distance based on specified precision.
+            const distances = [0];
+            let i = 0;
+            const dt = precision / Math.max(n0, n1);
+            while (i < 1) {
+                distances.push(i);
+                i += dt;
+            }
+            distances.push(1);
+            // Compute point-interpolators at each distance.
+            const points = distances.map((t) => {
+                const p0 = path0.getPointAtLength(t * n0);
+                const p1 = path1.getPointAtLength(t * n1);
+                return interpolate([p0.x, p0.y], [p1.x, p1.y]);
+            });
+            // 't': T is the fraction of time (between 0 and 1) since the transition began.
+            return (t) => {
+                return t < 1 ? 'M' + points.map((p) => p(t)).join('L') : d1;
+            };
+        };
+    }
+    getStartingPath() {
+        if (!this.animations) {
+            return this.getPath();
+        }
+        const radius = this.roundEdges ? 1 : 0;
+        const { x, y } = this.lineCoordinates[2].v1;
+        return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);
+    }
+    getPath() {
+        const radius = this.getRadius();
+        let path = '';
+        path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);
+        return path;
+    }
+    getStartingLineCoordinates() {
+        if (!this.animations) {
+            return [...this.lineCoordinates];
+        }
+        const lineCoordinates = cloneDeep(this.lineCoordinates);
+        lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y =
+            lineCoordinates[2].v1.y;
+        return lineCoordinates;
+    }
+    getRadius() {
+        let radius = 0;
+        if (this.roundEdges && this.height > 5 && this.width > 5) {
+            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));
+        }
+        return radius;
+    }
+    getGradient() {
+        return [
+            {
+                offset: 0,
+                color: this.fill,
+                opacity: this.getStartOpacity()
+            },
+            {
+                offset: 100,
+                color: this.fill,
+                opacity: 1
+            }
+        ];
+    }
+    getStartOpacity() {
+        if (this.roundEdges) {
+            return 0.2;
+        }
+        else {
+            return 0.5;
+        }
+    }
+    get edges() {
+        let edges = [false, false, false, false];
+        if (this.roundEdges) {
+            edges = [true, true, true, true];
+        }
+        return edges;
+    }
+    onMouseEnter() {
+        this.activate.emit(this.data);
+    }
+    onMouseLeave() {
+        this.deactivate.emit(this.data);
+    }
+    checkToHideBar() {
+        this.hideBar = this.noBarWhenZero && this.height === 0;
+    }
+}
+BoxComponent.ɵfac = function BoxComponent_Factory(t) { return new (t || BoxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
+BoxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BoxComponent, selectors: [["g", "ngx-charts-box", ""]], hostBindings: function BoxComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("mouseenter", function BoxComponent_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function BoxComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
+    } }, inputs: { roundEdges: "roundEdges", gradient: "gradient", offset: "offset", isActive: "isActive", animations: "animations", noBarWhenZero: "noBarWhenZero", gradientStops: "gradientStops", strokeColor: "strokeColor", strokeWidth: "strokeWidth", fill: "fill", data: "data", width: "width", height: "height", x: "x", y: "y", lineCoordinates: "lineCoordinates", ariaLabel: "ariaLabel" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c31, decls: 9, vars: 13, consts: [["ngx-charts-svg-linear-gradient", "", 3, "orientation", "name", "stops", 4, "ngIf"], ["height", "100%", "width", "100%", "fill", "white", "fill-opacity", "1"], ["fill", "black", "fill-opacity", "1", 1, "bar"], ["role", "img", "tabIndex", "-1", 1, "bar", 3, "click"], ["class", "bar-line", "fill", "none", 3, "hidden", 4, "ngFor", "ngForOf"], ["ngx-charts-svg-linear-gradient", "", 3, "orientation", "name", "stops"], ["fill", "none", 1, "bar-line"]], template: function BoxComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "defs");
+        ɵngcc0.ɵɵtemplate(1, BoxComponent__svg_g_1_Template, 1, 3, "g", 0);
+        ɵngcc0.ɵɵelementStart(2, "mask");
+        ɵngcc0.ɵɵelementStart(3, "g");
+        ɵngcc0.ɵɵelement(4, "rect", 1);
+        ɵngcc0.ɵɵelement(5, "path", 2);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(6, "g");
+        ɵngcc0.ɵɵelementStart(7, "path", 3);
+        ɵngcc0.ɵɵlistener("click", function BoxComponent_Template__svg_path_click_7_listener() { return ctx.select.emit(ctx.data); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(8, BoxComponent__svg_line_8_Template, 1, 9, "line", 4);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.hasGradient);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("id", ctx.maskLineId);
+        ɵngcc0.ɵɵadvance(3);
+        ɵngcc0.ɵɵattribute("d", ctx.boxPath);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵclassProp("active", ctx.isActive)("hidden", ctx.hideBar);
+        ɵngcc0.ɵɵattribute("d", ctx.boxPath)("stroke", ctx.strokeColor)("stroke-width", ctx.boxStrokeWidth)("aria-label", ctx.ariaLabel)("fill", ctx.hasGradient ? ctx.gradientFill : ctx.fill);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.lineCoordinates);
+    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, SvgLinearGradientComponent], encapsulation: 2, changeDetection: 0 });
+BoxComponent.ctorParameters = () => [
+    { type: ElementRef },
+    { type: ChangeDetectorRef }
+];
+BoxComponent.propDecorators = {
+    strokeColor: [{ type: Input }],
+    strokeWidth: [{ type: Input }],
+    fill: [{ type: Input }],
+    data: [{ type: Input }],
+    width: [{ type: Input }],
+    height: [{ type: Input }],
+    x: [{ type: Input }],
+    y: [{ type: Input }],
+    lineCoordinates: [{ type: Input }],
+    roundEdges: [{ type: Input }],
+    gradient: [{ type: Input }],
+    gradientStops: [{ type: Input }],
+    offset: [{ type: Input }],
+    isActive: [{ type: Input }],
+    animations: [{ type: Input }],
+    ariaLabel: [{ type: Input }],
+    noBarWhenZero: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
+    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BoxComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-box]',
+                template: `
+    <svg:defs>
+      <svg:g
+        *ngIf="hasGradient"
+        ngx-charts-svg-linear-gradient
+        [orientation]="BarOrientation.Vertical"
+        [name]="gradientId"
+        [stops]="gradientStops"
+      />
+      <svg:mask [attr.id]="maskLineId">
+        <svg:g>
+          <rect height="100%" width="100%" fill="white" fill-opacity="1" />
+          <path class="bar" [attr.d]="boxPath" fill="black" fill-opacity="1" />
+        </svg:g>
+      </svg:mask>
+    </svg:defs>
+    <svg:g>
+      <svg:path
+        class="bar"
+        role="img"
+        tabIndex="-1"
+        [class.active]="isActive"
+        [class.hidden]="hideBar"
+        [attr.d]="boxPath"
+        [attr.stroke]="strokeColor"
+        [attr.stroke-width]="boxStrokeWidth"
+        [attr.aria-label]="ariaLabel"
+        [attr.fill]="hasGradient ? gradientFill : fill"
+        (click)="select.emit(data)"
+      />
+      <svg:line
+        *ngFor="let line of lineCoordinates; let i = index"
+        class="bar-line"
+        [class.hidden]="hideBar"
+        [attr.x1]="line.v1.x"
+        [attr.y1]="line.v1.y"
+        [attr.x2]="line.v2.x"
+        [attr.y2]="line.v2.y"
+        [attr.stroke]="strokeColor"
+        [attr.stroke-width]="i === 2 ? medianLineWidth : whiskerStrokeWidth"
+        [attr.mask]="i ? undefined : maskLine"
+        fill="none"
+      />
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { roundEdges: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], offset: [{
+            type: Input
+        }], isActive: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], noBarWhenZero: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], gradientStops: [{
+            type: Input
+        }], onMouseEnter: [{
+            type: HostListener,
+            args: ['mouseenter']
+        }], onMouseLeave: [{
+            type: HostListener,
+            args: ['mouseleave']
+        }], strokeColor: [{
+            type: Input
+        }], strokeWidth: [{
+            type: Input
+        }], fill: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }], width: [{
+            type: Input
+        }], height: [{
+            type: Input
+        }], x: [{
+            type: Input
+        }], y: [{
+            type: Input
+        }], lineCoordinates: [{
+            type: Input
+        }], ariaLabel: [{
+            type: Input
+        }] }); })();
+
+class BoxChartModule {
+}
+BoxChartModule.ɵfac = function BoxChartModule_Factory(t) { return new (t || BoxChartModule)(); };
+BoxChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BoxChartModule });
+BoxChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BoxChartModule, { declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent], imports: [ChartCommonModule], exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BoxChartModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule],
+                declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],
+                exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]
+            }]
+    }], null, null); })();
+
+function getDomain(values, scaleType, autoScale, minVal, maxVal) {
+    let domain = [];
+    if (scaleType === ScaleType.Linear) {
+        values = values.map(v => Number(v));
+        if (!autoScale) {
+            values.push(0);
+        }
+    }
+    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {
+        const min = minVal ? minVal : Math.min(...values);
+        const max = maxVal ? maxVal : Math.max(...values);
+        domain = [min, max];
+    }
+    else {
+        domain = values;
+    }
+    return domain;
+}
+function getScale(domain, range, scaleType, roundDomains) {
+    switch (scaleType) {
+        case ScaleType.Time:
+            return scaleTime().range(range).domain(domain);
+        case ScaleType.Linear: {
+            const scale = scaleLinear().range(range).domain(domain);
+            if (roundDomains) {
+                return scale.nice();
+            }
+            return scale;
+        }
+        case ScaleType.Ordinal:
+            return scalePoint()
+                .range([range[0], range[1]])
+                .domain(domain.map(r => r.toString()));
+        default:
+            return undefined;
+    }
+}
+
+class BubbleChartComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.showGridLines = true;
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.xAxis = true;
+        this.yAxis = true;
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.roundDomains = false;
+        this.maxRadius = 10;
+        this.minRadius = 3;
+        this.schemeType = ScaleType.Ordinal;
+        this.tooltipDisabled = false;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.scaleType = ScaleType.Linear;
+        this.margin = [10, 20, 10, 20];
+        this.bubblePadding = [0, 0, 0, 0];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.activeEntries = [];
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        this.seriesDomain = this.results.map(d => d.name);
+        this.rDomain = this.getRDomain();
+        this.xDomain = this.getXDomain();
+        this.yDomain = this.getYDomain();
+        this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;
+        const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;
+        this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);
+        this.data = this.results;
+        this.minRadius = Math.max(this.minRadius, 1);
+        this.maxRadius = Math.max(this.maxRadius, 1);
+        this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);
+        this.bubblePadding = [0, 0, 0, 0];
+        this.setScales();
+        this.bubblePadding = this.getBubblePadding();
+        this.setScales();
+        this.legendOptions = this.getLegendOptions();
+        this.clipPathId = 'clip' + id().toString();
+        this.clipPath = `url(#${this.clipPathId})`;
+    }
+    hideCircles() {
+        this.deactivateAll();
+    }
+    onClick(data, series) {
+        if (series) {
+            data.series = series.name;
+        }
+        this.select.emit(data);
+    }
+    getBubblePadding() {
+        let yMin = 0;
+        let xMin = 0;
+        let yMax = this.dims.height;
+        let xMax = this.dims.width;
+        for (const s of this.data) {
+            for (const d of s.series) {
+                const r = this.rScale(d.r);
+                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);
+                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);
+                xMin = Math.max(r - cx, xMin);
+                yMin = Math.max(r - cy, yMin);
+                yMax = Math.max(cy + r, yMax);
+                xMax = Math.max(cx + r, xMax);
+            }
+        }
+        xMax = Math.max(xMax - this.dims.width, 0);
+        yMax = Math.max(yMax - this.dims.height, 0);
+        return [yMin, xMax, yMax, xMin];
+    }
+    setScales() {
+        let width = this.dims.width;
+        if (this.xScaleMin === undefined && this.xScaleMax === undefined) {
+            width = width - this.bubblePadding[1];
+        }
+        let height = this.dims.height;
+        if (this.yScaleMin === undefined && this.yScaleMax === undefined) {
+            height = height - this.bubblePadding[2];
+        }
+        this.xScale = this.getXScale(this.xDomain, width);
+        this.yScale = this.getYScale(this.yDomain, height);
+    }
+    getYScale(domain, height) {
+        return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);
+    }
+    getXScale(domain, width) {
+        return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);
+    }
+    getRScale(domain, range) {
+        const scale = scaleLinear().range(range).domain(domain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            position: this.legendPosition,
+            title: undefined
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.seriesDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.rDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    getXDomain() {
+        const values = [];
+        for (const results of this.results) {
+            for (const d of results.series) {
+                if (!values.includes(d.x)) {
+                    values.push(d.x);
+                }
+            }
+        }
+        this.xScaleType = getScaleType(values);
+        return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);
+    }
+    getYDomain() {
+        const values = [];
+        for (const results of this.results) {
+            for (const d of results.series) {
+                if (!values.includes(d.y)) {
+                    values.push(d.y);
+                }
+            }
+        }
+        this.yScaleType = getScaleType(values);
+        return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);
+    }
+    getRDomain() {
+        let min = Infinity;
+        let max = -Infinity;
+        for (const results of this.results) {
+            for (const d of results.series) {
+                const value = Number(d.r) || 1;
+                min = Math.min(min, value);
+                max = Math.max(max, value);
+            }
+        }
+        return [min, max];
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item, ...this.activeEntries];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+    deactivateAll() {
+        this.activeEntries = [...this.activeEntries];
+        for (const entry of this.activeEntries) {
+            this.deactivate.emit({ value: entry, entries: [] });
+        }
+        this.activeEntries = [];
+    }
+    trackBy(index, item) {
+        return `${item.name}`;
+    }
+}
+BubbleChartComponent.ɵfac = function BubbleChartComponent_Factory(t) { return ɵBubbleChartComponent_BaseFactory(t || BubbleChartComponent); };
+BubbleChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BubbleChartComponent, selectors: [["ngx-charts-bubble-chart"]], contentQueries: function BubbleChartComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, hostBindings: function BubbleChartComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("mouseleave", function BubbleChartComponent_mouseleave_HostBindingHandler() { return ctx.hideCircles(); });
+    } }, inputs: { showGridLines: "showGridLines", legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", xAxis: "xAxis", yAxis: "yAxis", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", roundDomains: "roundDomains", maxRadius: "maxRadius", minRadius: "minRadius", schemeType: "schemeType", tooltipDisabled: "tooltipDisabled", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", autoScale: "autoScale", xScaleMin: "xScaleMin", xScaleMax: "xScaleMax", yScaleMin: "yScaleMin", yScaleMax: "yScaleMax" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 10, vars: 20, consts: [[3, "view", "showLegend", "activeEntries", "legendOptions", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "bubble-chart", "chart"], ["ngx-charts-x-axis", "", 3, "showGridLines", "dims", "xScale", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "showGridLines", "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["x", "0", "y", "0", 1, "bubble-chart-area", 2, "fill", "rgb(255, 0, 0)", "opacity", "0", "cursor", "auto", 3, "mouseenter"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-x-axis", "", 3, "showGridLines", "dims", "xScale", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "showGridLines", "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-bubble-series", "", 3, "xScale", "yScale", "rScale", "xScaleType", "yScaleType", "xAxisLabel", "yAxisLabel", "colors", "data", "activeEntries", "tooltipDisabled", "tooltipTemplate", "select", "activate", "deactivate"]], template: function BubbleChartComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event); })("legendLabelDeactivate", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "defs");
+        ɵngcc0.ɵɵelementStart(2, "clipPath");
+        ɵngcc0.ɵɵelement(3, "rect");
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(4, "g", 1);
+        ɵngcc0.ɵɵtemplate(5, BubbleChartComponent__svg_g_5_Template, 1, 10, "g", 2);
+        ɵngcc0.ɵɵtemplate(6, BubbleChartComponent__svg_g_6_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵelementStart(7, "rect", 4);
+        ɵngcc0.ɵɵlistener("mouseenter", function BubbleChartComponent_Template__svg_rect_mouseenter_7_listener() { return ctx.deactivateAll(); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(8, "g");
+        ɵngcc0.ɵɵtemplate(9, BubbleChartComponent__svg_g_9_Template, 2, 13, "g", 5);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("activeEntries", ctx.activeEntries)("legendOptions", ctx.legendOptions)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵattribute("id", ctx.clipPathId);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("width", ctx.dims.width + 10)("height", ctx.dims.height + 10)("transform", "translate(-5, -5)");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("width", ctx.dims.width)("height", ctx.dims.height);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("clip-path", ctx.clipPath);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.data)("ngForTrackBy", ctx.trackBy);
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, BubbleSeriesComponent]; }, styles: [_c24], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1
+                    }),
+                    animate(500, style({
+                        opacity: 0
+                    }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+BubbleChartComponent.propDecorators = {
+    showGridLines: [{ type: Input }],
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    maxRadius: [{ type: Input }],
+    minRadius: [{ type: Input }],
+    autoScale: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    xScaleMin: [{ type: Input }],
+    xScaleMax: [{ type: Input }],
+    yScaleMin: [{ type: Input }],
+    yScaleMax: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }],
+    hideCircles: [{ type: HostListener, args: ['mouseleave',] }]
+};
+const ɵBubbleChartComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BubbleChartComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BubbleChartComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-bubble-chart',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [activeEntries]="activeEntries"
+      [legendOptions]="legendOptions"
+      [animations]="animations"
+      (legendLabelClick)="onClick($event)"
+      (legendLabelActivate)="onActivate($event)"
+      (legendLabelDeactivate)="onDeactivate($event)"
+    >
+      <svg:defs>
+        <svg:clipPath [attr.id]="clipPathId">
+          <svg:rect
+            [attr.width]="dims.width + 10"
+            [attr.height]="dims.height + 10"
+            [attr.transform]="'translate(-5, -5)'"
+          />
+        </svg:clipPath>
+      </svg:defs>
+      <svg:g [attr.transform]="transform" class="bubble-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [showGridLines]="showGridLines"
+          [dims]="dims"
+          [xScale]="xScale"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        />
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [showGridLines]="showGridLines"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        />
+        <svg:rect
+          class="bubble-chart-area"
+          x="0"
+          y="0"
+          [attr.width]="dims.width"
+          [attr.height]="dims.height"
+          style="fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';"
+          (mouseenter)="deactivateAll()"
+        />
+        <svg:g [attr.clip-path]="clipPath">
+          <svg:g *ngFor="let series of data; trackBy: trackBy" [@animationState]="'active'">
+            <svg:g
+              ngx-charts-bubble-series
+              [xScale]="xScale"
+              [yScale]="yScale"
+              [rScale]="rScale"
+              [xScaleType]="xScaleType"
+              [yScaleType]="yScaleType"
+              [xAxisLabel]="xAxisLabel"
+              [yAxisLabel]="yAxisLabel"
+              [colors]="colors"
+              [data]="series"
+              [activeEntries]="activeEntries"
+              [tooltipDisabled]="tooltipDisabled"
+              [tooltipTemplate]="tooltipTemplate"
+              (select)="onClick($event, series)"
+              (activate)="onActivate($event)"
+              (deactivate)="onDeactivate($event)"
+            />
+          </svg:g>
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1
+                            }),
+                            animate(500, style({
+                                opacity: 0
+                            }))
+                        ])
+                    ])
+                ],
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { showGridLines: [{
+            type: Input
+        }], legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], maxRadius: [{
+            type: Input
+        }], minRadius: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], hideCircles: [{
+            type: HostListener,
+            args: ['mouseleave']
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], autoScale: [{
+            type: Input
+        }], xScaleMin: [{
+            type: Input
+        }], xScaleMax: [{
+            type: Input
+        }], yScaleMin: [{
+            type: Input
+        }], yScaleMax: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class BubbleSeriesComponent {
+    constructor() {
+        this.tooltipDisabled = false;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.placementTypes = PlacementTypes;
+        this.styleTypes = StyleTypes;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.circles = this.getCircles();
+    }
+    getCircles() {
+        const seriesName = this.data.name;
+        return this.data.series
+            .map((d, i) => {
+            if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {
+                const y = d.y;
+                const x = d.x;
+                const r = d.r;
+                const radius = this.rScale(r || 1);
+                const tooltipLabel = formatLabel(d.name);
+                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);
+                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);
+                const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);
+                const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });
+                const opacity = isActive ? 1 : 0.3;
+                const data = Object.assign({}, d, {
+                    series: seriesName,
+                    name: d.name,
+                    value: d.y,
+                    x: d.x,
+                    radius: d.r
+                });
+                return {
+                    data,
+                    x,
+                    y,
+                    r,
+                    classNames: [`circle-data-${i}`],
+                    value: y,
+                    label: x,
+                    cx,
+                    cy,
+                    radius,
+                    tooltipLabel,
+                    color,
+                    opacity,
+                    seriesName,
+                    isActive,
+                    transform: `translate(${cx},${cy})`
+                };
+            }
+        })
+            .filter(circle => circle !== undefined);
+    }
+    getTooltipText(circle) {
+        const hasRadius = typeof circle.r !== 'undefined';
+        const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;
+        const hasSeriesName = circle.seriesName && circle.seriesName.length;
+        const radiusValue = hasRadius ? formatLabel(circle.r) : '';
+        const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';
+        const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';
+        const x = formatLabel(circle.x);
+        const y = formatLabel(circle.y);
+        const name = hasSeriesName && hasTooltipLabel
+            ? `${circle.seriesName} • ${circle.tooltipLabel}`
+            : circle.seriesName + circle.tooltipLabel;
+        const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class="tooltip-label">${escapeLabel(name)}</span>` : '';
+        return `
+      ${tooltipTitle}
+      <span class="tooltip-label">
+        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />
+        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}
+      </span>
+      <span class="tooltip-val">
+        ${escapeLabel(radiusValue)}
+      </span>
+    `;
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    isActive(entry) {
+        if (!this.activeEntries)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.name === d.name;
+        });
+        return item !== undefined;
+    }
+    isVisible(circle) {
+        if (this.activeEntries.length > 0) {
+            return this.isActive({ name: circle.seriesName });
+        }
+        return circle.opacity !== 0;
+    }
+    activateCircle(circle) {
+        circle.barVisible = true;
+        this.activate.emit({ name: this.data.name });
+    }
+    deactivateCircle(circle) {
+        circle.barVisible = false;
+        this.deactivate.emit({ name: this.data.name });
+    }
+    trackBy(index, circle) {
+        return `${circle.data.series} ${circle.data.name}`;
+    }
+}
+BubbleSeriesComponent.ɵfac = function BubbleSeriesComponent_Factory(t) { return new (t || BubbleSeriesComponent)(); };
+BubbleSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BubbleSeriesComponent, selectors: [["g", "ngx-charts-bubble-series", ""]], inputs: { tooltipDisabled: "tooltipDisabled", data: "data", xScale: "xScale", yScale: "yScale", rScale: "rScale", xScaleType: "xScaleType", yScaleType: "yScaleType", colors: "colors", visibleValue: "visibleValue", activeEntries: "activeEntries", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", tooltipTemplate: "tooltipTemplate" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c32, decls: 1, vars: 2, consts: [[4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-circle", "", "ngx-tooltip", "", 1, "circle", 3, "cx", "cy", "r", "fill", "pointerEvents", "data", "classNames", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate"]], template: function BubbleSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, BubbleSeriesComponent__svg_g_0_Template, 3, 19, "g", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.circles)("ngForTrackBy", ctx.trackBy);
+    } }, directives: [ɵngcc1.NgForOf, CircleComponent, TooltipDirective], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':enter', [
+                    style({
+                        opacity: 0,
+                        transform: 'scale(0)'
+                    }),
+                    animate(250, style({ opacity: 1, transform: 'scale(1)' }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+BubbleSeriesComponent.propDecorators = {
+    data: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    rScale: [{ type: Input }],
+    xScaleType: [{ type: Input }],
+    yScaleType: [{ type: Input }],
+    colors: [{ type: Input }],
+    visibleValue: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BubbleSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-bubble-series]',
+                template: `
+    <svg:g *ngFor="let circle of circles; trackBy: trackBy">
+      <svg:g [attr.transform]="circle.transform">
+        <svg:g
+          ngx-charts-circle
+          [@animationState]="'active'"
+          class="circle"
+          [cx]="0"
+          [cy]="0"
+          [r]="circle.radius"
+          [fill]="circle.color"
+          [style.opacity]="circle.opacity"
+          [class.active]="circle.isActive"
+          [pointerEvents]="'all'"
+          [data]="circle.value"
+          [classNames]="circle.classNames"
+          (select)="onClick(circle.data)"
+          (activate)="activateCircle(circle)"
+          (deactivate)="deactivateCircle(circle)"
+          ngx-tooltip
+          [tooltipDisabled]="tooltipDisabled"
+          [tooltipPlacement]="placementTypes.Top"
+          [tooltipType]="styleTypes.tooltip"
+          [tooltipTitle]="tooltipTemplate ? undefined : getTooltipText(circle)"
+          [tooltipTemplate]="tooltipTemplate"
+          [tooltipContext]="circle.data"
+        />
+      </svg:g>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':enter', [
+                            style({
+                                opacity: 0,
+                                transform: 'scale(0)'
+                            }),
+                            animate(250, style({ opacity: 1, transform: 'scale(1)' }))
+                        ])
+                    ])
+                ]
+            }]
+    }], function () { return []; }, { tooltipDisabled: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], data: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], rScale: [{
+            type: Input
+        }], xScaleType: [{
+            type: Input
+        }], yScaleType: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], visibleValue: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }] }); })();
+
+class BubbleChartModule {
+}
+BubbleChartModule.ɵfac = function BubbleChartModule_Factory(t) { return new (t || BubbleChartModule)(); };
+BubbleChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BubbleChartModule });
+BubbleChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BubbleChartModule, { declarations: [BubbleChartComponent, BubbleSeriesComponent], imports: [ChartCommonModule], exports: [BubbleChartComponent, BubbleSeriesComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BubbleChartModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule],
+                declarations: [BubbleChartComponent, BubbleSeriesComponent],
+                exports: [BubbleChartComponent, BubbleSeriesComponent]
+            }]
+    }], null, null); })();
+
+class HeatMapCellComponent {
+    constructor(element) {
+        this.gradient = false;
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.barOrientation = BarOrientation;
+        this.element = element.nativeElement;
+    }
+    ngOnChanges(changes) {
+        this.transform = `translate(${this.x} , ${this.y})`;
+        this.startOpacity = 0.3;
+        this.gradientId = 'grad' + id().toString();
+        this.gradientUrl = `url(#${this.gradientId})`;
+        this.gradientStops = this.getGradientStops();
+        if (this.animations) {
+            this.loadAnimation();
+        }
+    }
+    getGradientStops() {
+        return [
+            {
+                offset: 0,
+                color: this.fill,
+                opacity: this.startOpacity
+            },
+            {
+                offset: 100,
+                color: this.fill,
+                opacity: 1
+            }
+        ];
+    }
+    loadAnimation() {
+        const node = select(this.element).select('.cell');
+        node.attr('opacity', 0);
+        this.animateToCurrentForm();
+    }
+    animateToCurrentForm() {
+        const node = select(this.element).select('.cell');
+        node.transition().duration(750).attr('opacity', 1);
+    }
+    onClick() {
+        this.select.emit(this.data);
+    }
+    onMouseEnter() {
+        this.activate.emit(this.data);
+    }
+    onMouseLeave() {
+        this.deactivate.emit(this.data);
+    }
+}
+HeatMapCellComponent.ɵfac = function HeatMapCellComponent_Factory(t) { return new (t || HeatMapCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
+HeatMapCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HeatMapCellComponent, selectors: [["g", "ngx-charts-heat-map-cell", ""]], hostBindings: function HeatMapCellComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("mouseenter", function HeatMapCellComponent_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function HeatMapCellComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
+    } }, inputs: { gradient: "gradient", animations: "animations", fill: "fill", x: "x", y: "y", width: "width", height: "height", data: "data" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c33, decls: 3, vars: 5, consts: [[1, "cell"], [4, "ngIf"], ["rx", "3", 1, "cell", 3, "click"], ["ngx-charts-svg-linear-gradient", "", 3, "orientation", "name", "stops"]], template: function HeatMapCellComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g", 0);
+        ɵngcc0.ɵɵtemplate(1, HeatMapCellComponent__svg_defs_1_Template, 2, 3, "defs", 1);
+        ɵngcc0.ɵɵelementStart(2, "rect", 2);
+        ɵngcc0.ɵɵlistener("click", function HeatMapCellComponent_Template__svg_rect_click_2_listener() { return ctx.onClick(); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.gradient);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("fill", ctx.gradient ? ctx.gradientUrl : ctx.fill)("width", ctx.width)("height", ctx.height);
+    } }, directives: [ɵngcc1.NgIf, SvgLinearGradientComponent], encapsulation: 2, changeDetection: 0 });
+HeatMapCellComponent.ctorParameters = () => [
+    { type: ElementRef }
+];
+HeatMapCellComponent.propDecorators = {
+    fill: [{ type: Input }],
+    x: [{ type: Input }],
+    y: [{ type: Input }],
+    width: [{ type: Input }],
+    height: [{ type: Input }],
+    data: [{ type: Input }],
+    gradient: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
+    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeatMapCellComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-heat-map-cell]',
+                template: `
+    <svg:g [attr.transform]="transform" class="cell">
+      <defs *ngIf="gradient">
+        <svg:g
+          ngx-charts-svg-linear-gradient
+          [orientation]="barOrientation.Vertical"
+          [name]="gradientId"
+          [stops]="gradientStops"
+        />
+      </defs>
+      <svg:rect
+        [attr.fill]="gradient ? gradientUrl : fill"
+        rx="3"
+        [attr.width]="width"
+        [attr.height]="height"
+        class="cell"
+        (click)="onClick()"
+      />
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { gradient: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], onMouseEnter: [{
+            type: HostListener,
+            args: ['mouseenter']
+        }], onMouseLeave: [{
+            type: HostListener,
+            args: ['mouseleave']
+        }], fill: [{
+            type: Input
+        }], x: [{
+            type: Input
+        }], y: [{
+            type: Input
+        }], width: [{
+            type: Input
+        }], height: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }] }); })();
+
+class HeatCellSeriesComponent {
+    constructor() {
+        this.tooltipDisabled = false;
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.placementTypes = PlacementTypes;
+        this.styleTypes = StyleTypes;
+    }
+    ngOnInit() {
+        if (!this.tooltipText) {
+            this.tooltipText = this.getTooltipText;
+        }
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.cells = this.getCells();
+    }
+    getCells() {
+        const cells = [];
+        this.data.map(row => {
+            row.series.map(cell => {
+                const value = cell.value;
+                cell.series = row.name;
+                cells.push({
+                    row,
+                    cell,
+                    x: this.xScale(row.name),
+                    y: this.yScale(cell.name),
+                    width: this.xScale.bandwidth(),
+                    height: this.yScale.bandwidth(),
+                    fill: this.colors.getColor(value),
+                    data: value,
+                    label: formatLabel(cell.name),
+                    series: row.name
+                });
+            });
+        });
+        return cells;
+    }
+    getTooltipText({ label, data, series }) {
+        return `
+      <span class="tooltip-label">${escapeLabel(series)} • ${escapeLabel(label)}</span>
+      <span class="tooltip-val">${data.toLocaleString()}</span>
+    `;
+    }
+    trackBy(index, item) {
+        return item.label;
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+}
+HeatCellSeriesComponent.ɵfac = function HeatCellSeriesComponent_Factory(t) { return new (t || HeatCellSeriesComponent)(); };
+HeatCellSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HeatCellSeriesComponent, selectors: [["g", "ngx-charts-heat-map-cell-series", ""]], inputs: { tooltipDisabled: "tooltipDisabled", animations: "animations", tooltipText: "tooltipText", data: "data", colors: "colors", xScale: "xScale", yScale: "yScale", gradient: "gradient", tooltipTemplate: "tooltipTemplate" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c34, decls: 1, vars: 2, consts: [["ngx-charts-heat-map-cell", "", "ngx-tooltip", "", 3, "x", "y", "width", "height", "fill", "data", "gradient", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-heat-map-cell", "", "ngx-tooltip", "", 3, "x", "y", "width", "height", "fill", "data", "gradient", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate"]], template: function HeatCellSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, HeatCellSeriesComponent__svg_g_0_Template, 1, 18, "g", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.cells)("ngForTrackBy", ctx.trackBy);
+    } }, directives: [ɵngcc1.NgForOf, HeatMapCellComponent, TooltipDirective], encapsulation: 2, changeDetection: 0 });
+HeatCellSeriesComponent.propDecorators = {
+    data: [{ type: Input }],
+    colors: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    gradient: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipText: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeatCellSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-heat-map-cell-series]',
+                template: `
+    <svg:g
+      ngx-charts-heat-map-cell
+      *ngFor="let c of cells; trackBy: trackBy"
+      [x]="c.x"
+      [y]="c.y"
+      [width]="c.width"
+      [height]="c.height"
+      [fill]="c.fill"
+      [data]="c.data"
+      (select)="onClick(c.cell)"
+      (activate)="activate.emit(c.cell)"
+      (deactivate)="deactivate.emit(c.cell)"
+      [gradient]="gradient"
+      [animations]="animations"
+      ngx-tooltip
+      [tooltipDisabled]="tooltipDisabled"
+      [tooltipPlacement]="placementTypes.Top"
+      [tooltipType]="styleTypes.tooltip"
+      [tooltipTitle]="tooltipTemplate ? undefined : tooltipText(c)"
+      [tooltipTemplate]="tooltipTemplate"
+      [tooltipContext]="{ series: c.series, name: c.label, value: c.data }"
+    ></svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { tooltipDisabled: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], tooltipText: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }] }); })();
+
+class HeatMapComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.innerPadding = 8;
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.tooltipDisabled = false;
+        this.activeEntries = [];
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.scaleType = ScaleType.Linear;
+    }
+    update() {
+        super.update();
+        this.formatDates();
+        this.xDomain = this.getXDomain();
+        this.yDomain = this.getYDomain();
+        this.valueDomain = this.getValueDomain();
+        this.scaleType = getScaleType(this.valueDomain, false);
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.scaleType,
+            legendPosition: this.legendPosition
+        });
+        if (this.scaleType === ScaleType.Linear) {
+            let min = this.min;
+            let max = this.max;
+            if (!this.min) {
+                min = Math.min(0, ...this.valueDomain);
+            }
+            if (!this.max) {
+                max = Math.max(...this.valueDomain);
+            }
+            this.valueDomain = [min, max];
+        }
+        this.xScale = this.getXScale();
+        this.yScale = this.getYScale();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+        this.rects = this.getRects();
+    }
+    getXDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            if (!domain.includes(group.name)) {
+                domain.push(group.name);
+            }
+        }
+        return domain;
+    }
+    getYDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            for (const d of group.series) {
+                if (!domain.includes(d.name)) {
+                    domain.push(d.name);
+                }
+            }
+        }
+        return domain;
+    }
+    getValueDomain() {
+        const domain = [];
+        for (const group of this.results) {
+            for (const d of group.series) {
+                if (!domain.includes(d.value)) {
+                    domain.push(d.value);
+                }
+            }
+        }
+        return domain;
+    }
+    /**
+     * Converts the input to gap paddingInner in fraction
+     * Supports the following inputs:
+     *    Numbers: 8
+     *    Strings: "8", "8px", "8%"
+     *    Arrays: [8,2], "8,2", "[8,2]"
+     *    Mixed: [8,"2%"], ["8px","2%"], "8,2%", "[8,2%]"
+     *
+     * @memberOf HeatMapComponent
+     */
+    getDimension(value, index = 0, N, L) {
+        if (typeof value === 'string') {
+            value = value
+                .replace('[', '')
+                .replace(']', '')
+                .replace('px', '')
+                // tslint:disable-next-line: quotemark
+                .replace("'", '');
+            if (value.includes(',')) {
+                value = value.split(',');
+            }
+        }
+        if (Array.isArray(value) && typeof index === 'number') {
+            return this.getDimension(value[index], null, N, L);
+        }
+        if (typeof value === 'string' && value.includes('%')) {
+            return +value.replace('%', '') / 100;
+        }
+        return N / (L / +value + 1);
+    }
+    getXScale() {
+        const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);
+        return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);
+    }
+    getYScale() {
+        const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);
+        return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);
+    }
+    getRects() {
+        const rects = [];
+        this.xDomain.map(xVal => {
+            this.yDomain.map(yVal => {
+                rects.push({
+                    x: this.xScale(xVal),
+                    y: this.yScale(yVal),
+                    rx: 3,
+                    width: this.xScale.bandwidth(),
+                    height: this.yScale.bandwidth(),
+                    fill: 'rgba(200,200,200,0.03)'
+                });
+            });
+        });
+        return rects;
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    setColors() {
+        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);
+    }
+    getLegendOptions() {
+        return {
+            scaleType: this.scaleType,
+            domain: this.valueDomain,
+            colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,
+            title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,
+            position: this.legendPosition
+        };
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        const items = this.results
+            .map(g => g.series)
+            .flat()
+            .filter(i => {
+            if (fromLegend) {
+                return i.label === item.name;
+            }
+            else {
+                return i.name === item.name && i.series === item.series;
+            }
+        });
+        this.activeEntries = [...items];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(event, group, fromLegend = false) {
+        const item = Object.assign({}, event);
+        if (group) {
+            item.series = group.name;
+        }
+        this.activeEntries = this.activeEntries.filter(i => {
+            if (fromLegend) {
+                return i.label !== item.name;
+            }
+            else {
+                return !(i.name === item.name && i.series === item.series);
+            }
+        });
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+HeatMapComponent.ɵfac = function HeatMapComponent_Factory(t) { return ɵHeatMapComponent_BaseFactory(t || HeatMapComponent); };
+HeatMapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: HeatMapComponent, selectors: [["ngx-charts-heat-map"]], contentQueries: function HeatMapComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legendTitle: "legendTitle", legendPosition: "legendPosition", innerPadding: "innerPadding", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", tooltipDisabled: "tooltipDisabled", activeEntries: "activeEntries", legend: "legend", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", gradient: "gradient", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", tooltipText: "tooltipText", min: "min", max: "max" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 20, consts: [[3, "view", "showLegend", "animations", "legendOptions", "legendLabelClick"], [1, "heat-map", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf"], ["ngx-charts-heat-map-cell-series", "", 3, "xScale", "yScale", "colors", "data", "gradient", "animations", "tooltipDisabled", "tooltipTemplate", "tooltipText", "select", "activate", "deactivate"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"]], template: function HeatMapComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function HeatMapComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵtemplate(2, HeatMapComponent__svg_g_2_Template, 1, 9, "g", 2);
+        ɵngcc0.ɵɵtemplate(3, HeatMapComponent__svg_g_3_Template, 1, 8, "g", 3);
+        ɵngcc0.ɵɵtemplate(4, HeatMapComponent__svg_rect_4_Template, 1, 6, "rect", 4);
+        ɵngcc0.ɵɵelementStart(5, "g", 5);
+        ɵngcc0.ɵɵlistener("select", function HeatMapComponent_Template__svg_g_select_5_listener($event) { return ctx.onClick($event); })("activate", function HeatMapComponent_Template__svg_g_activate_5_listener($event) { return ctx.onActivate($event, undefined); })("deactivate", function HeatMapComponent_Template__svg_g_deactivate_5_listener($event) { return ctx.onDeactivate($event, undefined); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("animations", ctx.animations)("legendOptions", ctx.legendOptions);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.rects);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("xScale", ctx.xScale)("yScale", ctx.yScale)("colors", ctx.colors)("data", ctx.results)("gradient", ctx.gradient)("animations", ctx.animations)("tooltipDisabled", ctx.tooltipDisabled)("tooltipTemplate", ctx.tooltipTemplate)("tooltipText", ctx.tooltipText);
+    } }, directives: [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, HeatCellSeriesComponent, XAxisComponent, YAxisComponent], styles: [_c24], encapsulation: 2, changeDetection: 0 });
+HeatMapComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    gradient: [{ type: Input }],
+    innerPadding: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipText: [{ type: Input }],
+    min: [{ type: Input }],
+    max: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵHeatMapComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(HeatMapComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeatMapComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-heat-map',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [animations]="animations"
+      [legendOptions]="legendOptions"
+      (legendLabelClick)="onClick($event)"
+    >
+      <svg:g [attr.transform]="transform" class="heat-map chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:rect
+          *ngFor="let rect of rects"
+          [attr.x]="rect.x"
+          [attr.y]="rect.y"
+          [attr.rx]="rect.rx"
+          [attr.width]="rect.width"
+          [attr.height]="rect.height"
+          [attr.fill]="rect.fill"
+        />
+        <svg:g
+          ngx-charts-heat-map-cell-series
+          [xScale]="xScale"
+          [yScale]="yScale"
+          [colors]="colors"
+          [data]="results"
+          [gradient]="gradient"
+          [animations]="animations"
+          [tooltipDisabled]="tooltipDisabled"
+          [tooltipTemplate]="tooltipTemplate"
+          [tooltipText]="tooltipText"
+          (select)="onClick($event)"
+          (activate)="onActivate($event, undefined)"
+          (deactivate)="onDeactivate($event, undefined)"
+        />
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                encapsulation: ViewEncapsulation.None,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], innerPadding: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], legend: [{
+            type: Input
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], tooltipText: [{
+            type: Input
+        }], min: [{
+            type: Input
+        }], max: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class HeatMapModule {
+}
+HeatMapModule.ɵfac = function HeatMapModule_Factory(t) { return new (t || HeatMapModule)(); };
+HeatMapModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HeatMapModule });
+HeatMapModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HeatMapModule, { declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent], imports: [ChartCommonModule], exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeatMapModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule],
+                declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],
+                exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]
+            }]
+    }], null, null); })();
+
+class LineComponent {
+    constructor(element) {
+        this.element = element;
+        this.fill = 'none';
+        this.animations = true;
+        // @Output() select = new EventEmitter();
+        this.initialized = false;
+    }
+    ngOnChanges(changes) {
+        if (!this.initialized) {
+            this.initialized = true;
+            this.initialPath = this.path;
+        }
+        else {
+            this.updatePathEl();
+        }
+    }
+    updatePathEl() {
+        const node = select(this.element.nativeElement).select('.line');
+        if (this.animations) {
+            node.transition().duration(750).attr('d', this.path);
+        }
+        else {
+            node.attr('d', this.path);
+        }
+    }
+}
+LineComponent.ɵfac = function LineComponent_Factory(t) { return new (t || LineComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
+LineComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LineComponent, selectors: [["g", "ngx-charts-line", ""]], inputs: { fill: "fill", animations: "animations", path: "path", stroke: "stroke", data: "data" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c36, decls: 1, vars: 4, consts: [["stroke-width", "1.5px", 1, "line"]], template: function LineComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelement(0, "path", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("@animationState", "active");
+        ɵngcc0.ɵɵattribute("d", ctx.initialPath)("fill", ctx.fill)("stroke", ctx.stroke);
+    } }, encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':enter', [
+                    style({
+                        strokeDasharray: 2000,
+                        strokeDashoffset: 2000
+                    }),
+                    animate(1000, style({
+                        strokeDashoffset: 0
+                    }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+LineComponent.ctorParameters = () => [
+    { type: ElementRef }
+];
+LineComponent.propDecorators = {
+    path: [{ type: Input }],
+    stroke: [{ type: Input }],
+    data: [{ type: Input }],
+    fill: [{ type: Input }],
+    animations: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LineComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-line]',
+                template: `
+    <svg:path
+      [@animationState]="'active'"
+      class="line"
+      [attr.d]="initialPath"
+      [attr.fill]="fill"
+      [attr.stroke]="stroke"
+      stroke-width="1.5px"
+    />
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':enter', [
+                            style({
+                                strokeDasharray: 2000,
+                                strokeDashoffset: 2000
+                            }),
+                            animate(1000, style({
+                                strokeDashoffset: 0
+                            }))
+                        ])
+                    ])
+                ]
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { fill: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], path: [{
+            type: Input
+        }], stroke: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }] }); })();
+
+class LineChartComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.showGridLines = true;
+        this.curve = curveLinear;
+        this.activeEntries = [];
+        this.trimXAxisTicks = true;
+        this.trimYAxisTicks = true;
+        this.rotateXAxisTicks = true;
+        this.maxXAxisTickLength = 16;
+        this.maxYAxisTickLength = 16;
+        this.roundDomains = false;
+        this.tooltipDisabled = false;
+        this.showRefLines = false;
+        this.showRefLabels = true;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.timelineHeight = 50;
+        this.timelinePadding = 10;
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        if (this.timeline) {
+            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;
+        }
+        this.xDomain = this.getXDomain();
+        if (this.filteredDomain) {
+            this.xDomain = this.filteredDomain;
+        }
+        this.yDomain = this.getYDomain();
+        this.seriesDomain = this.getSeriesDomain();
+        this.xScale = this.getXScale(this.xDomain, this.dims.width);
+        this.yScale = this.getYScale(this.yDomain, this.dims.height);
+        this.updateTimeline();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+        this.clipPathId = 'clip' + id().toString();
+        this.clipPath = `url(#${this.clipPathId})`;
+    }
+    updateTimeline() {
+        if (this.timeline) {
+            this.timelineWidth = this.dims.width;
+            this.timelineXDomain = this.getXDomain();
+            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);
+            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);
+            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;
+        }
+    }
+    getXDomain() {
+        let values = getUniqueXDomainValues(this.results);
+        this.scaleType = getScaleType(values);
+        let domain = [];
+        if (this.scaleType === ScaleType.Linear) {
+            values = values.map(v => Number(v));
+        }
+        let min;
+        let max;
+        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {
+            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);
+            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);
+        }
+        if (this.scaleType === ScaleType.Time) {
+            domain = [new Date(min), new Date(max)];
+            this.xSet = [...values].sort((a, b) => {
+                const aDate = a.getTime();
+                const bDate = b.getTime();
+                if (aDate > bDate)
+                    return 1;
+                if (bDate > aDate)
+                    return -1;
+                return 0;
+            });
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            domain = [min, max];
+            // Use compare function to sort numbers numerically
+            this.xSet = [...values].sort((a, b) => a - b);
+        }
+        else {
+            domain = values;
+            this.xSet = values;
+        }
+        return domain;
+    }
+    getYDomain() {
+        const domain = [];
+        for (const results of this.results) {
+            for (const d of results.series) {
+                if (domain.indexOf(d.value) < 0) {
+                    domain.push(d.value);
+                }
+                if (d.min !== undefined) {
+                    this.hasRange = true;
+                    if (domain.indexOf(d.min) < 0) {
+                        domain.push(d.min);
+                    }
+                }
+                if (d.max !== undefined) {
+                    this.hasRange = true;
+                    if (domain.indexOf(d.max) < 0) {
+                        domain.push(d.max);
+                    }
+                }
+            }
+        }
+        const values = [...domain];
+        if (!this.autoScale) {
+            values.push(0);
+        }
+        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);
+        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);
+        return [min, max];
+    }
+    getSeriesDomain() {
+        return this.results.map(d => d.name);
+    }
+    getXScale(domain, width) {
+        let scale;
+        if (this.scaleType === ScaleType.Time) {
+            scale = scaleTime().range([0, width]).domain(domain);
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            scale = scaleLinear().range([0, width]).domain(domain);
+            if (this.roundDomains) {
+                scale = scale.nice();
+            }
+        }
+        else if (this.scaleType === ScaleType.Ordinal) {
+            scale = scalePoint().range([0, width]).padding(0.1).domain(domain);
+        }
+        return scale;
+    }
+    getYScale(domain, height) {
+        const scale = scaleLinear().range([height, 0]).domain(domain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    updateDomain(domain) {
+        this.filteredDomain = domain;
+        this.xDomain = this.filteredDomain;
+        this.xScale = this.getXScale(this.xDomain, this.dims.width);
+    }
+    updateHoveredVertical(item) {
+        this.hoveredVertical = item.value;
+        this.deactivateAll();
+    }
+    hideCircles() {
+        this.hoveredVertical = null;
+        this.deactivateAll();
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    trackBy(index, item) {
+        return `${item.name}`;
+    }
+    setColors() {
+        let domain;
+        if (this.schemeType === ScaleType.Ordinal) {
+            domain = this.seriesDomain;
+        }
+        else {
+            domain = this.yDomain;
+        }
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        const opts = {
+            scaleType: this.schemeType,
+            colors: undefined,
+            domain: [],
+            title: undefined,
+            position: this.legendPosition
+        };
+        if (opts.scaleType === ScaleType.Ordinal) {
+            opts.domain = this.seriesDomain;
+            opts.colors = this.colors;
+            opts.title = this.legendTitle;
+        }
+        else {
+            opts.domain = this.yDomain;
+            opts.colors = this.colors.scale;
+        }
+        return opts;
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(item) {
+        this.deactivateAll();
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+    deactivateAll() {
+        this.activeEntries = [...this.activeEntries];
+        for (const entry of this.activeEntries) {
+            this.deactivate.emit({ value: entry, entries: [] });
+        }
+        this.activeEntries = [];
+    }
+}
+LineChartComponent.ɵfac = function LineChartComponent_Factory(t) { return ɵLineChartComponent_BaseFactory(t || LineChartComponent); };
+LineChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LineChartComponent, selectors: [["ngx-charts-line-chart"]], contentQueries: function LineChartComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c22, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);
+    } }, hostBindings: function LineChartComponent_HostBindings(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵlistener("mouseleave", function LineChartComponent_mouseleave_HostBindingHandler() { return ctx.hideCircles(); });
+    } }, inputs: { legendTitle: "legendTitle", legendPosition: "legendPosition", showGridLines: "showGridLines", curve: "curve", activeEntries: "activeEntries", trimXAxisTicks: "trimXAxisTicks", trimYAxisTicks: "trimYAxisTicks", rotateXAxisTicks: "rotateXAxisTicks", maxXAxisTickLength: "maxXAxisTickLength", maxYAxisTickLength: "maxYAxisTickLength", roundDomains: "roundDomains", tooltipDisabled: "tooltipDisabled", showRefLines: "showRefLines", showRefLabels: "showRefLabels", legend: "legend", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", autoScale: "autoScale", timeline: "timeline", gradient: "gradient", schemeType: "schemeType", rangeFillOpacity: "rangeFillOpacity", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", xAxisTicks: "xAxisTicks", yAxisTicks: "yAxisTicks", referenceLines: "referenceLines", xScaleMin: "xScaleMin", xScaleMax: "xScaleMax", yScaleMin: "yScaleMin", yScaleMax: "yScaleMax" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 20, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "line-chart", "chart"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "referenceLines", "showRefLines", "showRefLabels", "dimensionsChanged", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "mouseleave", 4, "ngIf"], ["ngx-charts-timeline", "", 3, "results", "view", "height", "scheme", "customColors", "scaleType", "legend", "onDomainChange", 4, "ngIf"], ["ngx-charts-x-axis", "", 3, "xScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "rotateTicks", "maxTickLength", "tickFormatting", "ticks", "dimensionsChanged"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "referenceLines", "showRefLines", "showRefLabels", "dimensionsChanged"], ["ngx-charts-line-series", "", 3, "xScale", "yScale", "colors", "data", "activeEntries", "scaleType", "curve", "rangeFillOpacity", "hasRange", "animations"], [3, "mouseleave"], ["ngx-charts-tooltip-area", "", 3, "dims", "xSet", "xScale", "yScale", "results", "colors", "tooltipDisabled", "tooltipTemplate", "hover"], [4, "ngFor", "ngForOf"], ["ngx-charts-circle-series", "", 3, "xScale", "yScale", "colors", "data", "scaleType", "visibleValue", "activeEntries", "tooltipDisabled", "tooltipTemplate", "select", "activate", "deactivate"], ["ngx-charts-timeline", "", 3, "results", "view", "height", "scheme", "customColors", "scaleType", "legend", "onDomainChange"], ["ngx-charts-line-series", "", 3, "xScale", "yScale", "colors", "data", "scaleType", "curve", "hasRange", "animations"]], template: function LineChartComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function LineChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function LineChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event); })("legendLabelDeactivate", function LineChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "defs");
+        ɵngcc0.ɵɵelementStart(2, "clipPath");
+        ɵngcc0.ɵɵelement(3, "rect");
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(4, "g", 1);
+        ɵngcc0.ɵɵtemplate(5, LineChartComponent__svg_g_5_Template, 1, 10, "g", 2);
+        ɵngcc0.ɵɵtemplate(6, LineChartComponent__svg_g_6_Template, 1, 12, "g", 3);
+        ɵngcc0.ɵɵelementStart(7, "g");
+        ɵngcc0.ɵɵtemplate(8, LineChartComponent__svg_g_8_Template, 2, 11, "g", 4);
+        ɵngcc0.ɵɵtemplate(9, LineChartComponent__svg_g_9_Template, 3, 9, "g", 5);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(10, LineChartComponent__svg_g_10_Template, 2, 13, "g", 6);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵattribute("id", ctx.clipPathId);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("width", ctx.dims.width + 10)("height", ctx.dims.height + 10)("transform", "translate(-5, -5)");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("clip-path", ctx.clipPath);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", !ctx.tooltipDisabled);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.timeline && ctx.scaleType != "ordinal");
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, XAxisComponent, YAxisComponent, LineSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline]; }, styles: [_c24], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1
+                    }),
+                    animate(500, style({
+                        opacity: 0
+                    }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+LineChartComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    autoScale: [{ type: Input }],
+    timeline: [{ type: Input }],
+    gradient: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    curve: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    rangeFillOpacity: [{ type: Input }],
+    trimXAxisTicks: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    rotateXAxisTicks: [{ type: Input }],
+    maxXAxisTickLength: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    xAxisTicks: [{ type: Input }],
+    yAxisTicks: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    showRefLines: [{ type: Input }],
+    referenceLines: [{ type: Input }],
+    showRefLabels: [{ type: Input }],
+    xScaleMin: [{ type: Input }],
+    xScaleMax: [{ type: Input }],
+    yScaleMin: [{ type: Input }],
+    yScaleMax: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }],
+    seriesTooltipTemplate: [{ type: ContentChild, args: ['seriesTooltipTemplate',] }],
+    hideCircles: [{ type: HostListener, args: ['mouseleave',] }]
+};
+const ɵLineChartComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(LineChartComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LineChartComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-line-chart',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelClick)="onClick($event)"
+      (legendLabelActivate)="onActivate($event)"
+      (legendLabelDeactivate)="onDeactivate($event)"
+    >
+      <svg:defs>
+        <svg:clipPath [attr.id]="clipPathId">
+          <svg:rect
+            [attr.width]="dims.width + 10"
+            [attr.height]="dims.height + 10"
+            [attr.transform]="'translate(-5, -5)'"
+          />
+        </svg:clipPath>
+      </svg:defs>
+      <svg:g [attr.transform]="transform" class="line-chart chart">
+        <svg:g
+          ngx-charts-x-axis
+          *ngIf="xAxis"
+          [xScale]="xScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showXAxisLabel"
+          [labelText]="xAxisLabel"
+          [trimTicks]="trimXAxisTicks"
+          [rotateTicks]="rotateXAxisTicks"
+          [maxTickLength]="maxXAxisTickLength"
+          [tickFormatting]="xAxisTickFormatting"
+          [ticks]="xAxisTicks"
+          (dimensionsChanged)="updateXAxisHeight($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          *ngIf="yAxis"
+          [yScale]="yScale"
+          [dims]="dims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          [ticks]="yAxisTicks"
+          [referenceLines]="referenceLines"
+          [showRefLines]="showRefLines"
+          [showRefLabels]="showRefLabels"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g [attr.clip-path]="clipPath">
+          <svg:g *ngFor="let series of results; trackBy: trackBy" [@animationState]="'active'">
+            <svg:g
+              ngx-charts-line-series
+              [xScale]="xScale"
+              [yScale]="yScale"
+              [colors]="colors"
+              [data]="series"
+              [activeEntries]="activeEntries"
+              [scaleType]="scaleType"
+              [curve]="curve"
+              [rangeFillOpacity]="rangeFillOpacity"
+              [hasRange]="hasRange"
+              [animations]="animations"
+            />
+          </svg:g>
+
+          <svg:g *ngIf="!tooltipDisabled" (mouseleave)="hideCircles()">
+            <svg:g
+              ngx-charts-tooltip-area
+              [dims]="dims"
+              [xSet]="xSet"
+              [xScale]="xScale"
+              [yScale]="yScale"
+              [results]="results"
+              [colors]="colors"
+              [tooltipDisabled]="tooltipDisabled"
+              [tooltipTemplate]="seriesTooltipTemplate"
+              (hover)="updateHoveredVertical($event)"
+            />
+
+            <svg:g *ngFor="let series of results">
+              <svg:g
+                ngx-charts-circle-series
+                [xScale]="xScale"
+                [yScale]="yScale"
+                [colors]="colors"
+                [data]="series"
+                [scaleType]="scaleType"
+                [visibleValue]="hoveredVertical"
+                [activeEntries]="activeEntries"
+                [tooltipDisabled]="tooltipDisabled"
+                [tooltipTemplate]="tooltipTemplate"
+                (select)="onClick($event)"
+                (activate)="onActivate($event)"
+                (deactivate)="onDeactivate($event)"
+              />
+            </svg:g>
+          </svg:g>
+        </svg:g>
+      </svg:g>
+      <svg:g
+        ngx-charts-timeline
+        *ngIf="timeline && scaleType != 'ordinal'"
+        [attr.transform]="timelineTransform"
+        [results]="results"
+        [view]="[timelineWidth, height]"
+        [height]="timelineHeight"
+        [scheme]="scheme"
+        [customColors]="customColors"
+        [scaleType]="scaleType"
+        [legend]="legend"
+        (onDomainChange)="updateDomain($event)"
+      >
+        <svg:g *ngFor="let series of results; trackBy: trackBy">
+          <svg:g
+            ngx-charts-line-series
+            [xScale]="timelineXScale"
+            [yScale]="timelineYScale"
+            [colors]="colors"
+            [data]="series"
+            [scaleType]="scaleType"
+            [curve]="curve"
+            [hasRange]="hasRange"
+            [animations]="animations"
+          />
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1
+                            }),
+                            animate(500, style({
+                                opacity: 0
+                            }))
+                        ])
+                    ])
+                ],
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n"]
+            }]
+    }], null, { legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], curve: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], trimXAxisTicks: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], rotateXAxisTicks: [{
+            type: Input
+        }], maxXAxisTickLength: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], showRefLines: [{
+            type: Input
+        }], showRefLabels: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], hideCircles: [{
+            type: HostListener,
+            args: ['mouseleave']
+        }], legend: [{
+            type: Input
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], autoScale: [{
+            type: Input
+        }], timeline: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], rangeFillOpacity: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], xAxisTicks: [{
+            type: Input
+        }], yAxisTicks: [{
+            type: Input
+        }], referenceLines: [{
+            type: Input
+        }], xScaleMin: [{
+            type: Input
+        }], xScaleMax: [{
+            type: Input
+        }], yScaleMin: [{
+            type: Input
+        }], yScaleMax: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }], seriesTooltipTemplate: [{
+            type: ContentChild,
+            args: ['seriesTooltipTemplate']
+        }] }); })();
+
+class LineSeriesComponent {
+    constructor() {
+        this.animations = true;
+        this.barOrientation = BarOrientation;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.updateGradients();
+        const data = this.sortData(this.data.series);
+        const lineGen = this.getLineGenerator();
+        this.path = lineGen(data) || '';
+        const areaGen = this.getAreaGenerator();
+        this.areaPath = areaGen(data) || '';
+        if (this.hasRange) {
+            const range = this.getRangeGenerator();
+            this.outerPath = range(data) || '';
+        }
+        if (this.hasGradient) {
+            this.stroke = this.gradientUrl;
+            const values = this.data.series.map(d => d.value);
+            const max = Math.max(...values);
+            const min = Math.min(...values);
+            if (max === min) {
+                this.stroke = this.colors.getColor(max);
+            }
+        }
+        else {
+            this.stroke = this.colors.getColor(this.data.name);
+        }
+    }
+    getLineGenerator() {
+        return line()
+            .x(d => {
+            const label = d.name;
+            let value;
+            if (this.scaleType === ScaleType.Time) {
+                value = this.xScale(label);
+            }
+            else if (this.scaleType === ScaleType.Linear) {
+                value = this.xScale(Number(label));
+            }
+            else {
+                value = this.xScale(label);
+            }
+            return value;
+        })
+            .y(d => this.yScale(d.value))
+            .curve(this.curve)
+            .defined(function (d) {
+                return d.value !== null;
+            });
+    }
+    getRangeGenerator() {
+        return area()
+            .x(d => {
+            const label = d.name;
+            let value;
+            if (this.scaleType === ScaleType.Time) {
+                value = this.xScale(label);
+            }
+            else if (this.scaleType === ScaleType.Linear) {
+                value = this.xScale(Number(label));
+            }
+            else {
+                value = this.xScale(label);
+            }
+            return value;
+        })
+            .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))
+            .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))
+            .curve(this.curve)
+            .defined(function (d) {
+                return d.value !== null;
+            });
+    }
+    getAreaGenerator() {
+        const xProperty = d => {
+            const label = d.name;
+            return this.xScale(label);
+        };
+        return area()
+            .x(xProperty)
+            .y0(() => this.yScale.range()[0])
+            .y1(d => this.yScale(d.value))
+            .curve(this.curve);
+    }
+    sortData(data) {
+        if (this.scaleType === ScaleType.Linear) {
+            data = sortLinear(data, 'name');
+        }
+        else if (this.scaleType === ScaleType.Time) {
+            data = sortByTime(data, 'name');
+        }
+        else {
+            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());
+        }
+        return data;
+    }
+    updateGradients() {
+        if (this.colors.scaleType === ScaleType.Linear) {
+            this.hasGradient = true;
+            this.gradientId = 'grad' + id().toString();
+            this.gradientUrl = `url(#${this.gradientId})`;
+            const values = this.data.series.map(d => d.value);
+            const max = Math.max(...values);
+            const min = Math.min(...values);
+            this.gradientStops = this.colors.getLinearGradientStops(max, min);
+            this.areaGradientStops = this.colors.getLinearGradientStops(max);
+        }
+        else {
+            this.hasGradient = false;
+            this.gradientStops = undefined;
+            this.areaGradientStops = undefined;
+        }
+    }
+    isActive(entry) {
+        if (!this.activeEntries)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.name === d.name;
+        });
+        return item !== undefined;
+    }
+    isInactive(entry) {
+        if (!this.activeEntries || this.activeEntries.length === 0)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.name === d.name;
+        });
+        return item === undefined;
+    }
+}
+LineSeriesComponent.ɵfac = function LineSeriesComponent_Factory(t) { return new (t || LineSeriesComponent)(); };
+LineSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LineSeriesComponent, selectors: [["g", "ngx-charts-line-series", ""]], inputs: { animations: "animations", data: "data", xScale: "xScale", yScale: "yScale", colors: "colors", scaleType: "scaleType", curve: "curve", activeEntries: "activeEntries", rangeFillOpacity: "rangeFillOpacity", hasRange: "hasRange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c37, decls: 6, vars: 22, consts: [["ngx-charts-svg-linear-gradient", "", 3, "orientation", "name", "stops", 4, "ngIf"], ["ngx-charts-area", "", 1, "line-highlight", 3, "data", "path", "fill", "opacity", "startOpacity", "gradient", "stops", "animations"], ["ngx-charts-line", "", 1, "line-series", 3, "data", "path", "stroke", "animations"], ["ngx-charts-area", "", "class", "line-series-range", 3, "data", "path", "fill", "active", "inactive", "opacity", "animations", 4, "ngIf"], ["ngx-charts-svg-linear-gradient", "", 3, "orientation", "name", "stops"], ["ngx-charts-area", "", 1, "line-series-range", 3, "data", "path", "fill", "opacity", "animations"]], template: function LineSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g");
+        ɵngcc0.ɵɵelementStart(1, "defs");
+        ɵngcc0.ɵɵtemplate(2, LineSeriesComponent__svg_g_2_Template, 1, 3, "g", 0);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelement(3, "g", 1);
+        ɵngcc0.ɵɵelement(4, "g", 2);
+        ɵngcc0.ɵɵtemplate(5, LineSeriesComponent__svg_g_5_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.hasGradient);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵclassProp("active", ctx.isActive(ctx.data))("inactive", ctx.isInactive(ctx.data));
+        ɵngcc0.ɵɵproperty("data", ctx.data)("path", ctx.areaPath)("fill", ctx.hasGradient ? ctx.gradientUrl : ctx.colors.getColor(ctx.data.name))("opacity", 0.25)("startOpacity", 0)("gradient", true)("stops", ctx.areaGradientStops)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵclassProp("active", ctx.isActive(ctx.data))("inactive", ctx.isInactive(ctx.data));
+        ɵngcc0.ɵɵproperty("data", ctx.data)("path", ctx.path)("stroke", ctx.stroke)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.hasRange);
+    } }, directives: [ɵngcc1.NgIf, AreaComponent, LineComponent, SvgLinearGradientComponent], encapsulation: 2, changeDetection: 0 });
+LineSeriesComponent.propDecorators = {
+    data: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    colors: [{ type: Input }],
+    scaleType: [{ type: Input }],
+    curve: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    rangeFillOpacity: [{ type: Input }],
+    hasRange: [{ type: Input }],
+    animations: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LineSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-line-series]',
+                template: `
+    <svg:g>
+      <defs>
+        <svg:g
+          ngx-charts-svg-linear-gradient
+          *ngIf="hasGradient"
+          [orientation]="barOrientation.Vertical"
+          [name]="gradientId"
+          [stops]="gradientStops"
+        />
+      </defs>
+      <svg:g
+        ngx-charts-area
+        class="line-highlight"
+        [data]="data"
+        [path]="areaPath"
+        [fill]="hasGradient ? gradientUrl : colors.getColor(data.name)"
+        [opacity]="0.25"
+        [startOpacity]="0"
+        [gradient]="true"
+        [stops]="areaGradientStops"
+        [class.active]="isActive(data)"
+        [class.inactive]="isInactive(data)"
+        [animations]="animations"
+      />
+      <svg:g
+        ngx-charts-line
+        class="line-series"
+        [data]="data"
+        [path]="path"
+        [stroke]="stroke"
+        [animations]="animations"
+        [class.active]="isActive(data)"
+        [class.inactive]="isInactive(data)"
+      />
+      <svg:g
+        ngx-charts-area
+        *ngIf="hasRange"
+        class="line-series-range"
+        [data]="data"
+        [path]="outerPath"
+        [fill]="hasGradient ? gradientUrl : colors.getColor(data.name)"
+        [class.active]="isActive(data)"
+        [class.inactive]="isInactive(data)"
+        [opacity]="rangeFillOpacity"
+        [animations]="animations"
+      />
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { animations: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], scaleType: [{
+            type: Input
+        }], curve: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], rangeFillOpacity: [{
+            type: Input
+        }], hasRange: [{
+            type: Input
+        }] }); })();
+
+class LineChartModule {
+}
+LineChartModule.ɵfac = function LineChartModule_Factory(t) { return new (t || LineChartModule)(); };
+LineChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LineChartModule });
+LineChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LineChartModule, { declarations: [LineComponent, LineChartComponent, LineSeriesComponent], imports: [ChartCommonModule], exports: [LineComponent, LineChartComponent, LineSeriesComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LineChartModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule],
+                declarations: [LineComponent, LineChartComponent, LineSeriesComponent],
+                exports: [LineComponent, LineChartComponent, LineSeriesComponent]
+            }]
+    }], null, null); })();
+
+const twoPI = 2 * Math.PI;
+class PolarChartComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.showGridLines = true;
+        this.curve = curveCardinalClosed;
+        this.activeEntries = [];
+        this.rangeFillOpacity = 0.15;
+        this.trimYAxisTicks = true;
+        this.maxYAxisTickLength = 16;
+        this.roundDomains = false;
+        this.tooltipDisabled = false;
+        this.showSeriesOnHover = true;
+        this.gradient = false;
+        this.yAxisMinScale = 0;
+        this.labelTrim = true;
+        this.labelTrimSize = 10;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        // series: any; // ???
+        this.margin = [10, 20, 10, 20];
+        this.xAxisHeight = 0;
+        this.yAxisWidth = 0;
+        this.orientation = Orientation;
+    }
+    update() {
+        super.update();
+        this.setDims();
+        this.setScales();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        this.setTicks();
+    }
+    setDims() {
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showXAxis: this.xAxis,
+            showYAxis: this.yAxis,
+            xAxisHeight: this.xAxisHeight,
+            yAxisWidth: this.yAxisWidth,
+            showXLabel: this.showXAxisLabel,
+            showYLabel: this.showYAxisLabel,
+            showLegend: this.legend,
+            legendType: this.schemeType,
+            legendPosition: this.legendPosition
+        });
+        const halfWidth = Math.floor(this.dims.width / 2);
+        const halfHeight = Math.floor(this.dims.height / 2);
+        const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));
+        const yOffset = Math.max(0, halfHeight - outerRadius);
+        this.yAxisDims = Object.assign(Object.assign({}, this.dims), { width: halfWidth });
+        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;
+        this.transformYAxis = `translate(0, ${yOffset})`;
+        this.labelOffset = this.dims.height + 40;
+        this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;
+    }
+    setScales() {
+        const xValues = this.getXValues();
+        this.scaleType = getScaleType(xValues);
+        this.xDomain = this.filteredDomain || this.getXDomain(xValues);
+        this.yDomain = this.getYDomain();
+        this.seriesDomain = this.getSeriesDomain();
+        this.xScale = this.getXScale(this.xDomain, twoPI);
+        this.yScale = this.getYScale(this.yDomain, this.outerRadius);
+        this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);
+    }
+    setTicks() {
+        let tickFormat;
+        if (this.xAxisTickFormatting) {
+            tickFormat = this.xAxisTickFormatting;
+        }
+        else if (this.xScale.tickFormat) {
+            tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);
+        }
+        else {
+            tickFormat = d => {
+                if (isDate(d)) {
+                    return d.toLocaleDateString();
+                }
+                return d.toLocaleString();
+            };
+        }
+        const outerRadius = this.outerRadius;
+        const s = 1.1;
+        this.thetaTicks = this.xDomain.map(d => {
+            const startAngle = this.xScale(d);
+            const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);
+            const label = tickFormat(d);
+            const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];
+            const pos = [dd, s * startPos[1]];
+            return {
+                innerRadius: 0,
+                outerRadius,
+                startAngle,
+                endAngle: startAngle,
+                value: outerRadius,
+                label,
+                startPos,
+                pos
+            };
+        });
+        const minDistance = 10;
+        /* from pie chart, abstract out -*/
+        for (let i = 0; i < this.thetaTicks.length - 1; i++) {
+            const a = this.thetaTicks[i];
+            for (let j = i + 1; j < this.thetaTicks.length; j++) {
+                const b = this.thetaTicks[j];
+                // if they're on the same side
+                if (b.pos[0] * a.pos[0] > 0) {
+                    // if they're overlapping
+                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);
+                    if (o > 0) {
+                        // push the second up or down
+                        b.pos[1] += Math.sign(b.pos[0]) * o;
+                    }
+                }
+            }
+        }
+        this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));
+    }
+    getXValues() {
+        const values = [];
+        for (const results of this.results) {
+            for (const d of results.series) {
+                if (!values.includes(d.name)) {
+                    values.push(d.name);
+                }
+            }
+        }
+        return values;
+    }
+    getXDomain(values = this.getXValues()) {
+        if (this.scaleType === ScaleType.Time) {
+            const min = Math.min(...values);
+            const max = Math.max(...values);
+            return [min, max];
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            values = values.map(v => Number(v));
+            const min = Math.min(...values);
+            const max = Math.max(...values);
+            return [min, max];
+        }
+        return values;
+    }
+    getYValues() {
+        const domain = [];
+        for (const results of this.results) {
+            for (const d of results.series) {
+                if (domain.indexOf(d.value) < 0) {
+                    domain.push(d.value);
+                }
+                if (d.min !== undefined) {
+                    if (domain.indexOf(d.min) < 0) {
+                        domain.push(d.min);
+                    }
+                }
+                if (d.max !== undefined) {
+                    if (domain.indexOf(d.max) < 0) {
+                        domain.push(d.max);
+                    }
+                }
+            }
+        }
+        return domain;
+    }
+    getYDomain(domain = this.getYValues()) {
+        let min = Math.min(...domain);
+        const max = Math.max(this.yAxisMinScale, ...domain);
+        min = Math.max(0, min);
+        if (!this.autoScale) {
+            min = Math.min(0, min);
+        }
+        return [min, max];
+    }
+    getSeriesDomain() {
+        return this.results.map(d => d.name);
+    }
+    getXScale(domain, width) {
+        switch (this.scaleType) {
+            case ScaleType.Time:
+                return scaleTime().range([0, width]).domain(domain);
+            case ScaleType.Linear:
+                const scale = scaleLinear().range([0, width]).domain(domain);
+                return this.roundDomains ? scale.nice() : scale;
+            default:
+                return scalePoint()
+                    .range([0, width - twoPI / domain.length])
+                    .padding(0)
+                    .domain(domain);
+        }
+    }
+    getYScale(domain, height) {
+        const scale = scaleLinear().range([0, height]).domain(domain);
+        return this.roundDomains ? scale.nice() : scale;
+    }
+    onClick(data, series) {
+        if (series) {
+            data.series = series.name;
+        }
+        this.select.emit(data);
+    }
+    setColors() {
+        const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();
+        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
+    }
+    getLegendOptions() {
+        if (this.schemeType === ScaleType.Ordinal) {
+            return {
+                scaleType: this.schemeType,
+                colors: this.colors,
+                domain: this.seriesDomain,
+                title: this.legendTitle,
+                position: this.legendPosition
+            };
+        }
+        return {
+            scaleType: this.schemeType,
+            colors: this.colors.scale,
+            domain: this.yDomain,
+            title: undefined,
+            position: this.legendPosition
+        };
+    }
+    updateYAxisWidth({ width }) {
+        this.yAxisWidth = width;
+        this.update();
+    }
+    updateXAxisHeight({ height }) {
+        this.xAxisHeight = height;
+        this.update();
+    }
+    onActivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+    deactivateAll() {
+        this.activeEntries = [...this.activeEntries];
+        for (const entry of this.activeEntries) {
+            this.deactivate.emit({ value: entry, entries: [] });
+        }
+        this.activeEntries = [];
+    }
+    trackBy(index, item) {
+        return `${item.name}`;
+    }
+}
+PolarChartComponent.ɵfac = function PolarChartComponent_Factory(t) { return ɵPolarChartComponent_BaseFactory(t || PolarChartComponent); };
+PolarChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PolarChartComponent, selectors: [["ngx-charts-polar-chart"]], contentQueries: function PolarChartComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { legendTitle: "legendTitle", legendPosition: "legendPosition", showGridLines: "showGridLines", curve: "curve", activeEntries: "activeEntries", rangeFillOpacity: "rangeFillOpacity", trimYAxisTicks: "trimYAxisTicks", maxYAxisTickLength: "maxYAxisTickLength", roundDomains: "roundDomains", tooltipDisabled: "tooltipDisabled", showSeriesOnHover: "showSeriesOnHover", gradient: "gradient", yAxisMinScale: "yAxisMinScale", labelTrim: "labelTrim", labelTrimSize: "labelTrimSize", legend: "legend", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", autoScale: "autoScale", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 10, vars: 18, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "polar-chart", "chart"], ["cx", "0", "cy", "0", 1, "polar-chart-background"], [4, "ngIf"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "dimensionsChanged", 4, "ngIf"], ["ngx-charts-axis-label", "", 3, "label", "offset", "orient", "height", "width", 4, "ngIf"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "gridline-path radial-gridline-path", "cx", "0", "cy", "0", 4, "ngFor", "ngForOf"], ["cx", "0", "cy", "0", 1, "gridline-path", "radial-gridline-path"], ["ngx-charts-pie-label", "", 3, "data", "radius", "label", "max", "value", "explodeSlices", "animations", "labelTrim", "labelTrimSize", 4, "ngFor", "ngForOf"], ["ngx-charts-pie-label", "", 3, "data", "radius", "label", "max", "value", "explodeSlices", "animations", "labelTrim", "labelTrimSize"], ["ngx-charts-y-axis", "", 3, "yScale", "dims", "showGridLines", "showLabel", "labelText", "trimTicks", "maxTickLength", "tickFormatting", "dimensionsChanged"], ["ngx-charts-axis-label", "", 3, "label", "offset", "orient", "height", "width"], ["ngx-charts-polar-series", "", 3, "gradient", "xScale", "yScale", "colors", "data", "activeEntries", "scaleType", "curve", "rangeFillOpacity", "animations", "tooltipDisabled", "tooltipTemplate", "select", "activate", "deactivate"]], template: function PolarChartComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function PolarChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function PolarChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event); })("legendLabelDeactivate", function PolarChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵelementStart(2, "g");
+        ɵngcc0.ɵɵelement(3, "circle", 2);
+        ɵngcc0.ɵɵtemplate(4, PolarChartComponent__svg_g_4_Template, 2, 1, "g", 3);
+        ɵngcc0.ɵɵtemplate(5, PolarChartComponent__svg_g_5_Template, 2, 1, "g", 3);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(6, PolarChartComponent__svg_g_6_Template, 1, 9, "g", 4);
+        ɵngcc0.ɵɵtemplate(7, PolarChartComponent__svg_g_7_Template, 1, 5, "g", 5);
+        ɵngcc0.ɵɵelementStart(8, "g");
+        ɵngcc0.ɵɵtemplate(9, PolarChartComponent__svg_g_9_Template, 2, 13, "g", 6);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(15, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transformPlot);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("r", ctx.outerRadius);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.showGridLines);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.yAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.xAxis && ctx.showXAxisLabel);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transformPlot);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.results)("ngForTrackBy", ctx.trackBy);
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgIf, ɵngcc1.NgForOf, PieLabelComponent, YAxisComponent, AxisLabelComponent, PolarSeriesComponent]; }, styles: [_c24, _c41, ".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area{pointer-events:none}.polar-series-path{pointer-events:none}\n"], encapsulation: 2, data: { animation: [
+            trigger('animationState', [
+                transition(':leave', [
+                    style({
+                        opacity: 1
+                    }),
+                    animate(500, style({
+                        opacity: 0
+                    }))
+                ])
+            ])
+        ] }, changeDetection: 0 });
+PolarChartComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    xAxis: [{ type: Input }],
+    yAxis: [{ type: Input }],
+    showXAxisLabel: [{ type: Input }],
+    showYAxisLabel: [{ type: Input }],
+    xAxisLabel: [{ type: Input }],
+    yAxisLabel: [{ type: Input }],
+    autoScale: [{ type: Input }],
+    showGridLines: [{ type: Input }],
+    curve: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    schemeType: [{ type: Input }],
+    rangeFillOpacity: [{ type: Input }],
+    trimYAxisTicks: [{ type: Input }],
+    maxYAxisTickLength: [{ type: Input }],
+    xAxisTickFormatting: [{ type: Input }],
+    yAxisTickFormatting: [{ type: Input }],
+    roundDomains: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    showSeriesOnHover: [{ type: Input }],
+    gradient: [{ type: Input }],
+    yAxisMinScale: [{ type: Input }],
+    labelTrim: [{ type: Input }],
+    labelTrimSize: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵPolarChartComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(PolarChartComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PolarChartComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-polar-chart',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelClick)="onClick($event)"
+      (legendLabelActivate)="onActivate($event)"
+      (legendLabelDeactivate)="onDeactivate($event)"
+    >
+      <svg:g class="polar-chart chart" [attr.transform]="transform">
+        <svg:g [attr.transform]="transformPlot">
+          <svg:circle class="polar-chart-background" cx="0" cy="0" [attr.r]="this.outerRadius" />
+          <svg:g *ngIf="showGridLines">
+            <svg:circle
+              *ngFor="let r of radiusTicks"
+              class="gridline-path radial-gridline-path"
+              cx="0"
+              cy="0"
+              [attr.r]="r"
+            />
+          </svg:g>
+          <svg:g *ngIf="xAxis">
+            <svg:g
+              ngx-charts-pie-label
+              *ngFor="let tick of thetaTicks"
+              [data]="tick"
+              [radius]="outerRadius"
+              [label]="tick.label"
+              [max]="outerRadius"
+              [value]="showGridLines ? 1 : outerRadius"
+              [explodeSlices]="true"
+              [animations]="animations"
+              [labelTrim]="labelTrim"
+              [labelTrimSize]="labelTrimSize"
+            ></svg:g>
+          </svg:g>
+        </svg:g>
+        <svg:g
+          ngx-charts-y-axis
+          [attr.transform]="transformYAxis"
+          *ngIf="yAxis"
+          [yScale]="yAxisScale"
+          [dims]="yAxisDims"
+          [showGridLines]="showGridLines"
+          [showLabel]="showYAxisLabel"
+          [labelText]="yAxisLabel"
+          [trimTicks]="trimYAxisTicks"
+          [maxTickLength]="maxYAxisTickLength"
+          [tickFormatting]="yAxisTickFormatting"
+          (dimensionsChanged)="updateYAxisWidth($event)"
+        ></svg:g>
+        <svg:g
+          ngx-charts-axis-label
+          *ngIf="xAxis && showXAxisLabel"
+          [label]="xAxisLabel"
+          [offset]="labelOffset"
+          [orient]="orientation.Bottom"
+          [height]="dims.height"
+          [width]="dims.width"
+        ></svg:g>
+        <svg:g [attr.transform]="transformPlot">
+          <svg:g *ngFor="let series of results; trackBy: trackBy" [@animationState]="'active'">
+            <svg:g
+              ngx-charts-polar-series
+              [gradient]="gradient"
+              [xScale]="xScale"
+              [yScale]="yScale"
+              [colors]="colors"
+              [data]="series"
+              [activeEntries]="activeEntries"
+              [scaleType]="scaleType"
+              [curve]="curve"
+              [rangeFillOpacity]="rangeFillOpacity"
+              [animations]="animations"
+              [tooltipDisabled]="tooltipDisabled"
+              [tooltipTemplate]="tooltipTemplate"
+              (select)="onClick($event)"
+              (activate)="onActivate($event)"
+              (deactivate)="onDeactivate($event)"
+            />
+          </svg:g>
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                animations: [
+                    trigger('animationState', [
+                        transition(':leave', [
+                            style({
+                                opacity: 1
+                            }),
+                            animate(500, style({
+                                opacity: 0
+                            }))
+                        ])
+                    ])
+                ],
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n", ".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\n", ".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area{pointer-events:none}.polar-series-path{pointer-events:none}\n"]
+            }]
+    }], null, { legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], showGridLines: [{
+            type: Input
+        }], curve: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], rangeFillOpacity: [{
+            type: Input
+        }], trimYAxisTicks: [{
+            type: Input
+        }], maxYAxisTickLength: [{
+            type: Input
+        }], roundDomains: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], showSeriesOnHover: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], yAxisMinScale: [{
+            type: Input
+        }], labelTrim: [{
+            type: Input
+        }], labelTrimSize: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], legend: [{
+            type: Input
+        }], xAxis: [{
+            type: Input
+        }], yAxis: [{
+            type: Input
+        }], showXAxisLabel: [{
+            type: Input
+        }], showYAxisLabel: [{
+            type: Input
+        }], xAxisLabel: [{
+            type: Input
+        }], yAxisLabel: [{
+            type: Input
+        }], autoScale: [{
+            type: Input
+        }], schemeType: [{
+            type: Input
+        }], xAxisTickFormatting: [{
+            type: Input
+        }], yAxisTickFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class PolarSeriesComponent {
+    constructor() {
+        this.tooltipDisabled = false;
+        this.gradient = false;
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.circleRadius = 3;
+        this.barOrientation = BarOrientation;
+        this.placementTypes = PlacementTypes;
+        this.styleTypes = StyleTypes;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.updateGradients();
+        const line = this.getLineGenerator();
+        const data = this.sortData(this.data.series);
+        const seriesName = this.data.name;
+        const linearScaleType = this.colors.scaleType === ScaleType.Linear;
+        const min = this.yScale.domain()[0];
+        this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);
+        this.path = line(data) || '';
+        this.circles = data.map(d => {
+            const a = this.getAngle(d);
+            const r = this.getRadius(d);
+            const value = d.value;
+            const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);
+            const cData = Object.assign({}, d, {
+                series: seriesName,
+                value,
+                name: d.name
+            });
+            return {
+                data: cData,
+                cx: r * Math.sin(a),
+                cy: -r * Math.cos(a),
+                value,
+                color,
+                label: d.name
+            };
+        });
+        this.active = this.isActive(this.data);
+        this.inactive = this.isInactive(this.data);
+        this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));
+    }
+    getAngle(d) {
+        const label = d.name;
+        if (this.scaleType === ScaleType.Time) {
+            return this.xScale(label);
+        }
+        else if (this.scaleType === ScaleType.Linear) {
+            return this.xScale(Number(label));
+        }
+        return this.xScale(label);
+    }
+    getRadius(d) {
+        return this.yScale(d.value);
+    }
+    getLineGenerator() {
+        return lineRadial()
+            .angle(d => this.getAngle(d))
+            .radius(d => this.getRadius(d))
+            .curve(this.curve);
+    }
+    sortData(data) {
+        if (this.scaleType === ScaleType.Linear) {
+            return sortLinear(data, 'name');
+        }
+        else if (this.scaleType === ScaleType.Time) {
+            return sortByTime(data, 'name');
+        }
+        return sortByDomain(data, 'name', 'asc', this.xScale.domain());
+    }
+    isActive(entry) {
+        if (!this.activeEntries)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.name === d.name;
+        });
+        return item !== undefined;
+    }
+    isInactive(entry) {
+        if (!this.activeEntries || this.activeEntries.length === 0)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.name === d.name;
+        });
+        return item === undefined;
+    }
+    defaultTooltipText({ label, value }) {
+        return `
+      <span class="tooltip-label">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>
+      <span class="tooltip-val">${value.toLocaleString()}</span>
+    `;
+    }
+    updateGradients() {
+        this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;
+        if (!this.hasGradient) {
+            return;
+        }
+        this.gradientId = 'grad' + id().toString();
+        this.gradientUrl = `url(#${this.gradientId})`;
+        if (this.colors.scaleType === ScaleType.Linear) {
+            const values = this.data.series.map(d => d.value);
+            const max = Math.max(...values);
+            const min = Math.min(...values);
+            this.gradientStops = this.colors.getLinearGradientStops(max, min);
+        }
+        else {
+            this.gradientStops = undefined;
+        }
+    }
+}
+PolarSeriesComponent.ɵfac = function PolarSeriesComponent_Factory(t) { return new (t || PolarSeriesComponent)(); };
+PolarSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PolarSeriesComponent, selectors: [["g", "ngx-charts-polar-series", ""]], inputs: { tooltipDisabled: "tooltipDisabled", gradient: "gradient", animations: "animations", tooltipText: "tooltipText", name: "name", data: "data", xScale: "xScale", yScale: "yScale", colors: "colors", scaleType: "scaleType", curve: "curve", activeEntries: "activeEntries", rangeFillOpacity: "rangeFillOpacity", tooltipTemplate: "tooltipTemplate" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c38, decls: 5, vars: 11, consts: [[1, "polar-charts-series"], ["ngx-charts-svg-radial-gradient", "", 3, "color", "name", "startOpacity", "endOpacity", "stops", 4, "ngIf"], ["ngx-charts-line", "", 1, "polar-series-path", 3, "path", "stroke", "fill", "animations"], ["ngx-charts-circle", "", "class", "circle", "ngx-tooltip", "", 3, "cx", "cy", "r", "fill", "opacity", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate", 4, "ngFor", "ngForOf"], ["ngx-charts-svg-radial-gradient", "", 3, "color", "name", "startOpacity", "endOpacity", "stops"], ["ngx-charts-circle", "", "ngx-tooltip", "", 1, "circle", 3, "cx", "cy", "r", "fill", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate"]], template: function PolarSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g", 0);
+        ɵngcc0.ɵɵelementStart(1, "defs");
+        ɵngcc0.ɵɵtemplate(2, PolarSeriesComponent__svg_g_2_Template, 1, 5, "g", 1);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelement(3, "g", 2);
+        ɵngcc0.ɵɵtemplate(4, PolarSeriesComponent__svg_g_4_Template, 1, 12, "g", 3);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.hasGradient);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵclassProp("active", ctx.active)("inactive", ctx.inactive);
+        ɵngcc0.ɵɵproperty("path", ctx.path)("stroke", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)("fill", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)("animations", ctx.animations);
+        ɵngcc0.ɵɵattribute("fill-opacity", ctx.rangeFillOpacity);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.circles);
+    } }, directives: [ɵngcc1.NgIf, LineComponent, ɵngcc1.NgForOf, SvgRadialGradientComponent, CircleComponent, TooltipDirective], encapsulation: 2, changeDetection: 0 });
+PolarSeriesComponent.propDecorators = {
+    name: [{ type: Input }],
+    data: [{ type: Input }],
+    xScale: [{ type: Input }],
+    yScale: [{ type: Input }],
+    colors: [{ type: Input }],
+    scaleType: [{ type: Input }],
+    curve: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    rangeFillOpacity: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipText: [{ type: Input }],
+    gradient: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PolarSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-polar-series]',
+                template: `
+    <svg:g class="polar-charts-series">
+      <defs>
+        <svg:g
+          ngx-charts-svg-radial-gradient
+          *ngIf="hasGradient"
+          [color]="seriesColor"
+          [name]="gradientId"
+          [startOpacity]="0.25"
+          [endOpacity]="1"
+          [stops]="gradientStops"
+        />
+      </defs>
+      <svg:g
+        ngx-charts-line
+        class="polar-series-path"
+        [path]="path"
+        [stroke]="hasGradient ? gradientUrl : seriesColor"
+        [class.active]="active"
+        [class.inactive]="inactive"
+        [attr.fill-opacity]="rangeFillOpacity"
+        [fill]="hasGradient ? gradientUrl : seriesColor"
+        [animations]="animations"
+      />
+      <svg:g
+        ngx-charts-circle
+        *ngFor="let circle of circles"
+        class="circle"
+        [cx]="circle.cx"
+        [cy]="circle.cy"
+        [r]="circleRadius"
+        [fill]="circle.color"
+        [style.opacity]="inactive ? 0.2 : 1"
+        ngx-tooltip
+        [tooltipDisabled]="tooltipDisabled"
+        [tooltipPlacement]="placementTypes.Top"
+        [tooltipType]="styleTypes.tooltip"
+        [tooltipTitle]="tooltipTemplate ? undefined : tooltipText(circle)"
+        [tooltipTemplate]="tooltipTemplate"
+        [tooltipContext]="circle.data"
+        (select)="select.emit(circle.data)"
+        (activate)="activate.emit({ name: circle.data.series })"
+        (deactivate)="deactivate.emit({ name: circle.data.series })"
+      ></svg:g>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { tooltipDisabled: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], tooltipText: [{
+            type: Input
+        }], name: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }], xScale: [{
+            type: Input
+        }], yScale: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], scaleType: [{
+            type: Input
+        }], curve: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], rangeFillOpacity: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }] }); })();
+
+class AdvancedPieChartComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.activeEntries = [];
+        this.tooltipDisabled = false;
+        this.label = 'Total';
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [20, 20, 20, 20];
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: (this.width * 4) / 12.0,
+            height: this.height,
+            margins: this.margin
+        });
+        this.formatDates();
+        this.domain = this.getDomain();
+        this.setColors();
+        const xOffset = this.dims.width / 2;
+        const yOffset = this.margin[0] + this.dims.height / 2;
+        this.legendWidth = this.width - this.dims.width - this.margin[1];
+        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;
+        this.innerRadius = this.outerRadius * 0.75;
+        this.transform = `translate(${xOffset} , ${yOffset})`;
+    }
+    getDomain() {
+        return this.results.map(d => d.label);
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    setColors() {
+        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);
+    }
+    onActivate(item, fromLegend = false) {
+        item = this.results.find(d => {
+            if (fromLegend) {
+                return d.label === item.name;
+            }
+            else {
+                return d.name === item.name;
+            }
+        });
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value && d.series === item.series;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item, ...this.activeEntries];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item, fromLegend = false) {
+        item = this.results.find(d => {
+            if (fromLegend) {
+                return d.label === item.name;
+            }
+            else {
+                return d.name === item.name;
+            }
+        });
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value && d.series === item.series;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+AdvancedPieChartComponent.ɵfac = function AdvancedPieChartComponent_Factory(t) { return ɵAdvancedPieChartComponent_BaseFactory(t || AdvancedPieChartComponent); };
+AdvancedPieChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AdvancedPieChartComponent, selectors: [["ngx-charts-advanced-pie-chart"]], contentQueries: function AdvancedPieChartComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { activeEntries: "activeEntries", tooltipDisabled: "tooltipDisabled", label: "label", gradient: "gradient", tooltipText: "tooltipText", valueFormatting: "valueFormatting", nameFormatting: "nameFormatting", percentageFormatting: "percentageFormatting" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 7, vars: 37, consts: [[1, "advanced-pie", "chart"], [3, "view", "showLegend", "animations"], [1, "pie", "chart"], ["ngx-charts-pie-series", "", 3, "colors", "series", "innerRadius", "activeEntries", "outerRadius", "gradient", "tooltipDisabled", "tooltipTemplate", "tooltipText", "animations", "select", "activate", "deactivate"], [1, "advanced-pie-legend-wrapper"], [3, "data", "colors", "width", "label", "animations", "valueFormatting", "labelFormatting", "percentageFormatting", "select", "activate", "deactivate"]], template: function AdvancedPieChartComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "div");
+        ɵngcc0.ɵɵelementStart(1, "div", 0);
+        ɵngcc0.ɵɵelementStart(2, "ngx-charts-chart", 1);
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(3, "g", 2);
+        ɵngcc0.ɵɵelementStart(4, "g", 3);
+        ɵngcc0.ɵɵlistener("select", function AdvancedPieChartComponent_Template__svg_g_select_4_listener($event) { return ctx.onClick($event); })("activate", function AdvancedPieChartComponent_Template__svg_g_activate_4_listener($event) { return ctx.onActivate($event); })("deactivate", function AdvancedPieChartComponent_Template__svg_g_deactivate_4_listener($event) { return ctx.onDeactivate($event); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵnamespaceHTML();
+        ɵngcc0.ɵɵelementStart(5, "div", 4);
+        ɵngcc0.ɵɵelementStart(6, "ngx-charts-advanced-legend", 5);
+        ɵngcc0.ɵɵlistener("select", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_select_6_listener($event) { return ctx.onClick($event); })("activate", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_activate_6_listener($event) { return ctx.onActivate($event, true); })("deactivate", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_deactivate_6_listener($event) { return ctx.onDeactivate($event, true); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵstyleProp("width", ctx.width, "px")("height", ctx.height, "px");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("width", ctx.dims.width, "px")("height", ctx.dims.height, "px");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(34, _c23, ctx.width, ctx.height))("showLegend", false)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("colors", ctx.colors)("series", ctx.results)("innerRadius", ctx.innerRadius)("activeEntries", ctx.activeEntries)("outerRadius", ctx.outerRadius)("gradient", ctx.gradient)("tooltipDisabled", ctx.tooltipDisabled)("tooltipTemplate", ctx.tooltipTemplate)("tooltipText", ctx.tooltipText)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("width", ctx.width - ctx.dims.width, "px")("height", ctx.height, "px");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("data", ctx.results)("colors", ctx.colors)("width", ctx.width - ctx.dims.width - ctx.margin[1])("label", ctx.label)("animations", ctx.animations)("valueFormatting", ctx.valueFormatting)("labelFormatting", ctx.nameFormatting)("percentageFormatting", ctx.percentageFormatting);
+    } }, directives: function () { return [ChartComponent, PieSeriesComponent, AdvancedLegendComponent]; }, styles: [_c24, ".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\n"], encapsulation: 2, changeDetection: 0 });
+AdvancedPieChartComponent.propDecorators = {
+    gradient: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipText: [{ type: Input }],
+    label: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }],
+    valueFormatting: [{ type: Input }],
+    nameFormatting: [{ type: Input }],
+    percentageFormatting: [{ type: Input }]
+};
+const ɵAdvancedPieChartComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(AdvancedPieChartComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AdvancedPieChartComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-advanced-pie-chart',
+                template: `
+    <div [style.width.px]="width" [style.height.px]="height">
+      <div class="advanced-pie chart" [style.width.px]="dims.width" [style.height.px]="dims.height">
+        <ngx-charts-chart [view]="[width, height]" [showLegend]="false" [animations]="animations">
+          <svg:g [attr.transform]="transform" class="pie chart">
+            <svg:g
+              ngx-charts-pie-series
+              [colors]="colors"
+              [series]="results"
+              [innerRadius]="innerRadius"
+              [activeEntries]="activeEntries"
+              [outerRadius]="outerRadius"
+              [gradient]="gradient"
+              [tooltipDisabled]="tooltipDisabled"
+              [tooltipTemplate]="tooltipTemplate"
+              [tooltipText]="tooltipText"
+              (select)="onClick($event)"
+              (activate)="onActivate($event)"
+              (deactivate)="onDeactivate($event)"
+              [animations]="animations"
+            ></svg:g>
+          </svg:g>
+        </ngx-charts-chart>
+      </div>
+      <div class="advanced-pie-legend-wrapper" [style.width.px]="width - dims.width" [style.height.px]="height">
+        <ngx-charts-advanced-legend
+          [data]="results"
+          [colors]="colors"
+          [width]="width - dims.width - margin[1]"
+          [label]="label"
+          [animations]="animations"
+          [valueFormatting]="valueFormatting"
+          [labelFormatting]="nameFormatting"
+          [percentageFormatting]="percentageFormatting"
+          (select)="onClick($event)"
+          (activate)="onActivate($event, true)"
+          (deactivate)="onDeactivate($event, true)"
+        >
+        </ngx-charts-advanced-legend>
+      </div>
+    </div>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n", ".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\n"]
+            }]
+    }], null, { activeEntries: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], label: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], gradient: [{
+            type: Input
+        }], tooltipText: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }], valueFormatting: [{
+            type: Input
+        }], nameFormatting: [{
+            type: Input
+        }], percentageFormatting: [{
+            type: Input
+        }] }); })();
+
+class PieLabelComponent {
+    constructor(platformId) {
+        this.platformId = platformId;
+        this.animations = true;
+        this.labelTrim = true;
+        this.labelTrimSize = 10;
+        this.trimLabel = trimLabel;
+    }
+    ngOnChanges(changes) {
+        this.setTransforms();
+        this.update();
+    }
+    setTransforms() {
+        if (isPlatformServer(this.platformId)) {
+            this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;
+            this.attrTransform = `translate(${this.textX},${this.textY})`;
+            this.textTransition = !this.animations ? null : 'transform 0.75s';
+        }
+        else {
+            const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);
+            this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;
+            this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;
+            this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';
+        }
+    }
+    update() {
+        let startRadius = this.radius;
+        if (this.explodeSlices) {
+            startRadius = (this.radius * this.value) / this.max;
+        }
+        const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);
+        // Calculate innerPos then scale outer position to match label position
+        const innerPos = innerArc.centroid(this.data);
+        let scale = this.data.pos[1] / innerPos[1];
+        if (this.data.pos[1] === 0 || innerPos[1] === 0) {
+            scale = 1;
+        }
+        const outerPos = [scale * innerPos[0], scale * innerPos[1]];
+        this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;
+    }
+    get textX() {
+        return this.data.pos[0];
+    }
+    get textY() {
+        return this.data.pos[1];
+    }
+    textAnchor() {
+        return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;
+    }
+    midAngle(d) {
+        return d.startAngle + (d.endAngle - d.startAngle) / 2;
+    }
+}
+PieLabelComponent.ɵfac = function PieLabelComponent_Factory(t) { return new (t || PieLabelComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
+PieLabelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PieLabelComponent, selectors: [["g", "ngx-charts-pie-label", ""]], inputs: { animations: "animations", labelTrim: "labelTrim", labelTrimSize: "labelTrimSize", data: "data", radius: "radius", label: "label", color: "color", max: "max", value: "value", explodeSlices: "explodeSlices" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c39, decls: 6, vars: 17, consts: [["dy", ".35em", 1, "pie-label"], ["fill", "none", 1, "pie-label-line", "line"]], template: function PieLabelComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "title");
+        ɵngcc0.ɵɵtext(1);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(2, "g");
+        ɵngcc0.ɵɵelementStart(3, "text", 0);
+        ɵngcc0.ɵɵtext(4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelement(5, "path", 1);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵtextInterpolate(ctx.label);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("transform", ctx.styleTransform)("transition", ctx.textTransition);
+        ɵngcc0.ɵɵattribute("transform", ctx.attrTransform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("text-anchor", ctx.textAnchor())("shape-rendering", "crispEdges");
+        ɵngcc0.ɵɵclassProp("animation", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.labelTrim ? ctx.trimLabel(ctx.label, ctx.labelTrimSize) : ctx.label, " ");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵclassProp("animation", ctx.animations);
+        ɵngcc0.ɵɵattribute("d", ctx.line)("stroke", ctx.color);
+    } }, encapsulation: 2, changeDetection: 0 });
+PieLabelComponent.ctorParameters = () => [
+    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
+];
+PieLabelComponent.propDecorators = {
+    data: [{ type: Input }],
+    radius: [{ type: Input }],
+    label: [{ type: Input }],
+    color: [{ type: Input }],
+    max: [{ type: Input }],
+    value: [{ type: Input }],
+    explodeSlices: [{ type: Input }],
+    animations: [{ type: Input }],
+    labelTrim: [{ type: Input }],
+    labelTrimSize: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PieLabelComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-pie-label]',
+                template: `
+    <title>{{ label }}</title>
+    <svg:g [attr.transform]="attrTransform" [style.transform]="styleTransform" [style.transition]="textTransition">
+      <svg:text
+        class="pie-label"
+        [class.animation]="animations"
+        dy=".35em"
+        [style.textAnchor]="textAnchor()"
+        [style.shapeRendering]="'crispEdges'"
+      >
+        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}
+      </svg:text>
+    </svg:g>
+    <svg:path
+      [attr.d]="line"
+      [attr.stroke]="color"
+      fill="none"
+      class="pie-label-line line"
+      [class.animation]="animations"
+    ></svg:path>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: undefined, decorators: [{
+                type: Inject,
+                args: [PLATFORM_ID]
+            }] }]; }, { animations: [{
+            type: Input
+        }], labelTrim: [{
+            type: Input
+        }], labelTrimSize: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }], radius: [{
+            type: Input
+        }], label: [{
+            type: Input
+        }], color: [{
+            type: Input
+        }], max: [{
+            type: Input
+        }], value: [{
+            type: Input
+        }], explodeSlices: [{
+            type: Input
+        }] }); })();
+
+class PieArcComponent {
+    constructor(element) {
+        this.startAngle = 0;
+        this.endAngle = Math.PI * 2;
+        this.cornerRadius = 0;
+        this.explodeSlices = false;
+        this.gradient = false;
+        this.animate = true;
+        this.pointerEvents = true;
+        this.isActive = false;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.dblclick = new EventEmitter();
+        this.barOrientation = BarOrientation;
+        this.initialized = false;
+        this.element = element.nativeElement;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    getGradient() {
+        return this.gradient ? this.gradientFill : this.fill;
+    }
+    getPointerEvents() {
+        return this.pointerEvents ? 'auto' : 'none';
+    }
+    update() {
+        const calc = this.calculateArc();
+        this.startOpacity = 0.5;
+        this.radialGradientId = 'linearGrad' + id().toString();
+        this.gradientFill = `url(#${this.radialGradientId})`;
+        if (this.animate) {
+            if (this.initialized) {
+                this.updateAnimation();
+            }
+            else {
+                this.loadAnimation();
+                this.initialized = true;
+            }
+        }
+        else {
+            this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();
+        }
+    }
+    calculateArc() {
+        let outerRadius = this.outerRadius;
+        if (this.explodeSlices && this.innerRadius === 0) {
+            outerRadius = (this.outerRadius * this.value) / this.max;
+        }
+        return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);
+    }
+    loadAnimation() {
+        const node = select(this.element)
+            .selectAll('.arc')
+            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);
+        const calc = this.calculateArc();
+        node
+            .transition()
+            .attrTween('d', function (d) {
+            this._current = this._current || d;
+            const copyOfD = Object.assign({}, d);
+            copyOfD.endAngle = copyOfD.startAngle;
+            const interpolater = interpolate(copyOfD, copyOfD);
+            this._current = interpolater(0);
+            return function (t) {
+                return calc(interpolater(t));
+            };
+        })
+            .transition()
+            .duration(750)
+            .attrTween('d', function (d) {
+            this._current = this._current || d;
+            const interpolater = interpolate(this._current, d);
+            this._current = interpolater(0);
+            return function (t) {
+                return calc(interpolater(t));
+            };
+        });
+    }
+    updateAnimation() {
+        const node = select(this.element)
+            .selectAll('.arc')
+            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);
+        const calc = this.calculateArc();
+        node
+            .transition()
+            .duration(750)
+            .attrTween('d', function (d) {
+            this._current = this._current || d;
+            const interpolater = interpolate(this._current, d);
+            this._current = interpolater(0);
+            return function (t) {
+                return calc(interpolater(t));
+            };
+        });
+    }
+    onClick() {
+        clearTimeout(this._timeout);
+        this._timeout = setTimeout(() => this.select.emit(this.data), 200);
+    }
+    onDblClick(event) {
+        event.preventDefault();
+        event.stopPropagation();
+        clearTimeout(this._timeout);
+        this.dblclick.emit({
+            data: this.data,
+            nativeEvent: event
+        });
+    }
+}
+PieArcComponent.ɵfac = function PieArcComponent_Factory(t) { return new (t || PieArcComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
+PieArcComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PieArcComponent, selectors: [["g", "ngx-charts-pie-arc", ""]], inputs: { startAngle: "startAngle", endAngle: "endAngle", cornerRadius: "cornerRadius", explodeSlices: "explodeSlices", gradient: "gradient", animate: "animate", pointerEvents: "pointerEvents", isActive: "isActive", fill: "fill", innerRadius: "innerRadius", outerRadius: "outerRadius", value: "value", max: "max", data: "data" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate", dblclick: "dblclick" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c40, decls: 3, vars: 7, consts: [[1, "arc-group"], [4, "ngIf"], [1, "arc", 3, "click", "dblclick", "mouseenter", "mouseleave"], ["ngx-charts-svg-radial-gradient", "", 3, "color", "name", "startOpacity"]], template: function PieArcComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g", 0);
+        ɵngcc0.ɵɵtemplate(1, PieArcComponent__svg_defs_1_Template, 2, 3, "defs", 1);
+        ɵngcc0.ɵɵelementStart(2, "path", 2);
+        ɵngcc0.ɵɵlistener("click", function PieArcComponent_Template__svg_path_click_2_listener() { return ctx.onClick(); })("dblclick", function PieArcComponent_Template__svg_path_dblclick_2_listener($event) { return ctx.onDblClick($event); })("mouseenter", function PieArcComponent_Template__svg_path_mouseenter_2_listener() { return ctx.activate.emit(ctx.data); })("mouseleave", function PieArcComponent_Template__svg_path_mouseleave_2_listener() { return ctx.deactivate.emit(ctx.data); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.gradient);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("pointer-events", ctx.getPointerEvents());
+        ɵngcc0.ɵɵclassProp("active", ctx.isActive);
+        ɵngcc0.ɵɵattribute("d", ctx.path)("fill", ctx.getGradient());
+    } }, directives: [ɵngcc1.NgIf, SvgRadialGradientComponent], encapsulation: 2, changeDetection: 0 });
+PieArcComponent.ctorParameters = () => [
+    { type: ElementRef }
+];
+PieArcComponent.propDecorators = {
+    fill: [{ type: Input }],
+    startAngle: [{ type: Input }],
+    endAngle: [{ type: Input }],
+    innerRadius: [{ type: Input }],
+    outerRadius: [{ type: Input }],
+    cornerRadius: [{ type: Input }],
+    value: [{ type: Input }],
+    max: [{ type: Input }],
+    data: [{ type: Input }],
+    explodeSlices: [{ type: Input }],
+    gradient: [{ type: Input }],
+    animate: [{ type: Input }],
+    pointerEvents: [{ type: Input }],
+    isActive: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    dblclick: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PieArcComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-pie-arc]',
+                template: `
+    <svg:g class="arc-group">
+      <svg:defs *ngIf="gradient">
+        <svg:g ngx-charts-svg-radial-gradient [color]="fill" [name]="radialGradientId" [startOpacity]="startOpacity" />
+      </svg:defs>
+      <svg:path
+        [attr.d]="path"
+        class="arc"
+        [class.active]="isActive"
+        [attr.fill]="getGradient()"
+        (click)="onClick()"
+        (dblclick)="onDblClick($event)"
+        (mouseenter)="activate.emit(data)"
+        (mouseleave)="deactivate.emit(data)"
+        [style.pointer-events]="getPointerEvents()"
+      />
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { startAngle: [{
+            type: Input
+        }], endAngle: [{
+            type: Input
+        }], cornerRadius: [{
+            type: Input
+        }], explodeSlices: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], animate: [{
+            type: Input
+        }], pointerEvents: [{
+            type: Input
+        }], isActive: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], dblclick: [{
+            type: Output
+        }], fill: [{
+            type: Input
+        }], innerRadius: [{
+            type: Input
+        }], outerRadius: [{
+            type: Input
+        }], value: [{
+            type: Input
+        }], max: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }] }); })();
+
+class PieChartComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.labels = false;
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.explodeSlices = false;
+        this.doughnut = false;
+        this.arcWidth = 0.25;
+        this.activeEntries = [];
+        this.tooltipDisabled = false;
+        this.trimLabels = true;
+        this.maxLabelLength = 10;
+        this.dblclick = new EventEmitter();
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+    }
+    update() {
+        super.update();
+        if (this.labels && this.hasNoOptionalMarginsSet()) {
+            this.margins = [30, 80, 30, 80];
+        }
+        else if (!this.labels && this.hasNoOptionalMarginsSet()) {
+            // default value for margins
+            this.margins = [20, 20, 20, 20];
+        }
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margins,
+            showLegend: this.legend,
+            legendPosition: this.legendPosition
+        });
+        this.formatDates();
+        const xOffset = this.margins[3] + this.dims.width / 2;
+        const yOffset = this.margins[0] + this.dims.height / 2;
+        this.translation = `translate(${xOffset}, ${yOffset})`;
+        this.outerRadius = Math.min(this.dims.width, this.dims.height);
+        if (this.labels) {
+            // make room for labels
+            this.outerRadius /= 3;
+        }
+        else {
+            this.outerRadius /= 2;
+        }
+        this.innerRadius = 0;
+        if (this.doughnut) {
+            this.innerRadius = this.outerRadius * (1 - this.arcWidth);
+        }
+        this.domain = this.getDomain();
+        // sort data according to domain
+        this.data = this.results.sort((a, b) => {
+            return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);
+        });
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+    }
+    getDomain() {
+        return this.results.map(d => d.label);
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    setColors() {
+        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);
+    }
+    getLegendOptions() {
+        return {
+            scaleType: ScaleType.Ordinal,
+            domain: this.domain,
+            colors: this.colors,
+            title: this.legendTitle,
+            position: this.legendPosition
+        };
+    }
+    onActivate(item, fromLegend = false) {
+        item = this.results.find(d => {
+            if (fromLegend) {
+                return d.label === item.name;
+            }
+            else {
+                return d.name === item.name;
+            }
+        });
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value && d.series === item.series;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item, ...this.activeEntries];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item, fromLegend = false) {
+        item = this.results.find(d => {
+            if (fromLegend) {
+                return d.label === item.name;
+            }
+            else {
+                return d.name === item.name;
+            }
+        });
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value && d.series === item.series;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+    hasNoOptionalMarginsSet() {
+        return !this.margins || this.margins.length <= 0;
+    }
+}
+PieChartComponent.ɵfac = function PieChartComponent_Factory(t) { return ɵPieChartComponent_BaseFactory(t || PieChartComponent); };
+PieChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PieChartComponent, selectors: [["ngx-charts-pie-chart"]], contentQueries: function PieChartComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { labels: "labels", legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", explodeSlices: "explodeSlices", doughnut: "doughnut", arcWidth: "arcWidth", activeEntries: "activeEntries", tooltipDisabled: "tooltipDisabled", trimLabels: "trimLabels", maxLabelLength: "maxLabelLength", margins: "margins", gradient: "gradient", labelFormatting: "labelFormatting", tooltipText: "tooltipText" }, outputs: { dblclick: "dblclick", select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 24, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelActivate", "legendLabelDeactivate", "legendLabelClick"], [1, "pie-chart", "chart"], ["ngx-charts-pie-series", "", 3, "colors", "series", "showLabels", "labelFormatting", "trimLabels", "maxLabelLength", "activeEntries", "innerRadius", "outerRadius", "explodeSlices", "gradient", "animations", "tooltipDisabled", "tooltipTemplate", "tooltipText", "dblclick", "select", "activate", "deactivate"]], template: function PieChartComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelActivate", function PieChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event, true); })("legendLabelDeactivate", function PieChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event, true); })("legendLabelClick", function PieChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵelementStart(2, "g", 2);
+        ɵngcc0.ɵɵlistener("dblclick", function PieChartComponent_Template__svg_g_dblclick_2_listener($event) { return ctx.dblclick.emit($event); })("select", function PieChartComponent_Template__svg_g_select_2_listener($event) { return ctx.onClick($event); })("activate", function PieChartComponent_Template__svg_g_activate_2_listener($event) { return ctx.onActivate($event); })("deactivate", function PieChartComponent_Template__svg_g_deactivate_2_listener($event) { return ctx.onDeactivate($event); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(21, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.translation);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("colors", ctx.colors)("series", ctx.data)("showLabels", ctx.labels)("labelFormatting", ctx.labelFormatting)("trimLabels", ctx.trimLabels)("maxLabelLength", ctx.maxLabelLength)("activeEntries", ctx.activeEntries)("innerRadius", ctx.innerRadius)("outerRadius", ctx.outerRadius)("explodeSlices", ctx.explodeSlices)("gradient", ctx.gradient)("animations", ctx.animations)("tooltipDisabled", ctx.tooltipDisabled)("tooltipTemplate", ctx.tooltipTemplate)("tooltipText", ctx.tooltipText);
+    } }, directives: function () { return [ChartComponent, PieSeriesComponent]; }, styles: [_c24, _c41], encapsulation: 2, changeDetection: 0 });
+PieChartComponent.propDecorators = {
+    labels: [{ type: Input }],
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    explodeSlices: [{ type: Input }],
+    doughnut: [{ type: Input }],
+    arcWidth: [{ type: Input }],
+    gradient: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    labelFormatting: [{ type: Input }],
+    trimLabels: [{ type: Input }],
+    maxLabelLength: [{ type: Input }],
+    tooltipText: [{ type: Input }],
+    dblclick: [{ type: Output }],
+    margins: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵPieChartComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(PieChartComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PieChartComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-pie-chart',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelActivate)="onActivate($event, true)"
+      (legendLabelDeactivate)="onDeactivate($event, true)"
+      (legendLabelClick)="onClick($event)"
+    >
+      <svg:g [attr.transform]="translation" class="pie-chart chart">
+        <svg:g
+          ngx-charts-pie-series
+          [colors]="colors"
+          [series]="data"
+          [showLabels]="labels"
+          [labelFormatting]="labelFormatting"
+          [trimLabels]="trimLabels"
+          [maxLabelLength]="maxLabelLength"
+          [activeEntries]="activeEntries"
+          [innerRadius]="innerRadius"
+          [outerRadius]="outerRadius"
+          [explodeSlices]="explodeSlices"
+          [gradient]="gradient"
+          [animations]="animations"
+          [tooltipDisabled]="tooltipDisabled"
+          [tooltipTemplate]="tooltipTemplate"
+          [tooltipText]="tooltipText"
+          (dblclick)="dblclick.emit($event)"
+          (select)="onClick($event)"
+          (activate)="onActivate($event)"
+          (deactivate)="onDeactivate($event)"
+        />
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n", ".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\n"]
+            }]
+    }], null, { labels: [{
+            type: Input
+        }], legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], explodeSlices: [{
+            type: Input
+        }], doughnut: [{
+            type: Input
+        }], arcWidth: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], trimLabels: [{
+            type: Input
+        }], maxLabelLength: [{
+            type: Input
+        }], dblclick: [{
+            type: Output
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], margins: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], labelFormatting: [{
+            type: Input
+        }], tooltipText: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+function gridSize(dims, len, minWidth) {
+    let rows = 1;
+    let cols = len;
+    const width = dims.width;
+    if (width > minWidth) {
+        while (width / cols < minWidth) {
+            rows += 1;
+            cols = Math.ceil(len / rows);
+        }
+    }
+    return [cols, rows];
+}
+function gridLayout(dims, data, minWidth, designatedTotal) {
+    const xScale = scaleBand();
+    const yScale = scaleBand();
+    const width = dims.width;
+    const height = dims.height;
+    const [columns, rows] = gridSize(dims, data.length, minWidth);
+    const xDomain = [];
+    const yDomain = [];
+    for (let i = 0; i < rows; i++) {
+        yDomain.push(i);
+    }
+    for (let i = 0; i < columns; i++) {
+        xDomain.push(i);
+    }
+    xScale.domain(xDomain);
+    yScale.domain(yDomain);
+    xScale.rangeRound([0, width], 0.1);
+    yScale.rangeRound([0, height], 0.1);
+    const res = [];
+    const total = designatedTotal ? designatedTotal : getTotal(data);
+    const cardWidth = xScale.bandwidth();
+    const cardHeight = yScale.bandwidth();
+    for (let i = 0; i < data.length; i++) {
+        res[i] = {};
+        res[i].data = {
+            name: data[i] ? data[i].name : '',
+            value: data[i] ? data[i].value : undefined,
+            extra: data[i] ? data[i].extra : undefined,
+            label: data[i] ? data[i].label : ''
+        };
+        res[i].x = xScale(i % columns);
+        res[i].y = yScale(Math.floor(i / columns));
+        res[i].width = cardWidth;
+        res[i].height = cardHeight;
+        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;
+        res[i].data.total = total;
+    }
+    return res;
+}
+function getTotal(results) {
+    return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);
+}
+
+class PieGridComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.tooltipDisabled = false;
+        this.label = 'Total';
+        this.minWidth = 150;
+        this.activeEntries = [];
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.margin = [20, 20, 20, 20];
+        this.placementTypes = PlacementTypes;
+        this.styleTypes = StyleTypes;
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin
+        });
+        this.formatDates();
+        this.domain = this.getDomain();
+        this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);
+        this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;
+        this.series = this.getSeries();
+        this.setColors();
+        this.tooltipText = this.tooltipText || this.defaultTooltipText;
+    }
+    defaultTooltipText({ data }) {
+        const label = trimLabel(formatLabel(data.name));
+        const val = data.value.toLocaleString();
+        return `
+      <span class="tooltip-label">${label}</span>
+      <span class="tooltip-val">${val}</span>
+    `;
+    }
+    getDomain() {
+        return this.results.map(d => d.label);
+    }
+    getSeries() {
+        const total = this.designatedTotal ? this.designatedTotal : this.getTotal();
+        return this.data.map(d => {
+            const baselineLabelHeight = 20;
+            const padding = 10;
+            const name = d.data.name;
+            const label = formatLabel(name);
+            const value = d.data.value;
+            const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;
+            const innerRadius = radius * 0.9;
+            let count = 0;
+            const colors = () => {
+                count += 1;
+                if (count === 1) {
+                    return 'rgba(100,100,100,0.3)';
+                }
+                else {
+                    return this.colorScale.getColor(label);
+                }
+            };
+            const xPos = d.x + (d.width - padding) / 2;
+            const yPos = d.y + (d.height - baselineLabelHeight) / 2;
+            return {
+                transform: `translate(${xPos}, ${yPos})`,
+                colors,
+                innerRadius,
+                outerRadius: radius,
+                name,
+                label: trimLabel(label),
+                total: value,
+                value,
+                percent: format('.1%')(d.data.percent),
+                data: [
+                    d,
+                    {
+                        data: {
+                            other: true,
+                            value: total - value,
+                            name: d.data.name
+                        }
+                    }
+                ]
+            };
+        });
+    }
+    getTotal() {
+        return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    setColors() {
+        this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);
+    }
+    onActivate(item, fromLegend = false) {
+        item = this.results.find(d => {
+            if (fromLegend) {
+                return d.label === item.name;
+            }
+            else {
+                return d.name === item.name;
+            }
+        });
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value && d.series === item.series;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item, ...this.activeEntries];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item, fromLegend = false) {
+        item = this.results.find(d => {
+            if (fromLegend) {
+                return d.label === item.name;
+            }
+            else {
+                return d.name === item.name;
+            }
+        });
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value && d.series === item.series;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+}
+PieGridComponent.ɵfac = function PieGridComponent_Factory(t) { return ɵPieGridComponent_BaseFactory(t || PieGridComponent); };
+PieGridComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PieGridComponent, selectors: [["ngx-charts-pie-grid"]], contentQueries: function PieGridComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { tooltipDisabled: "tooltipDisabled", label: "label", minWidth: "minWidth", activeEntries: "activeEntries", tooltipText: "tooltipText", designatedTotal: "designatedTotal" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[3, "view", "showLegend", "animations"], [1, "pie-grid", "chart"], ["class", "pie-grid-item", 4, "ngFor", "ngForOf"], [1, "pie-grid-item"], ["ngx-charts-pie-grid-series", "", "ngx-tooltip", "", 3, "colors", "data", "innerRadius", "outerRadius", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate"], ["class", "label percent-label", "dy", "-0.5em", "x", "0", "y", "5", "ngx-charts-count-up", "", "text-anchor", "middle", 3, "countTo", "countSuffix", 4, "ngIf"], ["class", "label percent-label", "dy", "-0.5em", "x", "0", "y", "5", "text-anchor", "middle", 4, "ngIf"], ["dy", "0.5em", "x", "0", "y", "5", "text-anchor", "middle", 1, "label"], ["class", "label", "dy", "1.23em", "x", "0", "text-anchor", "middle", "ngx-charts-count-up", "", 3, "countTo", "countPrefix", 4, "ngIf"], ["class", "label", "dy", "1.23em", "x", "0", "text-anchor", "middle", 4, "ngIf"], ["dy", "-0.5em", "x", "0", "y", "5", "ngx-charts-count-up", "", "text-anchor", "middle", 1, "label", "percent-label", 3, "countTo", "countSuffix"], ["dy", "-0.5em", "x", "0", "y", "5", "text-anchor", "middle", 1, "label", "percent-label"], ["dy", "1.23em", "x", "0", "text-anchor", "middle", "ngx-charts-count-up", "", 1, "label", 3, "countTo", "countPrefix"], ["dy", "1.23em", "x", "0", "text-anchor", "middle", 1, "label"]], template: function PieGridComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵtemplate(2, PieGridComponent__svg_g_2_Template, 8, 19, "g", 2);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(5, _c23, ctx.width, ctx.height))("showLegend", false)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.series);
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgForOf, PieGridSeriesComponent, TooltipDirective, ɵngcc1.NgIf, CountUpDirective]; }, styles: [_c24, ".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\n"], encapsulation: 2, changeDetection: 0 });
+PieGridComponent.propDecorators = {
+    designatedTotal: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipText: [{ type: Input }],
+    label: [{ type: Input }],
+    minWidth: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵPieGridComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(PieGridComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PieGridComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-pie-grid',
+                template: `
+    <ngx-charts-chart [view]="[width, height]" [showLegend]="false" [animations]="animations">
+      <svg:g [attr.transform]="transform" class="pie-grid chart">
+        <svg:g *ngFor="let series of series" class="pie-grid-item" [attr.transform]="series.transform">
+          <svg:g
+            ngx-charts-pie-grid-series
+            [colors]="series.colors"
+            [data]="series.data"
+            [innerRadius]="series.innerRadius"
+            [outerRadius]="series.outerRadius"
+            [animations]="animations"
+            (select)="onClick($event)"
+            ngx-tooltip
+            [tooltipDisabled]="tooltipDisabled"
+            [tooltipPlacement]="placementTypes.Top"
+            [tooltipType]="styleTypes.tooltip"
+            [tooltipTitle]="tooltipTemplate ? undefined : tooltipText({ data: series })"
+            [tooltipTemplate]="tooltipTemplate"
+            [tooltipContext]="series.data[0].data"
+            (activate)="onActivate($event)"
+            (deactivate)="onDeactivate($event)"
+          />
+          <svg:text
+            *ngIf="animations"
+            class="label percent-label"
+            dy="-0.5em"
+            x="0"
+            y="5"
+            ngx-charts-count-up
+            [countTo]="series.percent"
+            [countSuffix]="'%'"
+            text-anchor="middle"
+          ></svg:text>
+          <svg:text *ngIf="!animations" class="label percent-label" dy="-0.5em" x="0" y="5" text-anchor="middle">
+            {{ series.percent.toLocaleString() }}
+          </svg:text>
+          <svg:text class="label" dy="0.5em" x="0" y="5" text-anchor="middle">
+            {{ series.label }}
+          </svg:text>
+          <svg:text
+            *ngIf="animations"
+            class="label"
+            dy="1.23em"
+            x="0"
+            [attr.y]="series.outerRadius"
+            text-anchor="middle"
+            ngx-charts-count-up
+            [countTo]="series.total"
+            [countPrefix]="label + ': '"
+          ></svg:text>
+          <svg:text
+            *ngIf="!animations"
+            class="label"
+            dy="1.23em"
+            x="0"
+            [attr.y]="series.outerRadius"
+            text-anchor="middle"
+          >
+            {{ label }}: {{ series.total.toLocaleString() }}
+          </svg:text>
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n", ".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\n"]
+            }]
+    }], null, { tooltipDisabled: [{
+            type: Input
+        }], label: [{
+            type: Input
+        }], minWidth: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], tooltipText: [{
+            type: Input
+        }], designatedTotal: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class PieGridSeriesComponent {
+    constructor(element) {
+        this.innerRadius = 70;
+        this.outerRadius = 80;
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.element = element.nativeElement;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.layout = pie()
+            .value(d => d.data.value)
+            .sort(null);
+        this.arcs = this.getArcs();
+    }
+    getArcs() {
+        return this.layout(this.data).map((arc, index) => {
+            const label = arc.data.data.name;
+            const other = arc.data.data.other;
+            if (index === 0) {
+                arc.startAngle = 0;
+            }
+            const color = this.colors(label);
+            return {
+                data: arc.data.data,
+                class: 'arc ' + 'arc' + index,
+                fill: color,
+                startAngle: other ? 0 : arc.startAngle,
+                endAngle: arc.endAngle,
+                animate: this.animations && !other,
+                pointerEvents: !other
+            };
+        });
+    }
+    onClick(data) {
+        this.select.emit(this.data[0].data);
+    }
+    trackBy(index, item) {
+        return item.data.name;
+    }
+    label(arc) {
+        return arc.data.name;
+    }
+    color(arc) {
+        return this.colors(this.label(arc));
+    }
+}
+PieGridSeriesComponent.ɵfac = function PieGridSeriesComponent_Factory(t) { return new (t || PieGridSeriesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
+PieGridSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PieGridSeriesComponent, selectors: [["g", "ngx-charts-pie-grid-series", ""]], inputs: { innerRadius: "innerRadius", outerRadius: "outerRadius", animations: "animations", colors: "colors", data: "data" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c43, decls: 2, vars: 2, consts: [[1, "pie-grid-arcs"], ["ngx-charts-pie-arc", "", 3, "startAngle", "endAngle", "innerRadius", "outerRadius", "fill", "value", "data", "gradient", "pointerEvents", "animate", "select", "activate", "deactivate", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-pie-arc", "", 3, "startAngle", "endAngle", "innerRadius", "outerRadius", "fill", "value", "data", "gradient", "pointerEvents", "animate", "select", "activate", "deactivate"]], template: function PieGridSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g", 0);
+        ɵngcc0.ɵɵtemplate(1, PieGridSeriesComponent__svg_g_1_Template, 1, 11, "g", 1);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.arcs)("ngForTrackBy", ctx.trackBy);
+    } }, directives: [ɵngcc1.NgForOf, PieArcComponent], encapsulation: 2, changeDetection: 0 });
+PieGridSeriesComponent.ctorParameters = () => [
+    { type: ElementRef }
+];
+PieGridSeriesComponent.propDecorators = {
+    colors: [{ type: Input }],
+    data: [{ type: Input }],
+    innerRadius: [{ type: Input }],
+    outerRadius: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PieGridSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-pie-grid-series]',
+                template: `
+    <svg:g class="pie-grid-arcs">
+      <svg:g
+        ngx-charts-pie-arc
+        *ngFor="let arc of arcs; trackBy: trackBy"
+        [attr.class]="arc.class"
+        [startAngle]="arc.startAngle"
+        [endAngle]="arc.endAngle"
+        [innerRadius]="innerRadius"
+        [outerRadius]="outerRadius"
+        [fill]="color(arc)"
+        [value]="arc.data.value"
+        [data]="arc.data"
+        [gradient]="false"
+        [pointerEvents]="arc.pointerEvents"
+        [animate]="arc.animate"
+        (select)="onClick($event)"
+        (activate)="activate.emit($event)"
+        (deactivate)="deactivate.emit($event)"
+      ></svg:g>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { innerRadius: [{
+            type: Input
+        }], outerRadius: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], colors: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }] }); })();
+
+class PieSeriesComponent {
+    constructor() {
+        this.series = [];
+        this.innerRadius = 60;
+        this.outerRadius = 80;
+        this.trimLabels = true;
+        this.maxLabelLength = 10;
+        this.tooltipDisabled = false;
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.dblclick = new EventEmitter();
+        this.placementTypes = PlacementTypes;
+        this.styleTypes = StyleTypes;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        const pieGenerator = pie()
+            .value(d => d.value)
+            .sort(null);
+        const arcData = pieGenerator(this.series);
+        this.max = max(arcData, d => {
+            return d.value;
+        });
+        this.data = this.calculateLabelPositions(arcData);
+        this.tooltipText = this.tooltipText || this.defaultTooltipText;
+    }
+    midAngle(d) {
+        return d.startAngle + (d.endAngle - d.startAngle) / 2;
+    }
+    outerArc() {
+        const factor = 1.5;
+        return arc()
+            .innerRadius(this.outerRadius * factor)
+            .outerRadius(this.outerRadius * factor);
+    }
+    calculateLabelPositions(pieData) {
+        const factor = 1.5;
+        const minDistance = 10;
+        const labelPositions = pieData;
+        labelPositions.forEach(d => {
+            d.pos = this.outerArc().centroid(d);
+            d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);
+        });
+        for (let i = 0; i < labelPositions.length - 1; i++) {
+            const a = labelPositions[i];
+            if (!this.labelVisible(a)) {
+                continue;
+            }
+            for (let j = i + 1; j < labelPositions.length; j++) {
+                const b = labelPositions[j];
+                if (!this.labelVisible(b)) {
+                    continue;
+                }
+                // if they're on the same side
+                if (b.pos[0] * a.pos[0] > 0) {
+                    // if they're overlapping
+                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);
+                    if (o > 0) {
+                        // push the second up or down
+                        b.pos[1] += Math.sign(b.pos[0]) * o;
+                    }
+                }
+            }
+        }
+        return labelPositions;
+    }
+    labelVisible(myArc) {
+        return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;
+    }
+    getTooltipTitle(a) {
+        return this.tooltipTemplate ? undefined : this.tooltipText(a);
+    }
+    labelText(myArc) {
+        if (this.labelFormatting) {
+            return this.labelFormatting(myArc.data.name);
+        }
+        return this.label(myArc);
+    }
+    label(myArc) {
+        return formatLabel(myArc.data.name);
+    }
+    defaultTooltipText(myArc) {
+        const label = this.label(myArc);
+        const val = formatLabel(myArc.data.value);
+        return `
+      <span class="tooltip-label">${escapeLabel(label)}</span>
+      <span class="tooltip-val">${val}</span>
+    `;
+    }
+    color(myArc) {
+        return this.colors.getColor(this.label(myArc));
+    }
+    trackBy(index, item) {
+        return item.data.name;
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    isActive(entry) {
+        if (!this.activeEntries)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.name === d.name && entry.series === d.series;
+        });
+        return item !== undefined;
+    }
+}
+PieSeriesComponent.ɵfac = function PieSeriesComponent_Factory(t) { return new (t || PieSeriesComponent)(); };
+PieSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: PieSeriesComponent, selectors: [["g", "ngx-charts-pie-series", ""]], inputs: { series: "series", innerRadius: "innerRadius", outerRadius: "outerRadius", trimLabels: "trimLabels", maxLabelLength: "maxLabelLength", tooltipDisabled: "tooltipDisabled", animations: "animations", tooltipText: "tooltipText", colors: "colors", dims: "dims", explodeSlices: "explodeSlices", showLabels: "showLabels", gradient: "gradient", activeEntries: "activeEntries", labelFormatting: "labelFormatting", tooltipTemplate: "tooltipTemplate" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate", dblclick: "dblclick" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c44, decls: 1, vars: 2, consts: [[4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-pie-label", "", 3, "data", "radius", "color", "label", "labelTrim", "labelTrimSize", "max", "value", "explodeSlices", "animations", 4, "ngIf"], ["ngx-charts-pie-arc", "", "ngx-tooltip", "", 3, "startAngle", "endAngle", "innerRadius", "outerRadius", "fill", "value", "gradient", "data", "max", "explodeSlices", "isActive", "animate", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate", "dblclick"], ["ngx-charts-pie-label", "", 3, "data", "radius", "color", "label", "labelTrim", "labelTrimSize", "max", "value", "explodeSlices", "animations"]], template: function PieSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, PieSeriesComponent__svg_g_0_Template, 3, 19, "g", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.data)("ngForTrackBy", ctx.trackBy);
+    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf, PieArcComponent, TooltipDirective, PieLabelComponent], encapsulation: 2, changeDetection: 0 });
+PieSeriesComponent.propDecorators = {
+    colors: [{ type: Input }],
+    series: [{ type: Input }],
+    dims: [{ type: Input }],
+    innerRadius: [{ type: Input }],
+    outerRadius: [{ type: Input }],
+    explodeSlices: [{ type: Input }],
+    showLabels: [{ type: Input }],
+    gradient: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    labelFormatting: [{ type: Input }],
+    trimLabels: [{ type: Input }],
+    maxLabelLength: [{ type: Input }],
+    tooltipText: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    dblclick: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PieSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-pie-series]',
+                template: `
+    <svg:g *ngFor="let arc of data; trackBy: trackBy">
+      <svg:g
+        ngx-charts-pie-label
+        *ngIf="labelVisible(arc)"
+        [data]="arc"
+        [radius]="outerRadius"
+        [color]="color(arc)"
+        [label]="labelText(arc)"
+        [labelTrim]="trimLabels"
+        [labelTrimSize]="maxLabelLength"
+        [max]="max"
+        [value]="arc.value"
+        [explodeSlices]="explodeSlices"
+        [animations]="animations"
+      ></svg:g>
+      <svg:g
+        ngx-charts-pie-arc
+        [startAngle]="arc.startAngle"
+        [endAngle]="arc.endAngle"
+        [innerRadius]="innerRadius"
+        [outerRadius]="outerRadius"
+        [fill]="color(arc)"
+        [value]="arc.data.value"
+        [gradient]="gradient"
+        [data]="arc.data"
+        [max]="max"
+        [explodeSlices]="explodeSlices"
+        [isActive]="isActive(arc.data)"
+        [animate]="animations"
+        (select)="onClick($event)"
+        (activate)="activate.emit($event)"
+        (deactivate)="deactivate.emit($event)"
+        (dblclick)="dblclick.emit($event)"
+        ngx-tooltip
+        [tooltipDisabled]="tooltipDisabled"
+        [tooltipPlacement]="placementTypes.Top"
+        [tooltipType]="styleTypes.tooltip"
+        [tooltipTitle]="getTooltipTitle(arc)"
+        [tooltipTemplate]="tooltipTemplate"
+        [tooltipContext]="arc.data"
+      ></svg:g>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { series: [{
+            type: Input
+        }], innerRadius: [{
+            type: Input
+        }], outerRadius: [{
+            type: Input
+        }], trimLabels: [{
+            type: Input
+        }], maxLabelLength: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], dblclick: [{
+            type: Output
+        }], tooltipText: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], dims: [{
+            type: Input
+        }], explodeSlices: [{
+            type: Input
+        }], showLabels: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], labelFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }] }); })();
+
+class PieChartModule {
+}
+PieChartModule.ɵfac = function PieChartModule_Factory(t) { return new (t || PieChartModule)(); };
+PieChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PieChartModule });
+PieChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PieChartModule, { declarations: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent], imports: [ChartCommonModule], exports: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PieChartModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule],
+                declarations: [
+                    AdvancedPieChartComponent,
+                    PieLabelComponent,
+                    PieArcComponent,
+                    PieChartComponent,
+                    PieGridComponent,
+                    PieGridSeriesComponent,
+                    PieSeriesComponent
+                ],
+                exports: [
+                    AdvancedPieChartComponent,
+                    PieLabelComponent,
+                    PieArcComponent,
+                    PieChartComponent,
+                    PieGridComponent,
+                    PieGridSeriesComponent,
+                    PieSeriesComponent
+                ]
+            }]
+    }], null, null); })();
+
+class PolarChartModule {
+}
+PolarChartModule.ɵfac = function PolarChartModule_Factory(t) { return new (t || PolarChartModule)(); };
+PolarChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PolarChartModule });
+PolarChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule, PieChartModule, LineChartModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PolarChartModule, { declarations: [PolarChartComponent, PolarSeriesComponent], imports: [ChartCommonModule, PieChartModule, LineChartModule], exports: [PolarChartComponent, PolarSeriesComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PolarChartModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule, PieChartModule, LineChartModule],
+                declarations: [PolarChartComponent, PolarSeriesComponent],
+                exports: [PolarChartComponent, PolarSeriesComponent]
+            }]
+    }], null, null); })();
+
+function calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {
+    return text.split('').reduce((acc, curr) => {
+        const width = fontFamilyKey[curr] || defaultWidth;
+        return acc + width;
+    }, 0);
+}
+
+const VERDANA_FONT_WIDTHS_16_PX = {
+    '0': 10,
+    '1': 10,
+    '2': 10,
+    '3': 10,
+    '4': 10,
+    '5': 10,
+    '6': 10,
+    '7': 10,
+    '8': 10,
+    '9': 10,
+    A: 11,
+    B: 11,
+    C: 11,
+    D: 12,
+    E: 10,
+    F: 9,
+    G: 12,
+    H: 12,
+    I: 7,
+    J: 7,
+    K: 11,
+    L: 9,
+    M: 13,
+    N: 12,
+    O: 13,
+    P: 10,
+    Q: 13,
+    R: 11,
+    S: 11,
+    T: 10,
+    U: 12,
+    V: 11,
+    W: 16,
+    X: 11,
+    Y: 10,
+    Z: 11,
+    a: 10,
+    b: 10,
+    c: 8,
+    d: 10,
+    e: 10,
+    f: 6,
+    g: 10,
+    h: 10,
+    i: 4,
+    j: 6,
+    k: 9,
+    l: 4,
+    m: 16,
+    n: 10,
+    o: 10,
+    p: 10,
+    q: 10,
+    r: 7,
+    s: 8,
+    t: 6,
+    u: 10,
+    v: 9,
+    w: 13,
+    x: 9,
+    y: 9,
+    z: 8,
+    '!': 6,
+    '@': 16,
+    '#': 13,
+    $: 10,
+    '%': 17,
+    '^': 13,
+    '&': 12,
+    '*': 10,
+    '(': 7,
+    ')': 7,
+    _: 10,
+    '-': 7,
+    '+': 13,
+    '=': 13,
+    ',': 6,
+    '.': 6,
+    '/': 7,
+    "'": 4,
+    ':': 7,
+    '|': 7,
+    '?': 9,
+    ';': 7,
+    '<': 13,
+    '>': 13
+};
+
+class CardComponent {
+    constructor(element, cd, zone, platformId) {
+        this.cd = cd;
+        this.zone = zone;
+        this.platformId = platformId;
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.value = '';
+        this.textFontSize = 12;
+        this.textTransform = '';
+        this.initialized = false;
+        this.bandHeight = 10;
+        this.textPadding = [10, 20, 5, 20];
+        this.labelFontSize = 15;
+        this.element = element.nativeElement;
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    ngOnInit() {
+        if (isPlatformServer(this.platformId)) {
+            this.scaleTextSSR();
+        }
+    }
+    ngOnDestroy() {
+        if (isPlatformBrowser(this.platformId)) {
+            cancelAnimationFrame(this.animationReq);
+        }
+    }
+    update() {
+        this.zone.run(() => {
+            const hasValue = this.data && typeof this.data.value !== 'undefined';
+            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());
+            const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));
+            this.transform = `translate(${this.x} , ${this.y})`;
+            this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];
+            this.cardWidth = Math.max(0, this.width);
+            this.cardHeight = Math.max(0, this.height);
+            this.label = this.label ? this.label : this.data.name;
+            const cardData = {
+                label: this.label,
+                data: this.data,
+                value: this.data.value
+            };
+            this.formattedLabel = labelFormatting(cardData);
+            this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;
+            const value = hasValue ? valueFormatting(cardData) : '';
+            this.value = this.paddedValue(value);
+            this.setPadding();
+            this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);
+            setTimeout(() => {
+                if (isPlatformBrowser(this.platformId)) {
+                    this.scaleText();
+                }
+                this.value = value;
+                if (hasValue && !this.initialized) {
+                    setTimeout(() => this.startCount(), 20);
+                }
+            }, 8);
+        });
+    }
+    paddedValue(value) {
+        if (this.medianSize && this.medianSize > value.length) {
+            value += '\u2007'.repeat(this.medianSize - value.length);
+        }
+        return value;
+    }
+    startCount() {
+        if (!this.initialized && this.animations) {
+            cancelAnimationFrame(this.animationReq);
+            const val = this.data.value;
+            const decs = decimalChecker(val);
+            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());
+            const callback = ({ value, finished }) => {
+                this.zone.run(() => {
+                    value = finished ? val : value;
+                    this.value = valueFormatting({ label: this.label, data: this.data, value });
+                    if (!finished) {
+                        this.value = this.paddedValue(this.value);
+                    }
+                    this.cd.markForCheck();
+                });
+            };
+            this.animationReq = count(0, val, decs, 1, callback);
+            this.initialized = true;
+        }
+    }
+    scaleText() {
+        this.zone.run(() => {
+            const { width, height } = this.textEl.nativeElement.getBoundingClientRect();
+            if (width === 0 || height === 0) {
+                return;
+            }
+            const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);
+            const availableWidth = this.cardWidth - 2 * textPadding;
+            const availableHeight = this.cardHeight / 3;
+            const resizeScale = Math.min(availableWidth / width, availableHeight / height);
+            this.textFontSize = Math.floor(this.textFontSize * resizeScale);
+            this.labelFontSize = Math.min(this.textFontSize, 15);
+            this.setPadding();
+            this.cd.markForCheck();
+        });
+    }
+    scaleTextSSR() {
+        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);
+        const height = 18;
+        const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);
+        const availableWidth = this.cardWidth - 2 * textPadding;
+        const availableHeight = this.cardHeight / 3;
+        const resizeScale = Math.min(availableWidth / width, availableHeight / height);
+        this.textFontSize = Math.floor(this.textFontSize * resizeScale);
+        this.labelFontSize = Math.min(this.textFontSize, 15);
+        this.setPadding();
+    }
+    setPadding() {
+        this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;
+        const padding = this.cardHeight / 2;
+        this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;
+        this.textPadding[2] = padding - this.labelFontSize;
+    }
+    onClick() {
+        this.select.emit(this.data);
+    }
+}
+CardComponent.ɵfac = function CardComponent_Factory(t) { return new (t || CardComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
+CardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CardComponent, selectors: [["g", "ngx-charts-card", ""]], viewQuery: function CardComponent_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵviewQuery(_c45, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textEl = _t.first);
+    } }, inputs: { animations: "animations", label: "label", color: "color", bandColor: "bandColor", textColor: "textColor", x: "x", y: "y", width: "width", height: "height", data: "data", medianSize: "medianSize", valueFormatting: "valueFormatting", labelFormatting: "labelFormatting" }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c46, decls: 10, vars: 25, consts: [[1, "cell", 3, "click"], ["rx", "3", "ry", "3", 1, "card"], ["class", "card-band", "stroke", "none", 4, "ngIf"], ["x", "5", "alignment-baseline", "hanging", 1, "trimmed-label"], [3, "innerHTML"], ["text-anchor", "start", "alignment-baseline", "hanging", 1, "value-text"], ["textEl", ""], ["stroke", "none", 1, "card-band"]], template: function CardComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g", 0);
+        ɵngcc0.ɵɵlistener("click", function CardComponent_Template__svg_g_click_0_listener() { return ctx.onClick(); });
+        ɵngcc0.ɵɵelement(1, "rect", 1);
+        ɵngcc0.ɵɵtemplate(2, CardComponent__svg_path_2_Template, 1, 3, "path", 2);
+        ɵngcc0.ɵɵelementStart(3, "title");
+        ɵngcc0.ɵɵtext(4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(5, "foreignObject", 3);
+        ɵngcc0.ɵɵnamespaceHTML();
+        ɵngcc0.ɵɵelement(6, "p", 4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(7, "text", 5, 6);
+        ɵngcc0.ɵɵtext(9);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("fill", ctx.color);
+        ɵngcc0.ɵɵattribute("width", ctx.cardWidth)("height", ctx.cardHeight);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.bandColor && ctx.bandColor !== ctx.color);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵtextInterpolate(ctx.label);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("x", ctx.textPadding[3])("y", ctx.cardHeight - ctx.textPadding[2])("width", ctx.textWidth)("height", ctx.labelFontSize + ctx.textPadding[2]);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("color", ctx.textColor)("font-size", ctx.labelFontSize, "px")("line-height", ctx.labelFontSize, "px");
+        ɵngcc0.ɵɵproperty("innerHTML", ctx.formattedLabel, ɵngcc0.ɵɵsanitizeHtml);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("fill", ctx.textColor)("font-size", ctx.textFontSize, "pt");
+        ɵngcc0.ɵɵattribute("x", ctx.textPadding[3])("y", ctx.textPadding[0]);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.value, " ");
+    } }, directives: [ɵngcc1.NgIf], encapsulation: 2, changeDetection: 0 });
+CardComponent.ctorParameters = () => [
+    { type: ElementRef },
+    { type: ChangeDetectorRef },
+    { type: NgZone },
+    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
+];
+CardComponent.propDecorators = {
+    color: [{ type: Input }],
+    bandColor: [{ type: Input }],
+    textColor: [{ type: Input }],
+    x: [{ type: Input }],
+    y: [{ type: Input }],
+    width: [{ type: Input }],
+    height: [{ type: Input }],
+    label: [{ type: Input }],
+    data: [{ type: Input }],
+    medianSize: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    labelFormatting: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }],
+    textEl: [{ type: ViewChild, args: ['textEl', { static: false },] }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CardComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-card]',
+                template: `
+    <svg:g [attr.transform]="transform" class="cell" (click)="onClick()">
+      <svg:rect class="card" [style.fill]="color" [attr.width]="cardWidth" [attr.height]="cardHeight" rx="3" ry="3" />
+      <svg:path
+        *ngIf="bandColor && bandColor !== color"
+        class="card-band"
+        [attr.fill]="bandColor"
+        [attr.transform]="transformBand"
+        stroke="none"
+        [attr.d]="bandPath"
+      />
+      <title>{{ label }}</title>
+      <svg:foreignObject
+        class="trimmed-label"
+        x="5"
+        [attr.x]="textPadding[3]"
+        [attr.y]="cardHeight - textPadding[2]"
+        [attr.width]="textWidth"
+        [attr.height]="labelFontSize + textPadding[2]"
+        alignment-baseline="hanging"
+      >
+        <xhtml:p
+          [style.color]="textColor"
+          [style.fontSize.px]="labelFontSize"
+          [style.lineHeight.px]="labelFontSize"
+          [innerHTML]="formattedLabel"
+        >
+        </xhtml:p>
+      </svg:foreignObject>
+      <svg:text
+        #textEl
+        class="value-text"
+        [attr.x]="textPadding[3]"
+        [attr.y]="textPadding[0]"
+        [style.fill]="textColor"
+        text-anchor="start"
+        alignment-baseline="hanging"
+        [style.font-size.pt]="textFontSize"
+      >
+        {{ value }}
+      </svg:text>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{
+                type: Inject,
+                args: [PLATFORM_ID]
+            }] }]; }, { animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], label: [{
+            type: Input
+        }], color: [{
+            type: Input
+        }], bandColor: [{
+            type: Input
+        }], textColor: [{
+            type: Input
+        }], x: [{
+            type: Input
+        }], y: [{
+            type: Input
+        }], width: [{
+            type: Input
+        }], height: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }], medianSize: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }], labelFormatting: [{
+            type: Input
+        }], textEl: [{
+            type: ViewChild,
+            args: ['textEl', { static: false }]
+        }] }); })();
+
+/**
+ * Converts a hex to RGB
+ *
+ * @export
+ */
+function hexToRgb(value) {
+    // deprecated, use d3.color()
+    return d3_color.rgb(value);
+}
+/**
+ * Accepts a color (string) and returns a inverted hex color (string)
+ * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability
+ *
+ * @export
+ */
+function invertColor(value) {
+    const color = d3_color.rgb(value);
+    const { r, g, b, opacity } = color;
+    if (opacity === 0) {
+        return color.toString();
+    }
+    const yiq = (r * 299 + g * 587 + b * 114) / 1000;
+    const depth = yiq >= 128 ? -0.8 : 0.8;
+    return shadeRGBColor(color, depth);
+}
+/**
+ * Given a rgb, it will darken/lighten
+ * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors
+ *
+ * @export
+ * @param \{ r, g, b }
+ */
+function shadeRGBColor({ r, g, b }, percent) {
+    const t = percent < 0 ? 0 : 255;
+    const p = percent < 0 ? percent * -1 : percent;
+    r = Math.round((t - r) * p) + r;
+    g = Math.round((t - g) * p) + g;
+    b = Math.round((t - b) * p) + b;
+    return `rgb(${r}, ${g}, ${b})`;
+}
+
+class CardSeriesComponent {
+    constructor() {
+        this.innerPadding = 15;
+        this.emptyColor = 'rgba(0, 0, 0, 0)';
+        this.animations = true;
+        this.select = new EventEmitter();
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        if (this.data.length > 2) {
+            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());
+            const sortedLengths = this.data
+                .map(d => {
+                const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;
+                return hasValue
+                    ? valueFormatting({
+                        data: d.data,
+                        label: d ? d.data.name : '',
+                        value: d && d.data ? d.data.value : ''
+                    }).length
+                    : 0;
+            })
+                .sort((a, b) => b - a);
+            const idx = Math.ceil(this.data.length / 2);
+            this.medianSize = sortedLengths[idx];
+        }
+        const cards = this.getCards();
+        this.cards = cards.filter(d => d.data.value !== null);
+        this.emptySlots = cards.filter(d => d.data.value === null);
+    }
+    getCards() {
+        const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];
+        const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];
+        return this.data.map((d, index) => {
+            let label = d.data.name;
+            if (label && label.constructor.name === 'Date') {
+                label = label.toLocaleDateString();
+            }
+            else {
+                label = label ? label.toLocaleString() : label;
+            }
+            const value = d.data.value;
+            const valueColor = label ? this.colors.getColor(label) : this.emptyColor;
+            const color = this.cardColor || valueColor || '#000';
+            return {
+                x: d.x,
+                y: d.y,
+                width: d.width - xPadding,
+                height: d.height - yPadding,
+                color,
+                bandColor: this.bandColor || valueColor,
+                textColor: this.textColor || invertColor(color),
+                label,
+                data: d.data,
+                tooltipText: `${label}: ${value}`
+            };
+        });
+    }
+    trackBy(index, card) {
+        return card.label;
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+}
+CardSeriesComponent.ɵfac = function CardSeriesComponent_Factory(t) { return new (t || CardSeriesComponent)(); };
+CardSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CardSeriesComponent, selectors: [["g", "ngx-charts-card-series", ""]], inputs: { innerPadding: "innerPadding", emptyColor: "emptyColor", animations: "animations", data: "data", dims: "dims", colors: "colors", cardColor: "cardColor", bandColor: "bandColor", textColor: "textColor", valueFormatting: "valueFormatting", labelFormatting: "labelFormatting" }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c47, decls: 2, vars: 4, consts: [["class", "card-empty", "rx", "3", "ry", "3", 3, "fill", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-card", "", 3, "x", "y", "width", "height", "color", "bandColor", "textColor", "data", "label", "medianSize", "valueFormatting", "labelFormatting", "animations", "select", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["rx", "3", "ry", "3", 1, "card-empty"], ["ngx-charts-card", "", 3, "x", "y", "width", "height", "color", "bandColor", "textColor", "data", "label", "medianSize", "valueFormatting", "labelFormatting", "animations", "select"]], template: function CardSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, CardSeriesComponent__svg_rect_0_Template, 1, 6, "rect", 0);
+        ɵngcc0.ɵɵtemplate(1, CardSeriesComponent__svg_g_1_Template, 1, 13, "g", 1);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.emptySlots)("ngForTrackBy", ctx.trackBy);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.cards)("ngForTrackBy", ctx.trackBy);
+    } }, directives: [ɵngcc1.NgForOf, CardComponent], encapsulation: 2, changeDetection: 0 });
+CardSeriesComponent.propDecorators = {
+    data: [{ type: Input }],
+    dims: [{ type: Input }],
+    colors: [{ type: Input }],
+    innerPadding: [{ type: Input }],
+    cardColor: [{ type: Input }],
+    bandColor: [{ type: Input }],
+    emptyColor: [{ type: Input }],
+    textColor: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    labelFormatting: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CardSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-card-series]',
+                template: `
+    <svg:rect
+      *ngFor="let c of emptySlots; trackBy: trackBy"
+      class="card-empty"
+      [attr.x]="c.x"
+      [attr.y]="c.y"
+      [style.fill]="emptyColor"
+      [attr.width]="c.width"
+      [attr.height]="c.height"
+      rx="3"
+      ry="3"
+    />
+    <svg:g
+      ngx-charts-card
+      *ngFor="let c of cards; trackBy: trackBy"
+      [x]="c.x"
+      [y]="c.y"
+      [width]="c.width"
+      [height]="c.height"
+      [color]="c.color"
+      [bandColor]="c.bandColor"
+      [textColor]="c.textColor"
+      [data]="c.data"
+      [label]="c.label"
+      [medianSize]="medianSize"
+      [valueFormatting]="valueFormatting"
+      [labelFormatting]="labelFormatting"
+      [animations]="animations"
+      (select)="onClick($event)"
+    />
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { innerPadding: [{
+            type: Input
+        }], emptyColor: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], data: [{
+            type: Input
+        }], dims: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], cardColor: [{
+            type: Input
+        }], bandColor: [{
+            type: Input
+        }], textColor: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }], labelFormatting: [{
+            type: Input
+        }] }); })();
+
+class NumberCardComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.emptyColor = 'rgba(0, 0, 0, 0)';
+        this.innerPadding = 15;
+        this.margin = [10, 10, 10, 10];
+    }
+    get clickable() {
+        return !!this.select.observers.length;
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin
+        });
+        this.formatDates();
+        this.domain = this.getDomain();
+        this.setColors();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+        const size = gridSize(this.dims, this.results.length, 150);
+        const N = size[0] * size[1];
+        const data = this.results.slice();
+        while (data.length < N) {
+            data.push({ value: null });
+        }
+        this.data = gridLayout(this.dims, data, 150, this.designatedTotal);
+    }
+    getDomain() {
+        return this.results.map(d => d.label);
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    setColors() {
+        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);
+    }
+}
+NumberCardComponent.ɵfac = function NumberCardComponent_Factory(t) { return ɵNumberCardComponent_BaseFactory(t || NumberCardComponent); };
+NumberCardComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NumberCardComponent, selectors: [["ngx-charts-number-card"]], inputs: { emptyColor: "emptyColor", innerPadding: "innerPadding", cardColor: "cardColor", bandColor: "bandColor", textColor: "textColor", valueFormatting: "valueFormatting", labelFormatting: "labelFormatting", designatedTotal: "designatedTotal" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 20, consts: [[3, "view", "showLegend", "animations"], [1, "number-card", "chart"], ["ngx-charts-card-series", "", 3, "colors", "cardColor", "bandColor", "textColor", "emptyColor", "data", "dims", "innerPadding", "valueFormatting", "labelFormatting", "animations", "select"]], template: function NumberCardComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵelementStart(2, "g", 2);
+        ɵngcc0.ɵɵlistener("select", function NumberCardComponent_Template__svg_g_select_2_listener($event) { return ctx.onClick($event); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(17, _c23, ctx.width, ctx.height))("showLegend", false)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵclassProp("clickable", ctx.clickable);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("colors", ctx.colors)("cardColor", ctx.cardColor)("bandColor", ctx.bandColor)("textColor", ctx.textColor)("emptyColor", ctx.emptyColor)("data", ctx.data)("dims", ctx.dims)("innerPadding", ctx.innerPadding)("valueFormatting", ctx.valueFormatting)("labelFormatting", ctx.labelFormatting)("animations", ctx.animations);
+    } }, directives: [ChartComponent, CardSeriesComponent], styles: [_c24, "ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\n"], encapsulation: 2, changeDetection: 0 });
+NumberCardComponent.propDecorators = {
+    cardColor: [{ type: Input }],
+    bandColor: [{ type: Input }],
+    emptyColor: [{ type: Input }],
+    innerPadding: [{ type: Input }],
+    textColor: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    labelFormatting: [{ type: Input }],
+    designatedTotal: [{ type: Input }]
+};
+const ɵNumberCardComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(NumberCardComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NumberCardComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-number-card',
+                template: `
+    <ngx-charts-chart [view]="[width, height]" [showLegend]="false" [animations]="animations">
+      <svg:g [attr.transform]="transform" class="number-card chart" [class.clickable]="clickable">
+        <svg:g
+          ngx-charts-card-series
+          [colors]="colors"
+          [cardColor]="cardColor"
+          [bandColor]="bandColor"
+          [textColor]="textColor"
+          [emptyColor]="emptyColor"
+          [data]="data"
+          [dims]="dims"
+          [innerPadding]="innerPadding"
+          [valueFormatting]="valueFormatting"
+          [labelFormatting]="labelFormatting"
+          [animations]="animations"
+          (select)="onClick($event)"
+        />
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n", "ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\n"]
+            }]
+    }], null, { emptyColor: [{
+            type: Input
+        }], innerPadding: [{
+            type: Input
+        }], cardColor: [{
+            type: Input
+        }], bandColor: [{
+            type: Input
+        }], textColor: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }], labelFormatting: [{
+            type: Input
+        }], designatedTotal: [{
+            type: Input
+        }] }); })();
+
+class NumberCardModule {
+}
+NumberCardModule.ɵfac = function NumberCardModule_Factory(t) { return new (t || NumberCardModule)(); };
+NumberCardModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NumberCardModule });
+NumberCardModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NumberCardModule, { declarations: [CardComponent, CardSeriesComponent, NumberCardComponent], imports: [ChartCommonModule], exports: [CardComponent, CardSeriesComponent, NumberCardComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NumberCardModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule],
+                declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],
+                exports: [CardComponent, CardSeriesComponent, NumberCardComponent]
+            }]
+    }], null, null); })();
+
+class TreeMapCellComponent {
+    constructor(element) {
+        this.gradient = false;
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.initialized = false;
+        this.orientation = BarOrientation;
+        this.element = element.nativeElement;
+    }
+    ngOnChanges() {
+        this.update();
+        this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());
+        const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));
+        const cellData = {
+            data: this.data,
+            label: this.label,
+            value: this.value
+        };
+        this.formattedValue = this.valueFormatting(cellData.value);
+        this.formattedLabel = labelFormatting(cellData);
+        this.gradientId = 'grad' + id().toString();
+        this.gradientUrl = `url(#${this.gradientId})`;
+        this.gradientStops = this.getGradientStops();
+    }
+    update() {
+        if (this.initialized) {
+            this.animateToCurrentForm();
+        }
+        else {
+            if (this.animations) {
+                this.loadAnimation();
+            }
+            this.initialized = true;
+        }
+    }
+    loadAnimation() {
+        const node = select(this.element).select('.cell');
+        node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);
+        this.animateToCurrentForm();
+    }
+    getTextColor() {
+        return invertColor(this.fill);
+    }
+    animateToCurrentForm() {
+        const node = select(this.element).select('.cell');
+        if (this.animations) {
+            node
+                .transition()
+                .duration(750)
+                .attr('opacity', 1)
+                .attr('x', this.x)
+                .attr('y', this.y)
+                .attr('width', this.width)
+                .attr('height', this.height);
+        }
+        else {
+            node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);
+        }
+    }
+    onClick() {
+        this.select.emit(this.data);
+    }
+    getGradientStops() {
+        return [
+            {
+                offset: 0,
+                color: this.fill,
+                opacity: 0.3
+            },
+            {
+                offset: 100,
+                color: this.fill,
+                opacity: 1
+            }
+        ];
+    }
+}
+TreeMapCellComponent.ɵfac = function TreeMapCellComponent_Factory(t) { return new (t || TreeMapCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
+TreeMapCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeMapCellComponent, selectors: [["g", "ngx-charts-tree-map-cell", ""]], inputs: { gradient: "gradient", animations: "animations", valueFormatting: "valueFormatting", data: "data", fill: "fill", x: "x", y: "y", width: "width", height: "height", label: "label", value: "value", labelFormatting: "labelFormatting" }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c48, decls: 4, vars: 7, consts: [[4, "ngIf"], [1, "cell", 3, "click"], ["class", "treemap-label", 3, "pointer-events", 4, "ngIf"], ["ngx-charts-svg-linear-gradient", "", 3, "orientation", "name", "stops"], [1, "treemap-label"], [1, "treemap-label", 3, "innerHTML"], ["class", "treemap-val", "ngx-charts-count-up", "", 3, "countTo", "valueFormatting", 4, "ngIf"], ["class", "treemap-val", 4, "ngIf"], ["ngx-charts-count-up", "", 1, "treemap-val", 3, "countTo", "valueFormatting"], [1, "treemap-val"]], template: function TreeMapCellComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g");
+        ɵngcc0.ɵɵtemplate(1, TreeMapCellComponent__svg_defs_1_Template, 2, 3, "defs", 0);
+        ɵngcc0.ɵɵelementStart(2, "rect", 1);
+        ɵngcc0.ɵɵlistener("click", function TreeMapCellComponent_Template__svg_rect_click_2_listener() { return ctx.onClick(); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵtemplate(3, TreeMapCellComponent__svg_foreignObject_3_Template, 6, 15, "foreignObject", 2);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.gradient);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("fill", ctx.gradient ? ctx.gradientUrl : ctx.fill)("width", ctx.width)("height", ctx.height)("x", ctx.x)("y", ctx.y);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.width >= 70 && ctx.height >= 35);
+    } }, directives: [ɵngcc1.NgIf, SvgLinearGradientComponent, CountUpDirective], encapsulation: 2, changeDetection: 0 });
+TreeMapCellComponent.ctorParameters = () => [
+    { type: ElementRef }
+];
+TreeMapCellComponent.propDecorators = {
+    data: [{ type: Input }],
+    fill: [{ type: Input }],
+    x: [{ type: Input }],
+    y: [{ type: Input }],
+    width: [{ type: Input }],
+    height: [{ type: Input }],
+    label: [{ type: Input }],
+    value: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    labelFormatting: [{ type: Input }],
+    gradient: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeMapCellComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-tree-map-cell]',
+                template: `
+    <svg:g>
+      <defs *ngIf="gradient">
+        <svg:g
+          ngx-charts-svg-linear-gradient
+          [orientation]="orientation.Vertical"
+          [name]="gradientId"
+          [stops]="gradientStops"
+        />
+      </defs>
+      <svg:rect
+        [attr.fill]="gradient ? gradientUrl : fill"
+        [attr.width]="width"
+        [attr.height]="height"
+        [attr.x]="x"
+        [attr.y]="y"
+        class="cell"
+        (click)="onClick()"
+      />
+      <svg:foreignObject
+        *ngIf="width >= 70 && height >= 35"
+        [attr.x]="x"
+        [attr.y]="y"
+        [attr.width]="width"
+        [attr.height]="height"
+        class="treemap-label"
+        [style.pointer-events]="'none'"
+      >
+        <xhtml:p [style.color]="getTextColor()" [style.height]="height + 'px'" [style.width]="width + 'px'">
+          <xhtml:span class="treemap-label" [innerHTML]="formattedLabel"> </xhtml:span>
+          <xhtml:br />
+          <xhtml:span
+            *ngIf="animations"
+            class="treemap-val"
+            ngx-charts-count-up
+            [countTo]="value"
+            [valueFormatting]="valueFormatting"
+          >
+          </xhtml:span>
+          <xhtml:span *ngIf="!animations" class="treemap-val">
+            {{ formattedValue }}
+          </xhtml:span>
+        </xhtml:p>
+      </svg:foreignObject>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { gradient: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], valueFormatting: [{
+            type: Input
+        }], data: [{
+            type: Input
+        }], fill: [{
+            type: Input
+        }], x: [{
+            type: Input
+        }], y: [{
+            type: Input
+        }], width: [{
+            type: Input
+        }], height: [{
+            type: Input
+        }], label: [{
+            type: Input
+        }], value: [{
+            type: Input
+        }], labelFormatting: [{
+            type: Input
+        }] }); })();
+
+class TreeMapCellSeriesComponent {
+    constructor() {
+        this.gradient = false;
+        this.tooltipDisabled = false;
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.styleTypes = StyleTypes;
+        this.placementTypes = PlacementTypes;
+    }
+    ngOnChanges(changes) {
+        this.cells = this.getCells();
+    }
+    getCells() {
+        return this.data.children
+            .filter(d => {
+            return d.depth === 1;
+        })
+            .map((d, index) => {
+            const label = d.id;
+            return {
+                data: d.data,
+                x: d.x0,
+                y: d.y0,
+                width: d.x1 - d.x0,
+                height: d.y1 - d.y0,
+                fill: this.colors.getColor(label),
+                label,
+                value: d.value
+            };
+        });
+    }
+    getTooltipText({ label, value }) {
+        return `
+      <span class="tooltip-label">${escapeLabel(label)}</span>
+      <span class="tooltip-val">${value.toLocaleString()}</span>
+    `;
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    trackBy(index, item) {
+        return item.label;
+    }
+}
+TreeMapCellSeriesComponent.ɵfac = function TreeMapCellSeriesComponent_Factory(t) { return new (t || TreeMapCellSeriesComponent)(); };
+TreeMapCellSeriesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeMapCellSeriesComponent, selectors: [["g", "ngx-charts-tree-map-cell-series", ""]], inputs: { gradient: "gradient", tooltipDisabled: "tooltipDisabled", animations: "animations", data: "data", dims: "dims", colors: "colors", valueFormatting: "valueFormatting", labelFormatting: "labelFormatting", tooltipTemplate: "tooltipTemplate" }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c49, decls: 1, vars: 2, consts: [["ngx-charts-tree-map-cell", "", "ngx-tooltip", "", 3, "data", "x", "y", "width", "height", "fill", "label", "value", "valueFormatting", "labelFormatting", "gradient", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-tree-map-cell", "", "ngx-tooltip", "", 3, "data", "x", "y", "width", "height", "fill", "label", "value", "valueFormatting", "labelFormatting", "gradient", "animations", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select"]], template: function TreeMapCellSeriesComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵtemplate(0, TreeMapCellSeriesComponent__svg_g_0_Template, 1, 18, "g", 0);
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.cells)("ngForTrackBy", ctx.trackBy);
+    } }, directives: [ɵngcc1.NgForOf, TreeMapCellComponent, TooltipDirective], encapsulation: 2, changeDetection: 0 });
+TreeMapCellSeriesComponent.propDecorators = {
+    data: [{ type: Input }],
+    dims: [{ type: Input }],
+    colors: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    labelFormatting: [{ type: Input }],
+    gradient: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeMapCellSeriesComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-tree-map-cell-series]',
+                template: `
+    <svg:g
+      ngx-charts-tree-map-cell
+      *ngFor="let c of cells; trackBy: trackBy"
+      [data]="c.data"
+      [x]="c.x"
+      [y]="c.y"
+      [width]="c.width"
+      [height]="c.height"
+      [fill]="c.fill"
+      [label]="c.label"
+      [value]="c.value"
+      [valueFormatting]="valueFormatting"
+      [labelFormatting]="labelFormatting"
+      [gradient]="gradient"
+      [animations]="animations"
+      (select)="onClick($event)"
+      ngx-tooltip
+      [tooltipDisabled]="tooltipDisabled"
+      [tooltipPlacement]="placementTypes.Top"
+      [tooltipType]="styleTypes.tooltip"
+      [tooltipTitle]="tooltipTemplate ? undefined : getTooltipText(c)"
+      [tooltipTemplate]="tooltipTemplate"
+      [tooltipContext]="c.data"
+    ></svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { gradient: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], data: [{
+            type: Input
+        }], dims: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }], labelFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }] }); })();
+
+class TreeMapComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.tooltipDisabled = false;
+        this.gradient = false;
+        this.select = new EventEmitter();
+        this.margin = [10, 10, 10, 10];
+    }
+    update() {
+        super.update();
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin
+        });
+        this.domain = this.getDomain();
+        this.treemap = treemap().size([this.dims.width, this.dims.height]);
+        const rootNode = {
+            name: 'root',
+            value: 0,
+            isRoot: true
+        };
+        const root = stratify()
+            .id(d => {
+            let label = d.name;
+            if (label.constructor.name === 'Date') {
+                label = label.toLocaleDateString();
+            }
+            else {
+                label = label.toLocaleString();
+            }
+            return label;
+        })
+            .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])
+            .sum(d => d.value);
+        this.data = this.treemap(root);
+        this.setColors();
+        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;
+    }
+    getDomain() {
+        return this.results.map(d => d.name);
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    setColors() {
+        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);
+    }
+}
+TreeMapComponent.ɵfac = function TreeMapComponent_Factory(t) { return ɵTreeMapComponent_BaseFactory(t || TreeMapComponent); };
+TreeMapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeMapComponent, selectors: [["ngx-charts-tree-map"]], contentQueries: function TreeMapComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, inputs: { tooltipDisabled: "tooltipDisabled", gradient: "gradient", results: "results", valueFormatting: "valueFormatting", labelFormatting: "labelFormatting" }, outputs: { select: "select" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 16, consts: [[3, "view", "showLegend", "animations"], [1, "tree-map", "chart"], ["ngx-charts-tree-map-cell-series", "", 3, "colors", "data", "dims", "tooltipDisabled", "tooltipTemplate", "valueFormatting", "labelFormatting", "gradient", "animations", "select"]], template: function TreeMapComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵelementStart(2, "g", 2);
+        ɵngcc0.ɵɵlistener("select", function TreeMapComponent_Template__svg_g_select_2_listener($event) { return ctx.onClick($event); });
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(13, _c23, ctx.width, ctx.height))("showLegend", false)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("colors", ctx.colors)("data", ctx.data)("dims", ctx.dims)("tooltipDisabled", ctx.tooltipDisabled)("tooltipTemplate", ctx.tooltipTemplate)("valueFormatting", ctx.valueFormatting)("labelFormatting", ctx.labelFormatting)("gradient", ctx.gradient)("animations", ctx.animations);
+    } }, directives: [ChartComponent, TreeMapCellSeriesComponent], styles: [".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\n"], encapsulation: 2, changeDetection: 0 });
+TreeMapComponent.propDecorators = {
+    results: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    labelFormatting: [{ type: Input }],
+    gradient: [{ type: Input }],
+    select: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }]
+};
+const ɵTreeMapComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(TreeMapComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeMapComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-tree-map',
+                template: `
+    <ngx-charts-chart [view]="[width, height]" [showLegend]="false" [animations]="animations">
+      <svg:g [attr.transform]="transform" class="tree-map chart">
+        <svg:g
+          ngx-charts-tree-map-cell-series
+          [colors]="colors"
+          [data]="data"
+          [dims]="dims"
+          [tooltipDisabled]="tooltipDisabled"
+          [tooltipTemplate]="tooltipTemplate"
+          [valueFormatting]="valueFormatting"
+          [labelFormatting]="labelFormatting"
+          [gradient]="gradient"
+          [animations]="animations"
+          (select)="onClick($event)"
+        />
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\n"]
+            }]
+    }], null, { tooltipDisabled: [{
+            type: Input
+        }], gradient: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], results: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }], labelFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }] }); })();
+
+class TreeMapModule {
+}
+TreeMapModule.ɵfac = function TreeMapModule_Factory(t) { return new (t || TreeMapModule)(); };
+TreeMapModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TreeMapModule });
+TreeMapModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TreeMapModule, { declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent], imports: [ChartCommonModule], exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TreeMapModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule],
+                declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],
+                exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]
+            }]
+    }], null, null); })();
+
+var ElementType;
+(function (ElementType) {
+    ElementType["Value"] = "value";
+    ElementType["Units"] = "units";
+})(ElementType || (ElementType = {}));
+class LinearGaugeComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.min = 0;
+        this.max = 100;
+        this.value = 0;
+        this.margin = [10, 20, 10, 20];
+        this.valueResizeScale = 1;
+        this.unitsResizeScale = 1;
+        this.valueTextTransform = '';
+        this.valueTranslate = '';
+        this.unitsTextTransform = '';
+        this.unitsTranslate = '';
+        this.barOrientation = BarOrientation;
+    }
+    ngAfterViewInit() {
+        super.ngAfterViewInit();
+        setTimeout(() => {
+            this.scaleText(ElementType.Value);
+            this.scaleText(ElementType.Units);
+        });
+    }
+    update() {
+        super.update();
+        this.hasPreviousValue = this.previousValue !== undefined;
+        this.max = Math.max(this.max, this.value);
+        this.min = Math.min(this.min, this.value);
+        if (this.hasPreviousValue) {
+            this.max = Math.max(this.max, this.previousValue);
+            this.min = Math.min(this.min, this.previousValue);
+        }
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin
+        });
+        this.valueDomain = this.getValueDomain();
+        this.valueScale = this.getValueScale();
+        this.displayValue = this.getDisplayValue();
+        this.setColors();
+        const xOffset = this.margin[3] + this.dims.width / 2;
+        const yOffset = this.margin[0] + this.dims.height / 2;
+        this.transform = `translate(${xOffset}, ${yOffset})`;
+        this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;
+        this.valueTranslate = `translate(0, -15)`;
+        this.unitsTranslate = `translate(0, 15)`;
+        if (isPlatformServer(this.platformId)) {
+            this.scaleTextSSR('value');
+            this.scaleTextSSR('units');
+        }
+        else {
+            setTimeout(() => this.scaleText(ElementType.Value), 50);
+            setTimeout(() => this.scaleText(ElementType.Units), 50);
+        }
+    }
+    getValueDomain() {
+        return [this.min, this.max];
+    }
+    getValueScale() {
+        return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);
+    }
+    getDisplayValue() {
+        if (this.valueFormatting) {
+            return this.valueFormatting(this.value);
+        }
+        return this.value.toLocaleString();
+    }
+    scaleText(element, repeat = true) {
+        let el;
+        let resizeScale;
+        if (element === ElementType.Value) {
+            el = this.valueTextEl;
+            resizeScale = this.valueResizeScale;
+        }
+        else {
+            el = this.unitsTextEl;
+            resizeScale = this.unitsResizeScale;
+        }
+        const { width, height } = el.nativeElement.getBoundingClientRect();
+        if (width === 0 || height === 0)
+            return;
+        const oldScale = resizeScale;
+        const availableWidth = this.dims.width;
+        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);
+        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;
+        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;
+        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);
+        if (resizeScale !== oldScale) {
+            if (element === ElementType.Value) {
+                this.valueResizeScale = resizeScale;
+                this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;
+            }
+            else {
+                this.unitsResizeScale = resizeScale;
+                this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;
+            }
+            this.cd.markForCheck();
+            if (repeat && isPlatformBrowser(this.platformId)) {
+                setTimeout(() => {
+                    this.scaleText(element, false);
+                }, 50);
+            }
+        }
+    }
+    scaleTextSSR(element) {
+        let resizeScale = 1;
+        const value = element === 'value' ? this.displayValue : this.units;
+        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);
+        const height = 25;
+        const availableWidth = this.dims.width;
+        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);
+        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;
+        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;
+        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);
+        if (element === 'value') {
+            this.valueResizeScale = resizeScale;
+            this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;
+        }
+        else {
+            this.unitsResizeScale = resizeScale;
+            this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;
+        }
+        this.cd.markForCheck();
+    }
+    onClick() {
+        this.select.emit({
+            name: 'Value',
+            value: this.value
+        });
+    }
+    setColors() {
+        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);
+    }
+}
+LinearGaugeComponent.ɵfac = function LinearGaugeComponent_Factory(t) { return ɵLinearGaugeComponent_BaseFactory(t || LinearGaugeComponent); };
+LinearGaugeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: LinearGaugeComponent, selectors: [["ngx-charts-linear-gauge"]], viewQuery: function LinearGaugeComponent_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵviewQuery(_c50, 1);
+        ɵngcc0.ɵɵviewQuery(_c51, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.valueTextEl = _t.first);
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.unitsTextEl = _t.first);
+    } }, inputs: { min: "min", max: "max", value: "value", units: "units", previousValue: "previousValue", valueFormatting: "valueFormatting" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 15, vars: 38, consts: [[3, "view", "showLegend", "animations", "click"], [1, "linear-gauge", "chart"], ["ngx-charts-bar", "", 1, "background-bar", 3, "width", "height", "x", "y", "data", "orientation", "roundEdges", "animations"], ["ngx-charts-bar", "", 3, "width", "height", "x", "y", "fill", "data", "orientation", "roundEdges", "animations"], ["x1", "0", "y1", "5", "x2", "0", "y2", "15", 4, "ngIf"], ["x1", "0", "y1", "-5", "x2", "0", "y2", "-15", 4, "ngIf"], ["alignment-baseline", "after-edge", 1, "value"], ["valueTextEl", ""], ["alignment-baseline", "before-edge", 1, "units"], ["unitsTextEl", ""], ["x1", "0", "y1", "5", "x2", "0", "y2", "15"], ["x1", "0", "y1", "-5", "x2", "0", "y2", "-15"]], template: function LinearGaugeComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("click", function LinearGaugeComponent_Template_ngx_charts_chart_click_0_listener() { return ctx.onClick(); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵelement(2, "g", 2);
+        ɵngcc0.ɵɵelement(3, "g", 3);
+        ɵngcc0.ɵɵtemplate(4, LinearGaugeComponent__svg_line_4_Template, 1, 2, "line", 4);
+        ɵngcc0.ɵɵtemplate(5, LinearGaugeComponent__svg_line_5_Template, 1, 2, "line", 5);
+        ɵngcc0.ɵɵelementStart(6, "g");
+        ɵngcc0.ɵɵelementStart(7, "g");
+        ɵngcc0.ɵɵelementStart(8, "text", 6, 7);
+        ɵngcc0.ɵɵtext(10);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementStart(11, "g");
+        ɵngcc0.ɵɵelementStart(12, "text", 8, 9);
+        ɵngcc0.ɵɵtext(14);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(33, _c23, ctx.width, ctx.height))("showLegend", false)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵproperty("width", ctx.dims.width)("height", 3)("x", ctx.margin[3])("y", ctx.dims.height / 2 + ctx.margin[0] - 2)("data", ɵngcc0.ɵɵpureFunction0(36, _c52))("orientation", ctx.barOrientation.Horizontal)("roundEdges", true)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("width", ctx.valueScale(ctx.value))("height", 3)("x", ctx.margin[3])("y", ctx.dims.height / 2 + ctx.margin[0] - 2)("fill", ctx.colors.getColor(ctx.units))("data", ɵngcc0.ɵɵpureFunction0(37, _c52))("orientation", ctx.barOrientation.Horizontal)("roundEdges", true)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.hasPreviousValue);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.hasPreviousValue);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.valueTranslate);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("text-anchor", "middle");
+        ɵngcc0.ɵɵattribute("transform", ctx.valueTextTransform);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.displayValue, " ");
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.unitsTranslate);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵstyleProp("text-anchor", "middle");
+        ɵngcc0.ɵɵattribute("transform", ctx.unitsTextTransform);
+        ɵngcc0.ɵɵadvance(2);
+        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.units, " ");
+    } }, directives: [ChartComponent, BarComponent, ɵngcc1.NgIf], styles: [_c24, ".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\n"], encapsulation: 2, changeDetection: 0 });
+LinearGaugeComponent.propDecorators = {
+    min: [{ type: Input }],
+    max: [{ type: Input }],
+    value: [{ type: Input }],
+    units: [{ type: Input }],
+    previousValue: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    valueTextEl: [{ type: ViewChild, args: ['valueTextEl',] }],
+    unitsTextEl: [{ type: ViewChild, args: ['unitsTextEl',] }]
+};
+const ɵLinearGaugeComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(LinearGaugeComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LinearGaugeComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-linear-gauge',
+                template: `
+    <ngx-charts-chart [view]="[width, height]" [showLegend]="false" [animations]="animations" (click)="onClick()">
+      <svg:g class="linear-gauge chart">
+        <svg:g
+          ngx-charts-bar
+          class="background-bar"
+          [width]="dims.width"
+          [height]="3"
+          [x]="margin[3]"
+          [y]="dims.height / 2 + margin[0] - 2"
+          [data]="{}"
+          [orientation]="barOrientation.Horizontal"
+          [roundEdges]="true"
+          [animations]="animations"
+        ></svg:g>
+        <svg:g
+          ngx-charts-bar
+          [width]="valueScale(value)"
+          [height]="3"
+          [x]="margin[3]"
+          [y]="dims.height / 2 + margin[0] - 2"
+          [fill]="colors.getColor(units)"
+          [data]="{}"
+          [orientation]="barOrientation.Horizontal"
+          [roundEdges]="true"
+          [animations]="animations"
+        ></svg:g>
+
+        <svg:line
+          *ngIf="hasPreviousValue"
+          [attr.transform]="transformLine"
+          x1="0"
+          y1="5"
+          x2="0"
+          y2="15"
+          [attr.stroke]="colors.getColor(units)"
+        />
+
+        <svg:line
+          *ngIf="hasPreviousValue"
+          [attr.transform]="transformLine"
+          x1="0"
+          y1="-5"
+          x2="0"
+          y2="-15"
+          [attr.stroke]="colors.getColor(units)"
+        />
+
+        <svg:g [attr.transform]="transform">
+          <svg:g [attr.transform]="valueTranslate">
+            <svg:text
+              #valueTextEl
+              class="value"
+              [style.textAnchor]="'middle'"
+              [attr.transform]="valueTextTransform"
+              alignment-baseline="after-edge"
+            >
+              {{ displayValue }}
+            </svg:text>
+          </svg:g>
+
+          <svg:g [attr.transform]="unitsTranslate">
+            <svg:text
+              #unitsTextEl
+              class="units"
+              [style.textAnchor]="'middle'"
+              [attr.transform]="unitsTextTransform"
+              alignment-baseline="before-edge"
+            >
+              {{ units }}
+            </svg:text>
+          </svg:g>
+        </svg:g>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n", ".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\n"]
+            }]
+    }], null, { min: [{
+            type: Input
+        }], max: [{
+            type: Input
+        }], value: [{
+            type: Input
+        }], units: [{
+            type: Input
+        }], previousValue: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }], valueTextEl: [{
+            type: ViewChild,
+            args: ['valueTextEl']
+        }], unitsTextEl: [{
+            type: ViewChild,
+            args: ['unitsTextEl']
+        }] }); })();
+
+class GaugeComponent extends BaseChartComponent {
+    constructor() {
+        super(...arguments);
+        this.legend = false;
+        this.legendTitle = 'Legend';
+        this.legendPosition = LegendPosition.Right;
+        this.min = 0;
+        this.max = 100;
+        this.bigSegments = 10;
+        this.smallSegments = 5;
+        this.showAxis = true;
+        this.startAngle = -120;
+        this.angleSpan = 240;
+        this.activeEntries = [];
+        this.tooltipDisabled = false;
+        this.showText = true;
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.resizeScale = 1;
+        this.rotation = '';
+        this.textTransform = 'scale(1, 1)';
+        this.cornerRadius = 10;
+    }
+    ngAfterViewInit() {
+        super.ngAfterViewInit();
+        setTimeout(() => this.scaleText());
+    }
+    update() {
+        super.update();
+        if (!this.showAxis) {
+            if (!this.margin) {
+                this.margin = [10, 20, 10, 20];
+            }
+        }
+        else {
+            if (!this.margin) {
+                this.margin = [60, 100, 60, 100];
+            }
+        }
+        // make the starting angle positive
+        if (this.startAngle < 0) {
+            this.startAngle = (this.startAngle % 360) + 360;
+        }
+        this.angleSpan = Math.min(this.angleSpan, 360);
+        this.dims = calculateViewDimensions({
+            width: this.width,
+            height: this.height,
+            margins: this.margin,
+            showLegend: this.legend,
+            legendPosition: this.legendPosition
+        });
+        this.domain = this.getDomain();
+        this.valueDomain = this.getValueDomain();
+        this.valueScale = this.getValueScale();
+        this.displayValue = this.getDisplayValue();
+        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;
+        this.arcs = this.getArcs();
+        this.setColors();
+        this.legendOptions = this.getLegendOptions();
+        const xOffset = this.margin[3] + this.dims.width / 2;
+        const yOffset = this.margin[0] + this.dims.height / 2;
+        this.transform = `translate(${xOffset}, ${yOffset})`;
+        this.rotation = `rotate(${this.startAngle})`;
+        setTimeout(() => this.scaleText(), 50);
+    }
+    getArcs() {
+        const arcs = [];
+        const availableRadius = this.outerRadius * 0.7;
+        const radiusPerArc = Math.min(availableRadius / this.results.length, 10);
+        const arcWidth = radiusPerArc * 0.7;
+        this.textRadius = this.outerRadius - this.results.length * radiusPerArc;
+        this.cornerRadius = Math.floor(arcWidth / 2);
+        let i = 0;
+        for (const d of this.results) {
+            const outerRadius = this.outerRadius - i * radiusPerArc;
+            const innerRadius = outerRadius - arcWidth;
+            const backgroundArc = {
+                endAngle: (this.angleSpan * Math.PI) / 180,
+                innerRadius,
+                outerRadius,
+                data: {
+                    value: this.max,
+                    name: d.name
+                }
+            };
+            const valueArc = {
+                endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,
+                innerRadius,
+                outerRadius,
+                data: {
+                    value: d.value,
+                    name: d.name
+                }
+            };
+            const arc = {
+                backgroundArc,
+                valueArc
+            };
+            arcs.push(arc);
+            i++;
+        }
+        return arcs;
+    }
+    getDomain() {
+        return this.results.map(d => d.name);
+    }
+    getValueDomain() {
+        const values = this.results.map(d => d.value);
+        const dataMin = Math.min(...values);
+        const dataMax = Math.max(...values);
+        if (this.min !== undefined) {
+            this.min = Math.min(this.min, dataMin);
+        }
+        else {
+            this.min = dataMin;
+        }
+        if (this.max !== undefined) {
+            this.max = Math.max(this.max, dataMax);
+        }
+        else {
+            this.max = dataMax;
+        }
+        return [this.min, this.max];
+    }
+    getValueScale() {
+        return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);
+    }
+    getDisplayValue() {
+        const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);
+        if (this.textValue && 0 !== this.textValue.length) {
+            return this.textValue.toLocaleString();
+        }
+        if (this.valueFormatting) {
+            return this.valueFormatting(value);
+        }
+        return value.toLocaleString();
+    }
+    scaleText(repeat = true) {
+        if (!this.showText) {
+            return;
+        }
+        const { width } = this.textEl.nativeElement.getBoundingClientRect();
+        const oldScale = this.resizeScale;
+        if (width === 0) {
+            this.resizeScale = 1;
+        }
+        else {
+            const availableSpace = this.textRadius;
+            this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;
+        }
+        if (this.resizeScale !== oldScale) {
+            this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;
+            this.cd.markForCheck();
+            if (repeat) {
+                setTimeout(() => this.scaleText(false), 50);
+            }
+        }
+    }
+    onClick(data) {
+        this.select.emit(data);
+    }
+    getLegendOptions() {
+        return {
+            scaleType: ScaleType.Ordinal,
+            colors: this.colors,
+            domain: this.domain,
+            title: this.legendTitle,
+            position: this.legendPosition
+        };
+    }
+    setColors() {
+        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);
+    }
+    onActivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        if (idx > -1) {
+            return;
+        }
+        this.activeEntries = [item, ...this.activeEntries];
+        this.activate.emit({ value: item, entries: this.activeEntries });
+    }
+    onDeactivate(item) {
+        const idx = this.activeEntries.findIndex(d => {
+            return d.name === item.name && d.value === item.value;
+        });
+        this.activeEntries.splice(idx, 1);
+        this.activeEntries = [...this.activeEntries];
+        this.deactivate.emit({ value: item, entries: this.activeEntries });
+    }
+    isActive(entry) {
+        if (!this.activeEntries)
+            return false;
+        const item = this.activeEntries.find(d => {
+            return entry.name === d.name && entry.series === d.series;
+        });
+        return item !== undefined;
+    }
+    trackBy(index, item) {
+        return item.valueArc.data.name;
+    }
+}
+GaugeComponent.ɵfac = function GaugeComponent_Factory(t) { return ɵGaugeComponent_BaseFactory(t || GaugeComponent); };
+GaugeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GaugeComponent, selectors: [["ngx-charts-gauge"]], contentQueries: function GaugeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
+        ɵngcc0.ɵɵcontentQuery(dirIndex, _c21, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);
+    } }, viewQuery: function GaugeComponent_Query(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵviewQuery(_c45, 1);
+    } if (rf & 2) {
+        let _t;
+        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textEl = _t.first);
+    } }, inputs: { legend: "legend", legendTitle: "legendTitle", legendPosition: "legendPosition", min: "min", max: "max", bigSegments: "bigSegments", smallSegments: "smallSegments", showAxis: "showAxis", startAngle: "startAngle", angleSpan: "angleSpan", activeEntries: "activeEntries", tooltipDisabled: "tooltipDisabled", showText: "showText", margin: "margin", textValue: "textValue", units: "units", results: "results", axisTickFormatting: "axisTickFormatting", valueFormatting: "valueFormatting" }, outputs: { activate: "activate", deactivate: "deactivate" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 5, vars: 13, consts: [[3, "view", "showLegend", "legendOptions", "activeEntries", "animations", "legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"], [1, "gauge", "chart"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["ngx-charts-gauge-axis", "", 3, "bigSegments", "smallSegments", "min", "max", "radius", "angleSpan", "valueScale", "startAngle", "tickFormatting", 4, "ngIf"], ["alignment-baseline", "central", 3, "textAnchor", 4, "ngIf"], ["ngx-charts-gauge-arc", "", 3, "backgroundArc", "valueArc", "cornerRadius", "colors", "isActive", "tooltipDisabled", "tooltipTemplate", "valueFormatting", "animations", "select", "activate", "deactivate"], ["ngx-charts-gauge-axis", "", 3, "bigSegments", "smallSegments", "min", "max", "radius", "angleSpan", "valueScale", "startAngle", "tickFormatting"], ["alignment-baseline", "central"], ["textEl", ""], ["x", "0", "dy", "0"], ["x", "0", "dy", "1.2em"]], template: function GaugeComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵelementStart(0, "ngx-charts-chart", 0);
+        ɵngcc0.ɵɵlistener("legendLabelClick", function GaugeComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) { return ctx.onClick($event); })("legendLabelActivate", function GaugeComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) { return ctx.onActivate($event); })("legendLabelDeactivate", function GaugeComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) { return ctx.onDeactivate($event); });
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵtemplate(2, GaugeComponent__svg_g_2_Template, 2, 10, "g", 2);
+        ɵngcc0.ɵɵtemplate(3, GaugeComponent__svg_g_3_Template, 1, 9, "g", 3);
+        ɵngcc0.ɵɵtemplate(4, GaugeComponent__svg_text_4_Template, 6, 5, "text", 4);
+        ɵngcc0.ɵɵelementEnd();
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("view", ɵngcc0.ɵɵpureFunction2(10, _c23, ctx.width, ctx.height))("showLegend", ctx.legend)("legendOptions", ctx.legendOptions)("activeEntries", ctx.activeEntries)("animations", ctx.animations);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵattribute("transform", ctx.transform);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.arcs)("ngForTrackBy", ctx.trackBy);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.showAxis);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngIf", ctx.showText);
+    } }, directives: function () { return [ChartComponent, ɵngcc1.NgForOf, ɵngcc1.NgIf, GaugeArcComponent, GaugeAxisComponent]; }, styles: [_c24, ".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:bold}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\n"], encapsulation: 2, changeDetection: 0 });
+GaugeComponent.propDecorators = {
+    legend: [{ type: Input }],
+    legendTitle: [{ type: Input }],
+    legendPosition: [{ type: Input }],
+    min: [{ type: Input }],
+    max: [{ type: Input }],
+    textValue: [{ type: Input }],
+    units: [{ type: Input }],
+    bigSegments: [{ type: Input }],
+    smallSegments: [{ type: Input }],
+    results: [{ type: Input }],
+    showAxis: [{ type: Input }],
+    startAngle: [{ type: Input }],
+    angleSpan: [{ type: Input }],
+    activeEntries: [{ type: Input }],
+    axisTickFormatting: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    showText: [{ type: Input }],
+    margin: [{ type: Input }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }],
+    tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate',] }],
+    textEl: [{ type: ViewChild, args: ['textEl',] }]
+};
+const ɵGaugeComponent_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(GaugeComponent);
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GaugeComponent, [{
+        type: Component,
+        args: [{
+                selector: 'ngx-charts-gauge',
+                template: `
+    <ngx-charts-chart
+      [view]="[width, height]"
+      [showLegend]="legend"
+      [legendOptions]="legendOptions"
+      [activeEntries]="activeEntries"
+      [animations]="animations"
+      (legendLabelClick)="onClick($event)"
+      (legendLabelActivate)="onActivate($event)"
+      (legendLabelDeactivate)="onDeactivate($event)"
+    >
+      <svg:g [attr.transform]="transform" class="gauge chart">
+        <svg:g *ngFor="let arc of arcs; trackBy: trackBy" [attr.transform]="rotation">
+          <svg:g
+            ngx-charts-gauge-arc
+            [backgroundArc]="arc.backgroundArc"
+            [valueArc]="arc.valueArc"
+            [cornerRadius]="cornerRadius"
+            [colors]="colors"
+            [isActive]="isActive(arc.valueArc.data)"
+            [tooltipDisabled]="tooltipDisabled"
+            [tooltipTemplate]="tooltipTemplate"
+            [valueFormatting]="valueFormatting"
+            [animations]="animations"
+            (select)="onClick($event)"
+            (activate)="onActivate($event)"
+            (deactivate)="onDeactivate($event)"
+          ></svg:g>
+        </svg:g>
+
+        <svg:g
+          ngx-charts-gauge-axis
+          *ngIf="showAxis"
+          [bigSegments]="bigSegments"
+          [smallSegments]="smallSegments"
+          [min]="min"
+          [max]="max"
+          [radius]="outerRadius"
+          [angleSpan]="angleSpan"
+          [valueScale]="valueScale"
+          [startAngle]="startAngle"
+          [tickFormatting]="axisTickFormatting"
+        ></svg:g>
+
+        <svg:text
+          #textEl
+          *ngIf="showText"
+          [style.textAnchor]="'middle'"
+          [attr.transform]="textTransform"
+          alignment-baseline="central"
+        >
+          <tspan x="0" dy="0">{{ displayValue }}</tspan>
+          <tspan x="0" dy="1.2em">{{ units }}</tspan>
+        </svg:text>
+      </svg:g>
+    </ngx-charts-chart>
+  `,
+                encapsulation: ViewEncapsulation.None,
+                changeDetection: ChangeDetectionStrategy.OnPush,
+                styles: [".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\n", ".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:bold}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\n"]
+            }]
+    }], null, { legend: [{
+            type: Input
+        }], legendTitle: [{
+            type: Input
+        }], legendPosition: [{
+            type: Input
+        }], min: [{
+            type: Input
+        }], max: [{
+            type: Input
+        }], bigSegments: [{
+            type: Input
+        }], smallSegments: [{
+            type: Input
+        }], showAxis: [{
+            type: Input
+        }], startAngle: [{
+            type: Input
+        }], angleSpan: [{
+            type: Input
+        }], activeEntries: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], showText: [{
+            type: Input
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], margin: [{
+            type: Input
+        }], textValue: [{
+            type: Input
+        }], units: [{
+            type: Input
+        }], results: [{
+            type: Input
+        }], axisTickFormatting: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: ContentChild,
+            args: ['tooltipTemplate']
+        }], textEl: [{
+            type: ViewChild,
+            args: ['textEl']
+        }] }); })();
+
+class GaugeArcComponent {
+    constructor() {
+        this.isActive = false;
+        this.tooltipDisabled = false;
+        this.animations = true;
+        this.select = new EventEmitter();
+        this.activate = new EventEmitter();
+        this.deactivate = new EventEmitter();
+        this.placementTypes = PlacementTypes;
+        this.styleTypes = StyleTypes;
+    }
+    tooltipText(arc) {
+        const label = formatLabel(arc.data.name);
+        let val;
+        if (this.valueFormatting) {
+            val = this.valueFormatting(arc.data.value);
+        }
+        else {
+            val = formatLabel(arc.data.value);
+        }
+        return `
+      <span class="tooltip-label">${escapeLabel(label)}</span>
+      <span class="tooltip-val">${val}</span>
+    `;
+    }
+}
+GaugeArcComponent.ɵfac = function GaugeArcComponent_Factory(t) { return new (t || GaugeArcComponent)(); };
+GaugeArcComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GaugeArcComponent, selectors: [["g", "ngx-charts-gauge-arc", ""]], inputs: { isActive: "isActive", tooltipDisabled: "tooltipDisabled", animations: "animations", backgroundArc: "backgroundArc", valueArc: "valueArc", cornerRadius: "cornerRadius", colors: "colors", valueFormatting: "valueFormatting", tooltipTemplate: "tooltipTemplate" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate" }, attrs: _c53, decls: 2, vars: 23, consts: [["ngx-charts-pie-arc", "", 1, "background-arc", 3, "startAngle", "endAngle", "innerRadius", "outerRadius", "cornerRadius", "data", "animate", "pointerEvents"], ["ngx-charts-pie-arc", "", "ngx-tooltip", "", 3, "startAngle", "endAngle", "innerRadius", "outerRadius", "cornerRadius", "fill", "data", "animate", "isActive", "tooltipDisabled", "tooltipPlacement", "tooltipType", "tooltipTitle", "tooltipTemplate", "tooltipContext", "select", "activate", "deactivate"]], template: function GaugeArcComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelement(0, "g", 0);
+        ɵngcc0.ɵɵelementStart(1, "g", 1);
+        ɵngcc0.ɵɵlistener("select", function GaugeArcComponent_Template__svg_g_select_1_listener($event) { return ctx.select.emit($event); })("activate", function GaugeArcComponent_Template__svg_g_activate_1_listener($event) { return ctx.activate.emit($event); })("deactivate", function GaugeArcComponent_Template__svg_g_deactivate_1_listener($event) { return ctx.deactivate.emit($event); });
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵproperty("startAngle", 0)("endAngle", ctx.backgroundArc.endAngle)("innerRadius", ctx.backgroundArc.innerRadius)("outerRadius", ctx.backgroundArc.outerRadius)("cornerRadius", ctx.cornerRadius)("data", ctx.backgroundArc.data)("animate", false)("pointerEvents", false);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("startAngle", 0)("endAngle", ctx.valueArc.endAngle)("innerRadius", ctx.valueArc.innerRadius)("outerRadius", ctx.valueArc.outerRadius)("cornerRadius", ctx.cornerRadius)("fill", ctx.colors.getColor(ctx.valueArc.data.name))("data", ctx.valueArc.data)("animate", ctx.animations)("isActive", ctx.isActive)("tooltipDisabled", ctx.tooltipDisabled)("tooltipPlacement", ctx.placementTypes.Top)("tooltipType", ctx.styleTypes.tooltip)("tooltipTitle", ctx.tooltipTemplate ? undefined : ctx.tooltipText(ctx.valueArc))("tooltipTemplate", ctx.tooltipTemplate)("tooltipContext", ctx.valueArc.data);
+    } }, directives: [PieArcComponent, TooltipDirective], encapsulation: 2, changeDetection: 0 });
+GaugeArcComponent.propDecorators = {
+    backgroundArc: [{ type: Input }],
+    valueArc: [{ type: Input }],
+    cornerRadius: [{ type: Input }],
+    colors: [{ type: Input }],
+    isActive: [{ type: Input }],
+    tooltipDisabled: [{ type: Input }],
+    valueFormatting: [{ type: Input }],
+    tooltipTemplate: [{ type: Input }],
+    animations: [{ type: Input }],
+    select: [{ type: Output }],
+    activate: [{ type: Output }],
+    deactivate: [{ type: Output }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GaugeArcComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-gauge-arc]',
+                template: `
+    <svg:g
+      ngx-charts-pie-arc
+      class="background-arc"
+      [startAngle]="0"
+      [endAngle]="backgroundArc.endAngle"
+      [innerRadius]="backgroundArc.innerRadius"
+      [outerRadius]="backgroundArc.outerRadius"
+      [cornerRadius]="cornerRadius"
+      [data]="backgroundArc.data"
+      [animate]="false"
+      [pointerEvents]="false"
+    ></svg:g>
+    <svg:g
+      ngx-charts-pie-arc
+      [startAngle]="0"
+      [endAngle]="valueArc.endAngle"
+      [innerRadius]="valueArc.innerRadius"
+      [outerRadius]="valueArc.outerRadius"
+      [cornerRadius]="cornerRadius"
+      [fill]="colors.getColor(valueArc.data.name)"
+      [data]="valueArc.data"
+      [animate]="animations"
+      [isActive]="isActive"
+      (select)="select.emit($event)"
+      (activate)="activate.emit($event)"
+      (deactivate)="deactivate.emit($event)"
+      ngx-tooltip
+      [tooltipDisabled]="tooltipDisabled"
+      [tooltipPlacement]="placementTypes.Top"
+      [tooltipType]="styleTypes.tooltip"
+      [tooltipTitle]="tooltipTemplate ? undefined : tooltipText(valueArc)"
+      [tooltipTemplate]="tooltipTemplate"
+      [tooltipContext]="valueArc.data"
+    ></svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { isActive: [{
+            type: Input
+        }], tooltipDisabled: [{
+            type: Input
+        }], animations: [{
+            type: Input
+        }], select: [{
+            type: Output
+        }], activate: [{
+            type: Output
+        }], deactivate: [{
+            type: Output
+        }], backgroundArc: [{
+            type: Input
+        }], valueArc: [{
+            type: Input
+        }], cornerRadius: [{
+            type: Input
+        }], colors: [{
+            type: Input
+        }], valueFormatting: [{
+            type: Input
+        }], tooltipTemplate: [{
+            type: Input
+        }] }); })();
+
+class GaugeAxisComponent {
+    constructor() {
+        this.rotate = '';
+    }
+    ngOnChanges(changes) {
+        this.update();
+    }
+    update() {
+        this.rotationAngle = -90 + this.startAngle;
+        this.rotate = `rotate(${this.rotationAngle})`;
+        this.ticks = this.getTicks();
+    }
+    getTicks() {
+        const bigTickSegment = this.angleSpan / this.bigSegments;
+        const smallTickSegment = bigTickSegment / this.smallSegments;
+        const tickLength = 20;
+        const ticks = {
+            big: [],
+            small: []
+        };
+        const startDistance = this.radius + 10;
+        const textDist = startDistance + tickLength + 10;
+        for (let i = 0; i <= this.bigSegments; i++) {
+            const angleDeg = i * bigTickSegment;
+            const angle = (angleDeg * Math.PI) / 180;
+            const textAnchor = this.getTextAnchor(angleDeg);
+            let skip = false;
+            if (i === 0 && this.angleSpan === 360) {
+                skip = true;
+            }
+            if (!skip) {
+                let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();
+                if (this.tickFormatting) {
+                    text = this.tickFormatting(text);
+                }
+                ticks.big.push({
+                    line: this.getTickPath(startDistance, tickLength, angle),
+                    textAnchor,
+                    text,
+                    textTransform: `
+            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})
+          `
+                });
+            }
+            if (i === this.bigSegments) {
+                continue;
+            }
+            for (let j = 1; j <= this.smallSegments; j++) {
+                const smallAngleDeg = angleDeg + j * smallTickSegment;
+                const smallAngle = (smallAngleDeg * Math.PI) / 180;
+                ticks.small.push({
+                    line: this.getTickPath(startDistance, tickLength / 2, smallAngle)
+                });
+            }
+        }
+        return ticks;
+    }
+    getTextAnchor(angle) {
+        // [0, 45] = 'middle';
+        // [46, 135] = 'start';
+        // [136, 225] = 'middle';
+        // [226, 315] = 'end';
+        angle = (this.startAngle + angle) % 360;
+        let textAnchor = TextAnchor.Middle;
+        if (angle > 45 && angle <= 135) {
+            textAnchor = TextAnchor.Start;
+        }
+        else if (angle > 225 && angle <= 315) {
+            textAnchor = TextAnchor.End;
+        }
+        return textAnchor;
+    }
+    getTickPath(startDistance, tickLength, angle) {
+        const y1 = startDistance * Math.sin(angle);
+        const y2 = (startDistance + tickLength) * Math.sin(angle);
+        const x1 = startDistance * Math.cos(angle);
+        const x2 = (startDistance + tickLength) * Math.cos(angle);
+        const points = [
+            { x: x1, y: y1 },
+            { x: x2, y: y2 }
+        ];
+        const lineGenerator = line()
+            .x(d => d.x)
+            .y(d => d.y);
+        return lineGenerator(points);
+    }
+}
+GaugeAxisComponent.ɵfac = function GaugeAxisComponent_Factory(t) { return new (t || GaugeAxisComponent)(); };
+GaugeAxisComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GaugeAxisComponent, selectors: [["g", "ngx-charts-gauge-axis", ""]], inputs: { bigSegments: "bigSegments", smallSegments: "smallSegments", min: "min", max: "max", angleSpan: "angleSpan", startAngle: "startAngle", radius: "radius", valueScale: "valueScale", tickFormatting: "tickFormatting" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], attrs: _c54, decls: 4, vars: 4, consts: [["class", "gauge-tick gauge-tick-large", 4, "ngFor", "ngForOf"], ["class", "gauge-tick gauge-tick-small", 4, "ngFor", "ngForOf"], [1, "gauge-tick", "gauge-tick-large"], ["alignment-baseline", "central"], [1, "gauge-tick", "gauge-tick-small"]], template: function GaugeAxisComponent_Template(rf, ctx) { if (rf & 1) {
+        ɵngcc0.ɵɵnamespaceSVG();
+        ɵngcc0.ɵɵelementStart(0, "g");
+        ɵngcc0.ɵɵtemplate(1, GaugeAxisComponent__svg_g_1_Template, 2, 1, "g", 0);
+        ɵngcc0.ɵɵtemplate(2, GaugeAxisComponent__svg_g_2_Template, 3, 4, "g", 0);
+        ɵngcc0.ɵɵtemplate(3, GaugeAxisComponent__svg_g_3_Template, 2, 1, "g", 1);
+        ɵngcc0.ɵɵelementEnd();
+    } if (rf & 2) {
+        ɵngcc0.ɵɵattribute("transform", ctx.rotate);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.ticks.big);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.ticks.big);
+        ɵngcc0.ɵɵadvance(1);
+        ɵngcc0.ɵɵproperty("ngForOf", ctx.ticks.small);
+    } }, directives: [ɵngcc1.NgForOf], encapsulation: 2, changeDetection: 0 });
+GaugeAxisComponent.propDecorators = {
+    bigSegments: [{ type: Input }],
+    smallSegments: [{ type: Input }],
+    min: [{ type: Input }],
+    max: [{ type: Input }],
+    angleSpan: [{ type: Input }],
+    startAngle: [{ type: Input }],
+    radius: [{ type: Input }],
+    valueScale: [{ type: Input }],
+    tickFormatting: [{ type: Input }]
+};
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GaugeAxisComponent, [{
+        type: Component,
+        args: [{
+                selector: 'g[ngx-charts-gauge-axis]',
+                template: `
+    <svg:g [attr.transform]="rotate">
+      <svg:g *ngFor="let tick of ticks.big" class="gauge-tick gauge-tick-large">
+        <svg:path [attr.d]="tick.line" />
+      </svg:g>
+      <svg:g *ngFor="let tick of ticks.big" class="gauge-tick gauge-tick-large">
+        <svg:text
+          [style.textAnchor]="tick.textAnchor"
+          [attr.transform]="tick.textTransform"
+          alignment-baseline="central"
+        >
+          {{ tick.text }}
+        </svg:text>
+      </svg:g>
+      <svg:g *ngFor="let tick of ticks.small" class="gauge-tick gauge-tick-small">
+        <svg:path [attr.d]="tick.line" />
+      </svg:g>
+    </svg:g>
+  `,
+                changeDetection: ChangeDetectionStrategy.OnPush
+            }]
+    }], function () { return []; }, { bigSegments: [{
+            type: Input
+        }], smallSegments: [{
+            type: Input
+        }], min: [{
+            type: Input
+        }], max: [{
+            type: Input
+        }], angleSpan: [{
+            type: Input
+        }], startAngle: [{
+            type: Input
+        }], radius: [{
+            type: Input
+        }], valueScale: [{
+            type: Input
+        }], tickFormatting: [{
+            type: Input
+        }] }); })();
+
+class GaugeModule {
+}
+GaugeModule.ɵfac = function GaugeModule_Factory(t) { return new (t || GaugeModule)(); };
+GaugeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GaugeModule });
+GaugeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[ChartCommonModule, PieChartModule, BarChartModule]] });
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GaugeModule, { declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent], imports: [ChartCommonModule, PieChartModule, BarChartModule], exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GaugeModule, [{
+        type: NgModule,
+        args: [{
+                imports: [ChartCommonModule, PieChartModule, BarChartModule],
+                declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],
+                exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]
+            }]
+    }], null, null); })();
+
+// The export is needed here to generate a valid polyfills.metadata.json file
+function ngxChartsPolyfills() {
+    // IE11 fix
+    // Ref: https://github.com/swimlane/ngx-charts/issues/386
+    if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {
+        SVGElement.prototype.contains = HTMLDivElement.prototype.contains;
+    }
+}
+
+class NgxChartsModule {
+    constructor() {
+        ngxChartsPolyfills();
+    }
+}
+NgxChartsModule.ɵfac = function NgxChartsModule_Factory(t) { return new (t || NgxChartsModule)(); };
+NgxChartsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxChartsModule });
+NgxChartsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule] });
+NgxChartsModule.ctorParameters = () => [];
+(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxChartsModule, { exports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule] }); })();
+(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxChartsModule, [{
+        type: NgModule,
+        args: [{
+                exports: [
+                    ChartCommonModule,
+                    AreaChartModule,
+                    BarChartModule,
+                    BoxChartModule,
+                    BubbleChartModule,
+                    HeatMapModule,
+                    LineChartModule,
+                    PolarChartModule,
+                    NumberCardModule,
+                    PieChartModule,
+                    TreeMapModule,
+                    GaugeModule
+                ]
+            }]
+    }], function () { return []; }, null); })();
+
+function tickFormat(fieldType, groupByType) {
+    return function (label) {
+        if (label === 'No Value' || label === 'Other') {
+            return label;
+        }
+        if (fieldType === 'date' && groupByType === 'groupBy') {
+            const formatter = timeFormat('MM/DD/YYYY');
+            return formatter(label);
+        }
+        return label.toString();
+    };
+}
+
+/*
+ * Public API Surface of ngx-charts
+ */
+
+/**
+ * Generated bundle index. Do not edit.
+ */
+
+export { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel, InjectionRegisteryService as ɵa, InjectionService as ɵb };
+
+//# sourceMappingURL=swimlane-ngx-charts.js.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/__ivy_ngcc__/fesm2015/swimlane-ngx-charts.js.map b/node_modules/@swimlane/ngx-charts/__ivy_ngcc__/fesm2015/swimlane-ngx-charts.js.map
new file mode 100644
index 0000000..b6be042
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/__ivy_ngcc__/fesm2015/swimlane-ngx-charts.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"swimlane-ngx-charts.js","sources":["../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/throttle.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/placement-type.enum.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/position.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection-registery.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/types/legend.model.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/types/scale-type.enum.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/charts/chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/visibility-observer.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/types.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/base-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/types/orientation.enum.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axis-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/trim-label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/ticks.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/types/text-anchor.enum.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/shape.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axes.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/style.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/show.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/id.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/types/bar-orientation.enum.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-linear-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-radial-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/events.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip-area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/timeline/timeline.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend-entry.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/scale-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/advanced-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/chart-common.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/view-dimensions.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-sets.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/color.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/domain.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/sort.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/types/bar-chart-type.enum.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/types/d0-type.enum.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/box-chart/box-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/box-chart/box-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/box-chart/box.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/box-chart/box-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/advanced-pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-layout.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/calculate-width.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/constants/font-widths.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/linear-gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polyfills.ts","../../../../projects/swimlane/ngx-charts/src/lib/ngx-charts.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tick-format.helper.ts","../../../../projects/swimlane/ngx-charts/src/public-api.ts","../../../../projects/swimlane/ngx-charts/src/swimlane-ngx-charts.ts"],"names":["observableFromEvent"],"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P,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,CAAC,EAAE,CAAC;AACN,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,EAAE;AACT,IAAE,GAAG,EAAE,EAAE;AACT,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,GAAG,EAAE,EAAE;AACT,IAAE,GAAG,EAAE,EAAE;AACT,IAAE,GAAG,EAAE,EAAE;AACT,IAAE,GAAG,EAAE,EAAE;AACT,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,CAAC,EAAE,EAAE;AACP,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,EAAE;AACT,IAAE,GAAG,EAAE,EAAE;AACT,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,CAAC;AACR,IAAE,GAAG,EAAE,EAAE;AACT,IAAE,GAAG,EAAE,EAAE;AACT,CAAC;AACD;AAAC,MChBY,aAAa;AAAG,IAsC3B,YACE,OAAmB,EACX,EAAqB,EACrB,IAAY,EACS,UAAe;AAC7C,QAHS,OAAE,GAAF,EAAE,CAAmB;AAAC,QACtB,SAAI,GAAJ,IAAI,CAAQ;AAAC,QACQ,eAAU,GAAV,UAAU,CAAK;AAChD,QA9BW,eAAU,GAAY,IAAI,CAAC;AACtC,QACY,WAAM,GAAG,IAAI,YAAY,EAAE,CAAC;AACxC,QAIE,UAAK,GAAW,EAAE,CAAC;AACrB,QAKE,iBAAY,GAAW,EAAE,CAAC;AAC5B,QAAE,kBAAa,GAAW,EAAE,CAAC;AAC7B,QAAE,gBAAW,GAAY,KAAK,CAAC;AAC/B,QAEE,eAAU,GAAW,EAAE,CAAC;AAC1B,QACE,gBAAW,GAAa,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AAC1C,QAAE,kBAAa,GAAW,EAAE,CAAC;AAC7B,QASI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;AACzC,KAAG;AACH,IACE,WAAW,CAAC,OAAsB;AAAI,QACpC,IAAI,CAAC,MAAM,EAAE,CAAC;AAClB,KAAG;AACH,IACE,QAAQ;AACV,QAAI,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AAC3C,YAAM,IAAI,CAAC,YAAY,EAAE,CAAC;AAC1B,SAAK;AACL,KAAG;AACH,IACE,WAAW;AAAK,QACd,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AAC5C,YAAM,oBAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC9C,SAAK;AACL,KAAG;AACH,IACE,MAAM;AAAK,QACT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AAClB,YAAM,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,WAAW,CAAC;AAC3E,YAAM,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;AAC5F,YAAM,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,KAAK,IAAI,IAAI,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACvG,YACM,IAAI,CAAC,SAAS,GAAG,aAAa,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC;AAC1D,YACM,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAC3F,YAAM,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/C,YAAM,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACjD,YACM,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAI,IAAI,CAAC,IAAI,CAAC,IAAY,CAAC;AACrE,YACM,MAAM,QAAQ,GAAG;AACvB,gBAAQ,KAAK,EAAE,IAAI,CAAC,KAAK;AACzB,gBAAQ,IAAI,EAAE,IAAI,CAAC,IAAI;AACvB,gBAAQ,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;AAC9B,aAAO,CAAC;AACR,YACM,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;AACtD,YAAM,IAAI,CAAC,aAAa,GAAG,iBAAiB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC;AACjF,YACM,MAAM,KAAK,GAAG,QAAQ,GAAG,eAAe,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;AAC9D,YACM,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC3C,YAAM,IAAI,CAAC,UAAU,EAAE,CAAC;AACxB,YACM,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AACxG,YACM,UAAU,CAAC;AACjB,gBAAQ,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AAChD,oBAAU,IAAI,CAAC,SAAS,EAAE,CAAC;AAC3B,iBAAS;AACT,gBAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AAC3B,gBAAQ,IAAI,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;AAC3C,oBAAU,UAAU,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;AAClD,iBAAS;AACT,aAAO,EAAE,CAAC,CAAC,CAAC;AACZ,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,WAAW,CAAC,KAAa;AAAI,QAC3B,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE;AAC3D,YAAM,KAAK,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;AAC/D,SAAK;AACL,QAAI,OAAO,KAAK,CAAC;AACjB,KAAG;AACH,IACE,UAAU;AAAK,QACb,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,EAAE;AAC9C,YAAM,oBAAoB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC9C,YACM,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AAClC,YAAM,MAAM,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;AACvC,YAAM,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;AAC5F,YACM,MAAM,QAAQ,GAAG,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE;AAC3C,gBAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AACtB,oBAAU,KAAK,GAAG,QAAQ,GAAG,GAAG,GAAG,KAAK,CAAC;AACzC,oBAAU,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;AACtF,oBAAU,IAAI,CAAC,QAAQ,EAAE;AACzB,wBAAY,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtD,qBAAW;AACX,oBAAU,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;AACjC,iBAAS,CAAC,CAAC;AACX,aAAO,CAAC;AACR,YACM,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;AAC3D,YAAM,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC9B,SAAK;AACL,KAAG;AACH,IACE,SAAS;AAAK,QACZ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AAClB,YAAM,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;AAClF,YAAM,IAAI,KAAK,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,EAAE;AACvC,gBAAQ,OAAO;AACf,aAAO;AACP,YACM,MAAM,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;AAC3F,YAAM,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,WAAW,CAAC;AAC9D,YAAM,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;AAClD,YACM,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,KAAK,EAAE,eAAe,GAAG,MAAM,CAAC,CAAC;AACrF,YAAM,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,CAAC;AACtE,YAAM,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;AAC3D,YACM,IAAI,CAAC,UAAU,EAAE,CAAC;AACxB,YAAM,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;AAC7B,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,YAAY;AACd,QAAI,MAAM,KAAK,GAAG,kBAAkB,CAAC,yBAAyB,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAChF,QAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,QAAI,MAAM,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;AACzF,QAAI,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,WAAW,CAAC;AAC5D,QAAI,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;AAChD,QACI,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,KAAK,EAAE,eAAe,GAAG,MAAM,CAAC,CAAC;AACnF,QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,CAAC;AACpE,QAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;AACzD,QACI,IAAI,CAAC,UAAU,EAAE,CAAC;AACtB,KAAG;AACH,IACE,UAAU;AACZ,QAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACnE,QAAI,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;AACxC,QAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;AAC/E,QAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC;AACvD,KAAG;AACH,IACE,OAAO;AAAK,QACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,KAAG;AACH;yCApOC,SAAS,SAAC,kBACT,QAAQ,EAAE,oBAAoB,kBAC9B,QAAQ,EAAE;;;;;;;;QA0CT,kBACD,eAAe;CAAE,uBAAuB,CAAC,MAAM,cAChD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4EACI;AAAC;AAAuC,YAnE3C,UAAU;AACV,YAIA,iBAAiB;AACjB,YAAA,MAAM;AACN,4CAsGG,MAAM,SAAC,WAAW;AAAQ;AAAG;AAEtB,oBA3CT,KAAK;AAAK,wBACV,KAAK;AAAK,wBACV,KAAK;AAAK,gBACV,KAAK;AAAK,gBACV,KAAK;AAAK,oBACV,KAAK;AAAK,qBACV,KAAK;AAAK,oBACV,KAAK;AAAK,mBACV,KAAK;AAAK,yBACV,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAK,yBACV,KAAK;AAAK,qBAEV,MAAM;AAAK,qBAEX,SAAS,SAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;AAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;ACvFjD;AACA;AACA;AACA;AACA;AACA,SAAgB,QAAQ,CAAC,KAAa;AAAI;AACb,IAC3B,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAAgB,WAAW,CAAC,KAAa;AAAI,IAC3C,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACpC,IAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;AACrC,IAAE,IAAI,OAAO,KAAK,CAAC,EAAE;AACrB,QAAI,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;AAC5B,KAAG;AACH,IAAE,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC;AACnD,IAAE,MAAM,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;AACxC,IACE,OAAO,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACrC,CAAC;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAgB,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,OAAe;AAAI,IAC5D,MAAM,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;AAClC,IAAE,MAAM,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;AACjD,IACE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AAClC,IAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AAClC,IAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AAClC,IACE,OAAO,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;AACjC;AACA;AAAC,MCUY,mBAAmB;AAAG,IAnCnC;AACG,QAsCQ,iBAAY,GAAW,EAAE,CAAC;AACrC,QAGW,eAAU,GAAG,kBAAkB,CAAC;AAC3C,QAGW,eAAU,GAAY,IAAI,CAAC;AACtC,QACY,WAAM,GAAG,IAAI,YAAY,EAAE,CAAC;AACxC,KAyEC;AACD,IArEE,WAAW,CAAC,OAAsB;AAAI,QACpC,IAAI,CAAC,MAAM,EAAE,CAAC;AAClB,KAAG;AACH,IACE,MAAM;AAAK,QACT,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;AAC9B,YAAM,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;AAC5F,YACM,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI;AACrC,iBAAS,GAAG,CAAC,CAAC;AACd,gBAAU,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC;AACvG,gBAAU,OAAO,QAAQ;AACzB,sBAAc,eAAe,CAAC;AAC9B,wBAAgB,IAAI,EAAE,CAAC,CAAC,IAAI;AAC5B,wBAAgB,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,EAAE;AAC3C,wBAAgB,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE;AACtD,qBAAe,CAAC,CAAC,MAAM;AACvB,sBAAc,CAAC,CAAC;AAChB,aAAS,CAAC;AACV,iBAAS,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/B,YAAM,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAClD,YAAM,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;AAC3C,SAAK;AACL,QACI,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAClC,QAAI,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;AAC1D,QAAI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;AAC/D,KAAG;AACH,IACE,QAAQ;AAAK,QACX,MAAM,QAAQ,GACZ,OAAO,IAAI,CAAC,YAAY,KAAK,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AAC9G,QAAI,MAAM,QAAQ,GACZ,OAAO,IAAI,CAAC,YAAY,KAAK,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AAC9G,QACI,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK;AAClC,YAAM,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,IAAW,CAAC;AACrC,YAAM,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,KAAK,MAAM,EAAE;AACtD,gBAAQ,KAAK,GAAG,KAAK,CAAC,kBAAkB,EAAE,CAAC;AAC3C,aAAO;AAAC,iBAAK;AACb,gBAAQ,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,cAAc,EAAE,GAAG,KAAK,CAAC;AACvD,aAAO;AACP,YACM,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;AACjC,YAAM,MAAM,UAAU,GAAG,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;AAC/E,YAAM,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,IAAI,UAAU,IAAI,MAAM,CAAC;AAC3D,YAAM,OAAO;AACb,gBAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AACd,gBAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AACd,gBAAQ,KAAK,EAAE,CAAC,CAAC,KAAK,GAAG,QAAQ;AACjC,gBAAQ,MAAM,EAAE,CAAC,CAAC,MAAM,GAAG,QAAQ;AACnC,gBAAQ,KAAK;AACb,gBAAQ,SAAS,EAAE,IAAI,CAAC,SAAS,IAAI,UAAU;AAC/C,gBAAQ,SAAS,EAAE,IAAI,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC;AACvD,gBAAQ,KAAK;AACb,gBAAQ,IAAI,EAAE,CAAC,CAAC,IAAI;AACpB,gBAAQ,WAAW,EAAE,GAAG,KAAK,KAAK,KAAK,EAAE;AACzC,aAAO,CAAC;AACR,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,OAAO,CAAC,KAAK,EAAE,IAAI;AAAI,QACrB,OAAO,IAAI,CAAC,KAAK,CAAC;AACtB,KAAG;AACH,IACE,OAAO,CAAC,IAAI;AAAI,QACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3B,KAAG;AACH;+CA3HC,SAAS,SAAC,kBACT,QAAQ,EAAE;OAA2B,kBACrC,QAAQ,EAAE,6uBA8BT,kBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM,cAChD;;;;;;;8FACI;AAAC;AAAuC,mBAC1C,KAAK;AAAK,mBACV,KAAK;AAAK,qBACV,KAAK;AAAK,2BACV,KAAK;AAAK,wBAEV,KAAK;AAAK,wBACV,KAAK;AAAK,yBACV,KAAK;AAAK,wBACV,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAK,yBACV,KAAK;AAAK,qBAEV,MAAM;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MCnCJ,mBAAoB,SAAQ,kBAAkB;AAC3D,IA5BA;AACG;AAA6B,QA6BrB,eAAU,GAAW,kBAAkB,CAAC;AACnD,QAAW,iBAAY,GAAW,EAAE,CAAC;AACrC,QAUE,WAAM,GAAa,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACtC,KA4CC;AACD,IA5CE,IAAI,SAAS;AAAK,QAChB,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;AAC1C,KAAG;AACH,IACE,MAAM;AAAK,QACT,KAAK,CAAC,MAAM,EAAE,CAAC;AACnB,QACI,IAAI,CAAC,IAAI,GAAG,uBAAuB,CAAC;AACxC,YAAM,KAAK,EAAE,IAAI,CAAC,KAAK;AACvB,YAAM,MAAM,EAAE,IAAI,CAAC,MAAM;AACzB,YAAM,OAAO,EAAE,IAAI,CAAC,MAAM;AAC1B,SAAK,CAAC,CAAC;AACP,QACI,IAAI,CAAC,WAAW,EAAE,CAAC;AACvB,QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACnC,QACI,IAAI,CAAC,SAAS,EAAE,CAAC;AACrB,QAAI,IAAI,CAAC,SAAS,GAAG,aAAa,IAAI,CAAC,IAAI,CAAC,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;AAC3E,QACI,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAC/D,QAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAChC,QACI,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;AACtC,QACI,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;AAC5B,YAAM,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AACjC,SAAK;AACL,QACI,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,eAAe,CAAQ,CAAC;AAC9E,KAAG;AACH,IACE,SAAS;AAAK,QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AAC1C,KAAG;AACH,IACE,OAAO,CAAC,IAAI;AAAI,QACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3B,KAAG;AACH,IACE,SAAS;AAAK,QACZ,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AAClG,KAAG;AACH;+CAvFC,SAAS,SAAC,kBACT,QAAQ,EAAE,wBAAwB,kBAClC;IAAQ,EAAE,4sBAoBT,kBAED,aAAa,EAAE,iBAAiB,CAAC,IAAI;aACrC,eAAe,EAAE,uBAAuB,CAAC;GAAM;;;;;;;;;;;;;;okBAE5C;AAAC;AAAuC,wBAC1C,KAAK;AAAK,wBACV,KAAK;AAAK,yBACV,KAAK;AAAK,2BACV,KAAK;AAAK,wBACV,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAI;;;;;;;WATX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASa;AAAC;AAAC,MCjCH,gBAAgB;AAAG;4CAL/B,QAAQ,SAAC,kBACR,OAAO,EAAE,CAAC;EAAiB,CAAC,kBAC5B,YAAY,EAAE,CAAC,aAAa,EAAE,mBAAmB,EAAE;cAAmB,CAAC,kBACvE,OAAO,EAAE,CAAC,aAAa,EAAE,mBAAmB,EAAE;aAAmB,CAAC,cACnE;;;;;;;;0BACI;AAAC;AAAC,MCiDM,oBAAoB;AAAG,IA6BlC,YAAY,OAAmB;AACjC,QAlBW,aAAQ,GAAY,KAAK,CAAC;AACrC,QAAW,eAAU,GAAY,IAAI,CAAC;AACtC,QACY,WAAM,GAAG,IAAI,YAAY,EAAE,CAAC;AACxC,QASE,gBAAW,GAAY,KAAK,CAAC;AAC/B,QACE,gBAAW,GAAG,cAAc,CAAC;AAC/B,QAEI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;AACzC,KAAG;AACH,IACE,WAAW;AAAK,QACd,IAAI,CAAC,MAAM,EAAE,CAAC;AAClB,QACI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,KAAK,KAAK,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;AACrF,QAAI,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,KAAK,IAAI,IAAI,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACrG,QACI,MAAM,QAAQ,GAAG;AACrB,YAAM,IAAI,EAAE,IAAI,CAAC,IAAI;AACrB,YAAM,KAAK,EAAE,IAAI,CAAC,KAAK;AACvB,YAAM,KAAK,EAAE,IAAI,CAAC,KAAK;AACvB,SAAK,CAAC;AACN,QACI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC/D,QAAI,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;AACpD,QACI,IAAI,CAAC,UAAU,GAAG,MAAM,GAAG,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC;AAC/C,QAAI,IAAI,CAAC,WAAW,GAAG,QAAQ,IAAI,CAAC,UAAU,GAAG,CAAC;AAClD,QAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACjD,KAAG;AACH,IACE,MAAM;AAAK,QACT,IAAI,IAAI,CAAC,WAAW,EAAE;AAC1B,YAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;AAClC,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,IAAI,CAAC,UAAU,EAAE;AAC3B,gBAAQ,IAAI,CAAC,aAAa,EAAE,CAAC;AAC7B,aAAO;AACP,YAAM,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC9B,SAAK;AACL,KAAG;AACH,IACE,aAAa;AAAK,QAChB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACtD,QACI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;AAChE,QACI,IAAI,CAAC,oBAAoB,EAAE,CAAC;AAChC,KAAG;AACH,IACE,YAAY;AAAK,QACf,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,KAAG;AACH,IACE,oBAAoB;AAAK,QACvB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACtD,QACI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,YAAM,IAAI;AACV,iBAAS,UAAU,EAAE;AACrB,iBAAS,QAAQ,CAAC,GAAG,CAAC;AACtB,iBAAS,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;AAC3B,iBAAS,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1B,iBAAS,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1B,iBAAS,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC;AAClC,iBAAS,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACrC,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACxH,SAAK;AACL,KAAG;AACH,IACE,OAAO;AAAK,QACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,KAAG;AACH,IACE,gBAAgB;AAAK,QACnB,OAAO;AACX,YAAM;AACN,gBAAQ,MAAM,EAAE,CAAC;AACjB,gBAAQ,KAAK,EAAE,IAAI,CAAC,IAAI;AACxB,gBAAQ,OAAO,EAAE,GAAG;AACpB,aAAO;AACP,YAAM;AACN,gBAAQ,MAAM,EAAE,GAAG;AACnB,gBAAQ,KAAK,EAAE,IAAI,CAAC,IAAI;AACxB,gBAAQ,OAAO,EAAE,CAAC;AAClB,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AACH;gDAjKC,SAAS,SAAC,kBACT,QAAQ,EAAE,6BAA6B,kBACvC,QAAQ,EAAE;;;;;;mGA6CT,kBACD;CAAe,EAAE,uBAAuB,CAAC;EAAM,cAChD;;;;;;;;;0HACI;AAAC;AAA8C,YA5DH,UAAU;AAAG;AAAG;AAAwC,mBA6DtG,KAAK;AAAK,mBACV,KAAK;AAAK,gBACV,KAAK;AAAK,gBACV,KAAK;AAAK,oBACV,KAAK;AAAK,qBACV,KAAK;AAAK,oBACV,KAAK;AAAK,oBACV,KAAK;AAAK,8BAEV,KAAK;AAAK,8BACV,KAAK;AAAK,uBACV,KAAK;AAAK,yBACV,KAAK;AAAK,qBAEV,MAAM;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MCjBJ,0BAA0B;AAAG,IA9B1C;AACG,QAmCQ,aAAQ,GAAY,KAAK,CAAC;AACrC,QAAW,oBAAe,GAAY,KAAK,CAAC;AAC5C,QACW,eAAU,GAAY,IAAI,CAAC;AACtC,QACY,WAAM,GAAG,IAAI,YAAY,EAAE,CAAC;AACxC,QAEE,eAAU,GAAG,UAAU,CAAC;AAC1B,QAAE,mBAAc,GAAG,cAAc,CAAC;AAClC,KAwCC;AACD,IAxCE,WAAW,CAAC,OAAsB;AAAI,QACpC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AACjC,KAAG;AACH,IACE,QAAQ;AAAK,QACX,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ;AAC7B,aAAO,MAAM,CAAC,CAAC;AACf,YAAQ,OAAO,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;AAC7B,SAAO,CAAC;AACR,aAAO,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK;AACpB,YAAQ,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;AAC3B,YACQ,OAAO;AACf,gBAAU,IAAI,EAAE,CAAC,CAAC,IAAI;AACtB,gBAAU,CAAC,EAAE,CAAC,CAAC,EAAE;AACjB,gBAAU,CAAC,EAAE,CAAC,CAAC,EAAE;AACjB,gBAAU,KAAK,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;AAC5B,gBAAU,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;AAC7B,gBAAU,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;AAC3C,gBAAU,KAAK;AACf,gBAAU,KAAK,EAAE,CAAC,CAAC,KAAK;AACxB,aAAS,CAAC;AACV,SAAO,CAAC,CAAC;AACT,KAAG;AACH,IACE,cAAc,CAAC,EAAE,KAAK,EAAE,KAAK,EAA8B;AAAI,QAC7D,OAAO;AACX,oCAAoC,WAAW,CAAC,KAAK,CAAC;AACtD,kCAAkC,KAAK,CAAC,cAAc,EAAE;AACxD,KAAK,CAAC;AACN,KAAG;AACH,IACE,OAAO,CAAC,IAAI;AAAI,QACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3B,KAAG;AACH,IACE,OAAO,CAAC,KAAK,EAAE,IAAI;AAAI,QACrB,OAAO,IAAI,CAAC,KAAK,CAAC;AACtB,KAAG;AACH;sDAtFC,SAAS,SAAC,kBACT,QAAQ,EAAE;EAAoC,kBAC9C,QAAQ,EAAE,gvBAyBT,kBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM,cAChD;;;;uHACI;AAAC;AAA8C,mBACjD,KAAK;AAAK,mBACV,KAAK;AAAK,qBACV,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAK,uBACV,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAK,yBACV,KAAK;AAAK,qBAEV,MAAM;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MCzBJ,gBAAiB,SAAQ,kBAAkB;AACxD,IA1BA;AACG;AAA6B,QA0BrB,oBAAe,GAAY,KAAK,CAAC;AAC5C,QAEW,aAAQ,GAAY,KAAK,CAAC;AACrC,QACY,WAAM,GAAG,IAAI,YAAY,EAAE,CAAC;AACxC,QASE,WAAM,GAAa,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACtC,KAoDC;AACD,IApDE,MAAM;AAAK,QACT,KAAK,CAAC,MAAM,EAAE,CAAC;AACnB,QACI,IAAI,CAAC,IAAI,GAAG,uBAAuB,CAAC;AACxC,YAAM,KAAK,EAAE,IAAI,CAAC,KAAK;AACvB,YAAM,MAAM,EAAE,IAAI,CAAC,MAAM;AACzB,YAAM,OAAO,EAAE,IAAI,CAAC,MAAM;AAC1B,SAAK,CAAC,CAAC;AACP,QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACnC,QACI,IAAI,CAAC,OAAO,GAAG,OAAO,EAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AAC5E,QACI,MAAM,QAAQ,GAAG;AACrB,YAAM,IAAI,EAAE,MAAM;AAClB,YAAM,KAAK,EAAE,CAAC;AACd,YAAM,MAAM,EAAE,IAAI;AAClB,SAAK,CAAC;AACN,QACI,MAAM,IAAI,GAAG,QAAQ,EAAO;AAChC,aAAO,EAAE,CAAC,CAAC;AACX,YAAQ,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;AAC3B,YACQ,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,KAAK,MAAM,EAAE;AAC/C,gBAAU,KAAK,GAAG,KAAK,CAAC,kBAAkB,EAAE,CAAC;AAC7C,aAAS;AAAC,iBAAK;AACf,gBAAU,KAAK,GAAG,KAAK,CAAC,cAAc,EAAE,CAAC;AACzC,aAAS;AACT,YAAQ,OAAO,KAAK,CAAC;AACrB,SAAO,CAAC;AACR,aAAO,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;AAC7E,aAAO,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AACzB,QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACnC,QACI,IAAI,CAAC,SAAS,EAAE,CAAC;AACrB,QACI,IAAI,CAAC,SAAS,GAAG,aAAa,IAAI,CAAC,IAAI,CAAC,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;AAC3E,KAAG;AACH,IACE,SAAS;AAAK,QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;AACzC,KAAG;AACH,IACE,OAAO,CAAC,IAAc;AAAI,QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3B,KAAG;AACH,IACE,SAAS;AAAK,QACZ,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AAClG,KAAG;AACH;4CA/FC,SAAS,SAAC,kBACT,QAAQ,EAAE,qBAAqB;EAC/B,QAAQ,EAAE;;;;;yQAkBT,kBAED,aAAa,EAAE,iBAAiB,CAAC,IAAI,kBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;aAChD;;;;;;;;;;;;;;+SACI;AAAC;AAAoC,sBACvC,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAK,uBACV,KAAK;AAAK,qBAEV,MAAM;AAAK,8BAEX,YAAY,SAAC,iBAAiB;AAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MC1C9B,aAAa;AAAG;yCAL5B,QAAQ,SAAC,kBACR,OAAO,EAAE,CAAC;QAAiB,CAAC,kBAC5B,YAAY,EAAE,CAAC,oBAAoB,EAAE;mBAA0B,EAAE,gBAAgB,CAAC,kBAClF,OAAO,EAAE,CAAC;IAAoB,EAAE,0BAA0B,EAAE,gBAAgB,CAAC,cAC9E;;;;;;;;0BACI;AAAC;ACUN,IAAK,WAGJ;AAHD,WAAK,WAAW;AACf,IAAC,8BAAe,CAAA;AAAC,IAChB,8BAAe,CAAA;AACjB,CAAC,EAHI,WAAW,KAAX,WAAW,QAGf;AACD,MAmFa,oBAAqB,SAAQ,kBAAkB;AAAG,IAlF/D;AACG;AAA6B,QAkFrB,QAAG,GAAW,CAAC,CAAC;AAC3B,QAAW,QAAG,GAAW,GAAG,CAAC;AAC7B,QAAW,UAAK,GAAW,CAAC,CAAC;AAC7B,QAaE,WAAM,GAAa,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACtC,QAEE,qBAAgB,GAAW,CAAC,CAAC;AAC/B,QAAE,qBAAgB,GAAW,CAAC,CAAC;AAC/B,QAAE,uBAAkB,GAAW,EAAE,CAAC;AAClC,QAAE,mBAAc,GAAW,EAAE,CAAC;AAC9B,QAAE,uBAAkB,GAAW,EAAE,CAAC;AAClC,QAAE,mBAAc,GAAW,EAAE,CAAC;AAC9B,QAGE,mBAAc,GAAG,cAAc,CAAC;AAClC,KAuIC;AACD,IAvIE,eAAe;AAAK,QAClB,KAAK,CAAC,eAAe,EAAE,CAAC;AAC5B,QAAI,UAAU,CAAC;AACf,YAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACxC,YAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACxC,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,MAAM;AAAK,QACT,KAAK,CAAC,MAAM,EAAE,CAAC;AACnB,QACI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,aAAa,KAAK,SAAS,CAAC;AAC7D,QAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9C,QAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9C,QAAI,IAAI,IAAI,CAAC,gBAAgB,EAAE;AAC/B,YAAM,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AACxD,YAAM,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AACxD,SAAK;AACL,QACI,IAAI,CAAC,IAAI,GAAG,uBAAuB,CAAC;AACxC,YAAM,KAAK,EAAE,IAAI,CAAC,KAAK;AACvB,YAAM,MAAM,EAAE,IAAI,CAAC,MAAM;AACzB,YAAM,OAAO,EAAE,IAAI,CAAC,MAAM;AAC1B,SAAK,CAAC,CAAC;AACP,QACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC7C,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AAC3C,QAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;AAC/C,QACI,IAAI,CAAC,SAAS,EAAE,CAAC;AACrB,QACI,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACzD,QAAI,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAC1D,QACI,IAAI,CAAC,SAAS,GAAG,aAAa,OAAO,KAAK,OAAO,GAAG,CAAC;AACzD,QAAI,IAAI,CAAC,aAAa,GAAG,aAAa,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,OAAO,GAAG,CAAC;AAC1G,QAAI,IAAI,CAAC,cAAc,GAAG,mBAAmB,CAAC;AAC9C,QAAI,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC;AAC7C,QACI,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AAC3C,YAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AACjC,YAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AACjC,SAAK;AAAC,aAAK;AACX,YAAM,UAAU,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;AAC9D,YAAM,UAAU,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;AAC9D,SAAK;AACL,KAAG;AACH,IACE,cAAc;AAAK,QACjB,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AAChC,KAAG;AACH,IACE,aAAa;AAAK,QAChB,OAAO,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC9E,KAAG;AACH,IACE,eAAe;AAAK,QAClB,IAAI,IAAI,CAAC,eAAe,EAAE;AAC9B,YAAM,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9C,SAAK;AACL,QAAI,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;AACvC,KAAG;AACH,IACE,SAAS,CAAC,OAAoB,EAAE,SAAkB,IAAI;AAAI,QACxD,IAAI,EAAE,CAAC;AACX,QAAI,IAAI,WAAW,CAAC;AACpB,QAAI,IAAI,OAAO,KAAK,WAAW,CAAC,KAAK,EAAE;AACvC,YAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;AAC5B,YAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC;AAC1C,SAAK;AAAC,aAAK;AACX,YAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;AAC5B,YAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC;AAC1C,SAAK;AACL,QACI,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;AACvE,QAAI,IAAI,KAAK,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO;AAC5C,QAAI,MAAM,QAAQ,GAAG,WAAW,CAAC;AACjC,QAAI,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3C,QAAI,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AACnE,QAAI,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,cAAc,IAAI,KAAK,GAAG,WAAW,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;AAC9F,QAAI,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,IAAI,MAAM,GAAG,WAAW,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;AACjG,QAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;AAChE,QACI,IAAI,WAAW,KAAK,QAAQ,EAAE;AAClC,YAAM,IAAI,OAAO,KAAK,WAAW,CAAC,KAAK,EAAE;AACzC,gBAAQ,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC;AAC5C,gBAAQ,IAAI,CAAC,kBAAkB,GAAG,SAAS,WAAW,KAAK,WAAW,GAAG,CAAC;AAC1E,aAAO;AAAC,iBAAK;AACb,gBAAQ,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC;AAC5C,gBAAQ,IAAI,CAAC,kBAAkB,GAAG,SAAS,WAAW,KAAK,WAAW,GAAG,CAAC;AAC1E,aAAO;AACP,YAAM,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;AAC7B,YAAM,IAAI,MAAM,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;AACxD,gBAAQ,UAAU,CAAC;AACnB,oBAAU,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACzC,iBAAS,EAAE,EAAE,CAAC,CAAC;AACf,aAAO;AACP,SAAK;AACL,KAAG;AACH,IACE,YAAY,CAAC,OAAO;AACtB,QAAI,IAAI,WAAW,GAAG,CAAC,CAAC;AACxB,QACI,MAAM,KAAK,GAAG,OAAO,KAAK,OAAO,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;AACvE,QAAI,MAAM,KAAK,GAAG,kBAAkB,CAAC,yBAAyB,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;AAC3E,QAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,QACI,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3C,QAAI,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AACnE,QAAI,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,cAAc,IAAI,KAAK,GAAG,WAAW,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;AAC9F,QAAI,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,IAAI,MAAM,GAAG,WAAW,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;AACjG,QAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;AAChE,QACI,IAAI,OAAO,KAAK,OAAO,EAAE;AAC7B,YAAM,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC;AAC1C,YAAM,IAAI,CAAC,kBAAkB,GAAG,SAAS,WAAW,KAAK,WAAW,GAAG,CAAC;AACxE,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC;AAC1C,YAAM,IAAI,CAAC,kBAAkB,GAAG,SAAS,WAAW,KAAK,WAAW,GAAG,CAAC;AACxE,SAAK;AACL,QACI,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;AAC3B,KAAG;AACH,IACE,OAAO;AAAK,QACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;AACrB,YAAM,IAAI,EAAE,OAAO;AACnB,YAAM,KAAK,EAAE,IAAI,CAAC,KAAK;AACvB,SAAK,CAAC,CAAC;AACP,KAAG;AACH,IACE,SAAS;AAAK,QACZ,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AACnG,KAAG;AACH;gDAvPC,SAAS,SAAC,kBACT,QAAQ,EAAE,yBAAyB,kBACnC;EAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;AA2ET,kBAED;AAAa,EAAE,iBAAiB,CAAC,IAAI;EACrC,eAAe,EAAE,uBAAuB,CAAC;AAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAChD,gMACI;AAAC;AAAwC,kBAC3C,KAAK;AAAK,kBACV,KAAK;AAAK,oBACV,KAAK;AAAK,oBACV,KAAK;AAAK,4BACV,KAAK;AAAK,8BACV,KAAK;AAAK,0BAEV,SAAS,SAAC,aAAa;AAAO,0BAC9B,SAAS,SAAC,aAAa;AAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MC1BvB,cAAe,SAAQ,kBAAkB;AAAG,IA/DzD;AACG;AACH,QA8DW,WAAM,GAAY,KAAK,CAAC;AACnC,QAAW,gBAAW,GAAW,QAAQ,CAAC;AAC1C,QAAW,mBAAc,GAAmB,cAAc,CAAC,KAAK,CAAC;AACjE,QAAW,QAAG,GAAW,CAAC,CAAC;AAC3B,QAAW,QAAG,GAAW,GAAG,CAAC;AAC7B,QAEW,gBAAW,GAAW,EAAE,CAAC;AACpC,QAAW,kBAAa,GAAW,CAAC,CAAC;AACrC,QACW,aAAQ,GAAY,IAAI,CAAC;AACpC,QAAW,eAAU,GAAW,CAAC,GAAG,CAAC;AACrC,QAAW,cAAS,GAAW,GAAG,CAAC;AACnC,QAAW,kBAAa,GAAU,EAAE,CAAC;AACrC,QACW,oBAAe,GAAY,KAAK,CAAC;AAC5C,QACW,aAAQ,GAAY,IAAI,CAAC;AACpC,QAIY,aAAQ,GAAsB,IAAI,YAAY,EAAE,CAAC;AAC7D,QAAY,eAAU,GAAsB,IAAI,YAAY,EAAE,CAAC;AAC/D,QAeE,gBAAW,GAAW,CAAC,CAAC;AAC1B,QAAE,aAAQ,GAAW,EAAE,CAAC;AACxB,QAAE,kBAAa,GAAW,aAAa,CAAC;AACxC,QAAE,iBAAY,GAAW,EAAE,CAAC;AAC5B,KA6NC;AACD,IA1NE,eAAe;AAAK,QAClB,KAAK,CAAC,eAAe,EAAE,CAAC;AAC5B,QAAI,UAAU,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;AACvC,KAAG;AACH,IACE,MAAM;AAAK,QACT,KAAK,CAAC,MAAM,EAAE,CAAC;AACnB,QACI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AACxB,YAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AACxB,gBAAQ,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AACvC,aAAO;AACP,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;AACxB,gBAAQ,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;AACzC,aAAO;AACP,SAAK;AACL;AAEG,QAAC,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE;AAC7B,YAAM,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,GAAG,IAAI,GAAG,CAAC;AACtD,SAAK;AACL,QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AACnD,QACI,IAAI,CAAC,IAAI,GAAG,uBAAuB,CAAC;AACxC,YAAM,KAAK,EAAE,IAAI,CAAC,KAAK;AACvB,YAAM,MAAM,EAAE,IAAI,CAAC,MAAM;AACzB,YAAM,OAAO,EAAE,IAAI,CAAC,MAAM;AAC1B,YAAM,UAAU,EAAE,IAAI,CAAC,MAAM;AAC7B,YAAM,cAAc,EAAE,IAAI,CAAC,cAAc;AACzC,SAAK,CAAC,CAAC;AACP,QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;AACnC,QAAI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC7C,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AAC3C,QAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;AAC/C,QACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACvE,QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAC/B,QACI,IAAI,CAAC,SAAS,EAAE,CAAC;AACrB,QAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AACjD,QACI,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACzD,QAAI,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAC1D,QACI,IAAI,CAAC,SAAS,GAAG,aAAa,OAAO,KAAK,OAAO,GAAG,CAAC;AACzD,QAAI,IAAI,CAAC,QAAQ,GAAG,UAAU,IAAI,CAAC,UAAU,GAAG,CAAC;AACjD,QAAI,UAAU,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;AAC3C,KAAG;AACH,IACE,OAAO;AAAK,QACV,MAAM,IAAI,GAAG,EAAE,CAAC;AACpB,QACI,MAAM,eAAe,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;AACnD,QACI,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAC7E,QAAI,MAAM,QAAQ,GAAG,YAAY,GAAG,GAAG,CAAC;AACxC,QAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC;AAC5E,QAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;AACjD,QACI,IAAI,CAAC,GAAG,CAAC,CAAC;AACd,QAAI,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;AAClC,YAAM,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,YAAY,CAAC;AAC9D,YAAM,MAAM,WAAW,GAAG,WAAW,GAAG,QAAQ,CAAC;AACjD,YACM,MAAM,aAAa,GAAG;AAC5B,gBAAQ,QAAQ,EAAE,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG;AAClD,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AACnB,gBAAQ,IAAI,EAAE;AACd,oBAAU,KAAK,EAAE,IAAI,CAAC,GAAG;AACzB,oBAAU,IAAI,EAAE,CAAC,CAAC,IAAI;AACtB,iBAAS;AACT,aAAO,CAAC;AACR,YACM,MAAM,QAAQ,GAAG;AACvB,gBAAQ,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG;AACtF,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AACnB,gBAAQ,IAAI,EAAE;AACd,oBAAU,KAAK,EAAE,CAAC,CAAC,KAAK;AACxB,oBAAU,IAAI,EAAE,CAAC,CAAC,IAAI;AACtB,iBAAS;AACT,aAAO,CAAC;AACR,YACM,MAAM,GAAG,GAAG;AAClB,gBAAQ,aAAa;AACrB,gBAAQ,QAAQ;AAChB,aAAO,CAAC;AACR,YACM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrB,YAAM,CAAC,EAAE,CAAC;AACV,SAAK;AACL,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACE,SAAS;AAAK,QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;AACzC,KAAG;AACH,IACE,cAAc;AAAK,QACjB,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AAClD,QAAI,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;AACxC,QAAI,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;AACxC,QACI,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS,EAAE;AAChC,YAAM,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC7C,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC;AACzB,SAAK;AACL,QACI,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS,EAAE;AAChC,YAAM,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC7C,SAAK;AAAC,aAAK;AACX,YAAM,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC;AACzB,SAAK;AACL,QACI,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AAChC,KAAG;AACH,IACE,aAAa;AAAK,QAChB,OAAO,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACpF,KAAG;AACH,IACE,eAAe;AAAK,QAClB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5E,QACI,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;AACvD,YAAM,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;AAC7C,SAAK;AACL,QACI,IAAI,IAAI,CAAC,eAAe,EAAE;AAC9B,YAAM,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AACzC,SAAK;AACL,QACI,OAAO,KAAK,CAAC,cAAc,EAAE,CAAC;AAClC,KAAG;AACH,IACE,SAAS,CAAC,SAAkB,IAAI;AAAI,QAClC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AACxB,YAAM,OAAO;AACb,SAAK;AACL,QAAI,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;AACxE,QAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;AACtC,QACI,IAAI,KAAK,KAAK,CAAC,EAAE;AACrB,YAAM,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;AAC3B,SAAK;AAAC,aAAK;AACX,YAAM,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC;AAC7C,YAAM,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,cAAc,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;AAC/F,SAAK;AACL,QACI,IAAI,IAAI,CAAC,WAAW,KAAK,QAAQ,EAAE;AACvC,YAAM,IAAI,CAAC,aAAa,GAAG,SAAS,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,GAAG,CAAC;AAC7E,YAAM,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;AAC7B,YAAM,IAAI,MAAM,EAAE;AAClB,gBAAQ,UAAU,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;AACpD,aAAO;AACP,SAAK;AACL,KAAG;AACH,IACE,OAAO,CAAC,IAAI;AAAI,QACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3B,KAAG;AACH,IACE,gBAAgB;AAAK,QACnB,OAAO;AACX,YAAM,SAAS,EAAE,SAAS,CAAC,OAAO;AAClC,YAAM,MAAM,EAAE,IAAI,CAAC,MAAM;AACzB,YAAM,MAAM,EAAE,IAAI,CAAC,MAAM;AACzB,YAAM,KAAK,EAAE,IAAI,CAAC,WAAW;AAC7B,YAAM,QAAQ,EAAE,IAAI,CAAC,cAAc;AACnC,SAAK,CAAC;AACN,KAAG;AACH,IACE,SAAS;AAAK,QACZ,IAAI,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;AAClG,KAAG;AACH,IACE,UAAU,CAAC,IAAI;AAAI,QACjB,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AAC9C,YAAM,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;AAC5D,SAAK,CAAC,CAAC;AACP,QAAI,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE;AAClB,YAAM,OAAO;AACb,SAAK;AACL,QACI,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;AACvD,QAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;AACrE,KAAG;AACH,IACE,YAAY,CAAC,IAAI;AAAI,QACnB,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AAC9C,YAAM,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;AAC5D,SAAK,CAAC,CAAC;AACP,QACI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AACtC,QAAI,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;AACjD,QACI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;AACvE,KAAG;AACH,IACE,QAAQ,CAAC,KAAK;AAAI,QAChB,IAAI,CAAC,IAAI,CAAC,aAAa;AAAE,YAAA,OAAO,KAAK,CAAC;AAC1C,QAAI,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC1C,YAAM,OAAO,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,CAAC;AAChE,SAAK,CAAC,CAAC;AACP,QAAI,OAAO,IAAI,KAAK,SAAS,CAAC;AAC9B,KAAG;AACH,IACE,OAAO,CAAC,KAAa,EAAE,IAAU;AAAI,QACnC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;AACnC,KAAG;AACH;0CAxUC,SAAS,SAAC,kBACT,QAAQ,EAAE,kBAAkB;KAC5B,QAAQ,EAAE;;;;;;;;;;kwCAwDT,kBAED,aAAa,EAAE,iBAAiB,CAAC,IAAI,kBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;;;;;;;;;;;;;;;;;;;;uYAChD,yCACI;AAAC;AAAkC,qBACrC,KAAK;AAAK,0BACV,KAAK;AAAK,6BACV,KAAK;AAAK,kBACV,KAAK;AAAK,kBACV,KAAK;AAAK,wBACV,KAAK;AAAK,oBACV,KAAK;AAAK,0BACV,KAAK;AAAK,4BACV,KAAK;AAAK,sBACV,KAAK;AAAK,uBACV,KAAK;AAAK,yBACV,KAAK;AAAK,wBACV,KAAK;AAAK,4BACV,KAAK;AAAK,iCACV,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAK,uBACV,KAAK;AAAK,qBAGV,KAAK;AAAK,uBAEV,MAAM;AAAK,yBACX,MAAM;AAAK,8BAEX,YAAY,SAAC,iBAAiB;AAAO,qBAErC,SAAS,SAAC,QAAQ;AAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MCjElB,iBAAiB;AAC9B,IAzCA;AACG,QA4CQ,aAAQ,GAAY,KAAK,CAAC;AACrC,QAAW,oBAAe,GAAY,KAAK,CAAC;AAC5C,QAEW,eAAU,GAAY,IAAI,CAAC;AACtC,QACY,WAAM,GAAG,IAAI,YAAY,EAAE,CAAC;AACxC,QAAY,aAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;AAC1C,QAAY,eAAU,GAAG,IAAI,YAAY,EAAE,CAAC;AAC5C,QACE,mBAAc,GAAG,cAAc,CAAC;AAClC,QAAE,eAAU,GAAG,UAAU,CAAC;AAC1B,KAgBC;AACD,IAhBE,WAAW,CAAC,GAAY;AAAI,QAC1B,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7C,QAAI,IAAI,GAAG,CAAC;AACZ,QACI,IAAI,IAAI,CAAC,eAAe,EAAE;AAC9B,YAAM,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACjD,SAAK;AAAC,aAAK;AACX,YAAM,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACxC,SAAK;AACL,QACI,OAAO;AACX,oCAAoC,WAAW,CAAC,KAAK,CAAC;AACtD,kCAAkC,GAAG;AACrC,KAAK,CAAC;AACN,KAAG;AACH;6CAzEC,SAAS,SAAC,kBACT,QAAQ,EAAE;SAAyB,kBACnC,QAAQ,EAAE;;;;qCAmCT,kBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM,cAChD;;;;;;kGACI;AAAC;AACI,4BAAP,KAAK;AAAK,uBACV,KAAK;AAAK,2BACV,KAAK;AAAK,qBACV,KAAK;AAAK,uBACV,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAK,8BACV,KAAK;AAAK,yBACV,KAAK;AAAK,qBAEV,MAAM;AAAK,uBACX,MAAM;AAAK,yBACX,MAAM;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MC5BJ,kBAAkB;AAAG,IAvBlC;AACG,QAmCD,WAAM,GAAW,EAAE,CAAC;AACtB,KAiGC;AACD,IAjGE,WAAW,CAAC,OAAsB;AACpC,QAAI,IAAI,CAAC,MAAM,EAAE,CAAC;AAClB,KAAG;AACH,IACE,MAAM;AAAK,QACT,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;AAC/C,QAAI,IAAI,CAAC,MAAM,GAAG,UAAU,IAAI,CAAC,aAAa,GAAG,CAAC;AAClD,QAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AACjC,KAAG;AACH,IACE,QAAQ;AAAK,QACX,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;AAC7D,QAAI,MAAM,gBAAgB,GAAG,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC;AACjE,QAAI,MAAM,UAAU,GAAG,EAAE,CAAC;AAC1B,QAAI,MAAM,KAAK,GAAG;AAClB,YAAM,GAAG,EAAE,EAAE;AACb,YAAM,KAAK,EAAE,EAAE;AACf,SAAK,CAAC;AACN,QACI,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AAC3C,QAAI,MAAM,QAAQ,GAAG,aAAa,GAAG,UAAU,GAAG,EAAE,CAAC;AACrD,QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE;AAChD,YAAM,MAAM,QAAQ,GAAG,CAAC,GAAG,cAAc,CAAC;AAC1C,YAAM,MAAM,KAAK,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC;AAC/C,YACM,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AACtD,YACM,IAAI,IAAI,GAAG,KAAK,CAAC;AACvB,YAAM,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,KAAK,GAAG,EAAE;AAC7C,gBAAQ,IAAI,GAAG,IAAI,CAAC;AACpB,aAAO;AACP,YACM,IAAI,CAAC,IAAI,EAAE;AACjB,gBAAQ,IAAI,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,cAAc,EAAE,CAAC;AACnG,gBAAQ,IAAI,IAAI,CAAC,cAAc,EAAE;AACjC,oBAAU,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AAC3C,iBAAS;AACT,gBAAQ,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;AACvB,oBAAU,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,UAAU,EAAE,KAAK,CAAC;AAClE,oBAAU,UAAU;AACpB,oBAAU,IAAI;AACd,oBAAU,aAAa,EAAE;AACzB,wBAAwB,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa;AAChH,WAAW;AACX,iBAAS,CAAC,CAAC;AACX,aAAO;AACP,YACM,IAAI,CAAC,KAAK,IAAI,CAAC,WAAW,EAAE;AAClC,gBAAQ,SAAS;AACjB,aAAO;AACP,YACM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE;AACpD,gBAAQ,MAAM,aAAa,GAAG,QAAQ,GAAG,CAAC,GAAG,gBAAgB,CAAC;AAC9D,gBAAQ,MAAM,UAAU,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC;AAC3D,gBACQ,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;AACzB,oBAAU,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,UAAU,GAAG,CAAC,EAAE,UAAU,CAAC;AAC3E,iBAAS,CAAC,CAAC;AACX,aAAO;AACP,SAAK;AACL,QACI,OAAO,KAAK,CAAC;AACjB,KAAG;AACH,IACE,aAAa,CAAC,KAAa;AAAI;AACd;AACK;AAExB;AAEG,QAAC,KAAK,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,KAAK,IAAI,GAAG,CAAC;AAC5C,QAAI,IAAI,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC;AACvC,QAAI,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,IAAI,GAAG,EAAE;AACpC,YAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC;AACpC,SAAK;AAAC,aAAK,IAAI,KAAK,GAAG,GAAG,IAAI,KAAK,IAAI,GAAG,EAAE;AAC5C,YAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC;AAClC,SAAK;AACL,QAAI,OAAO,UAAU,CAAC;AACtB,KAAG;AACH,IACE,WAAW,CAAC,aAAqB,EAAE,UAAkB,EAAE,KAAa;AAAI,QACtE,MAAM,EAAE,GAAG,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC/C,QAAI,MAAM,EAAE,GAAG,CAAC,aAAa,GAAG,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC9D,QAAI,MAAM,EAAE,GAAG,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC/C,QAAI,MAAM,EAAE,GAAG,CAAC,aAAa,GAAG,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC9D,QACI,MAAM,MAAM,GAAG;AACnB,YAAM,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;AACtB,YAAM,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;AACtB,SAAK,CAAC;AACN,QAAI,MAAM,aAAa,GAAG,IAAI,EAAO;AACrC,aAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,aAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,QAAI,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC;AACjC,KAAG;AACH;8CAtIC,SAAS,SAAC,kBACT,QAAQ,EAAE;QAA0B,kBACpC,QAAQ,EAAE,8nBAkBT,kBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;GAChD;;;;;;;;;;;;;;+EACI;AAAC;AAAsC,0BACzC,KAAK;AAAK,4BACV,KAAK;AAAK,kBACV,KAAK;AAAK,kBACV,KAAK;AAAK,wBACV,KAAK;AAAK,yBACV,KAAK;AAAK,qBACV,KAAK;AAAK,yBACV,KAAK;AAAK,6BACV,KAAK;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAC;AAAC,MClCH,WAAW;AAAG;uCAL1B,QAAQ,SAAC,kBACR,OAAO,EAAE,CAAC;YAAiB,EAAE,cAAc,EAAE,cAAc,CAAC,kBAC5D;QAAY,EAAE,CAAC,oBAAoB,EAAE,cAAc,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,kBAC3F;AAAO,EAAE,CAAC,oBAAoB,EAAE,cAAc,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,cACvF;;;;;;;;0BACI;AAAC;ACdN;AACA,SAAgB,kBAAkB;AAClC;AACE;AACE,IAAF,IAAI,OAAO,UAAU,KAAK,WAAW,IAAI,OAAO,UAAU,CAAC,SAAS,CAAC,QAAQ,KAAK,WAAW,EAAE;AACjG,QAAI,UAAU,CAAC,SAAS,CAAC,QAAQ,GAAG,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC;AACtE,KAAG;AACH;AACA;AAAC,MCuBY,eAAe;AAC5B,IAAE;AACF,QAAI,kBAAkB,EAAE,CAAC;AACzB,KAAG;AACH;2CApBC,QAAQ,SAAC,kBACR,OAAO,EAAE;QACP,iBAAiB,sBACjB,eAAe;SACf,cAAc,sBACd,cAAc,sBACd,iBAAiB,sBACjB,aAAa,sBACb,eAAe,sBACf,gBAAgB,sBAChB,gBAAgB,eAMf;MALD,cAAc,sBACd,1CAIE;YAJW,sBACb,WAAW,kBACZ,cACF;;;;;;;;;;;;;;;;;;;gDAEgB;AACjB;AAAC,SC/Be,UAAU,CAAC,SAAS,EAAE,WAAW;AAAI,IACnD,OAAO,UAAU,KAAa;AAAI,QAChC,IAAI,KAAK,KAAK,UAAU,IAAI,KAAK,KAAK,OAAO,EAAE;AACnD,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK;AACL,QAAI,IAAI,SAAS,KAAK,MAAM,IAAI,WAAW,KAAK,SAAS,EAAE;AAC3D,YAAM,MAAM,SAAS,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC;AACjD,YAAM,OAAO,SAAS,CAAM,KAAK,CAAC,CAAC;AACnC,SAAK;AACL,QACI,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;AAC5B,KAAG,CAAC;AACJ;AACA;ACfA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AAGynE","sourcesContent":["import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  EmbeddedViewRef,\n  Type\n} from '@angular/core';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\n\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\n  return x.element;\n}\n\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n@Injectable()\nexport class InjectionService {\n  static globalRootViewContainer: ViewContainerRef = null;\n\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\n    InjectionService.globalRootViewContainer = container;\n  }\n\n  private _container: ViewContainerRef;\n\n  constructor(\n    private applicationRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {}\n\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n\n    throw new Error(\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\n    );\n  }\n\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n  setRootViewContainer(container: ViewContainerRef): void {\n    this._container = container;\n  }\n\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n\n    // the top most component root node has no `hostView`\n    return component.location.nativeElement;\n  }\n\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    return this.getComponentRootNode(component);\n  }\n\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n\n    const portalHost = new DomPortalOutlet(\n      appendLocation,\n      this.componentFactoryResolver,\n      this.applicationRef,\n      this.injector\n    );\n\n    const portal = new ComponentPortal(componentClass);\n\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n}\n","/**\n * Throttle a function\n *\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","export enum PlacementTypes {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right',\n  Center = 'center'\n}\n","import { PlacementTypes } from './placement-type.enum';\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions: DOMRect, popoverDimensions: DOMRect, alignment: PlacementTypes): number {\n  if (alignment === PlacementTypes.Top) {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Bottom) {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions: DOMRect, popoverDimensions: DOMRect, alignment: PlacementTypes): number {\n  if (alignment === PlacementTypes.Left) {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Right) {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nexport class PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(\n    elDimensions: DOMRect,\n    popoverDimensions: DOMRect,\n    alignment: PlacementTypes\n  ): number {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalCaret(\n    elDimensions: DOMRect,\n    popoverDimensions: DOMRect,\n    caretDimensions: DOMRect,\n    alignment: PlacementTypes\n  ): number {\n    let result;\n\n    if (alignment === PlacementTypes.Top) {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Bottom) {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalAlignment(\n    elDimensions: DOMRect,\n    popoverDimensions: DOMRect,\n    alignment: PlacementTypes\n  ): number {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalCaret(\n    elDimensions: DOMRect,\n    popoverDimensions: DOMRect,\n    caretDimensions: DOMRect,\n    alignment: PlacementTypes\n  ): number {\n    let result;\n\n    if (alignment === PlacementTypes.Left) {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Right) {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n  static shouldFlip(\n    elDimensions: DOMRect,\n    popoverDimensions: DOMRect,\n    placement: PlacementTypes,\n    spacing: number\n  ): boolean {\n    let flip = false;\n\n    if (placement === PlacementTypes.Right) {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Left) {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Top) {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Bottom) {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment: PlacementTypes): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n  static determinePlacement(placement: PlacementTypes, elmDim: DOMRect, hostDim: DOMRect, spacing: number): any {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.Right) {\n        return PlacementTypes.Left;\n      } else if (placement === PlacementTypes.Left) {\n        return PlacementTypes.Right;\n      } else if (placement === PlacementTypes.Top) {\n        return PlacementTypes.Bottom;\n      } else if (placement === PlacementTypes.Bottom) {\n        return PlacementTypes.Top;\n      }\n    }\n\n    return placement;\n  }\n}\n","import {\n  Input,\n  Component,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  HostBinding,\n  Renderer2,\n  PLATFORM_ID,\n  Inject,\n  TemplateRef\n} from '@angular/core';\n\nimport { throttleable } from '../../utils/throttle';\nimport { PositionHelper, PlacementTypes } from './position';\n\nimport { StyleTypes } from './style.type';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'ngx-tooltip-content',\n  template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./tooltip.component.scss']\n})\nexport class TooltipContentComponent implements AfterViewInit {\n  @Input() host: ElementRef;\n  @Input() showCaret: boolean;\n  @Input() type: StyleTypes;\n  @Input() placement: PlacementTypes;\n  @Input() alignment: PlacementTypes;\n  @Input() spacing: number;\n  @Input() cssClass: string;\n  @Input() title: string;\n  @Input() template: TemplateRef<any>;\n  @Input() context: any;\n\n  @ViewChild('caretElm') caretElm: ElementRef;\n\n  @HostBinding('class')\n  get cssClasses(): string {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  constructor(public element: ElementRef, private renderer: Renderer2, @Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(this.position.bind(this));\n  }\n\n  position(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\n\n    // if no dims were found, never show\n    if (!hostDim.height && !hostDim.width) return;\n\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    }\n\n    // animate its entry\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm: HTMLElement, hostDim: DOMRect, elmDim: DOMRect): void {\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim: DOMRect, elmDim: DOMRect): void {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const { top, left } = PositionHelper.positionCaret(\n      this.placement,\n      elmDim,\n      hostDim,\n      caretDimensions,\n      this.alignment\n    );\n\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim: DOMRect, elmDim: DOMRect): void {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  @HostListener('window:resize')\n  @throttleable(100)\n  onWindowResize(): void {\n    this.position();\n  }\n}\n","import { ComponentRef, Type } from '@angular/core';\nimport { InjectionService } from './injection.service';\n\nexport interface PartialBindings {\n  inputs?: object;\n  outputs?: object;\n}\n\nexport abstract class InjectionRegisteryService<T = any> {\n  protected abstract type: Type<T>;\n\n  protected defaults: PartialBindings = {};\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\n\n  constructor(public injectionService: InjectionService) {}\n\n  getByType(type: Type<T> = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings: object): ComponentRef<T> {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    bindings = this.assignDefaults(bindings);\n\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n\n    return component;\n  }\n\n  destroy(instance: ComponentRef<T>): void {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll(): void {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type: Type<T>): void {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\n    const inputs = { ...this.defaults.inputs };\n    const outputs = { ...this.defaults.outputs };\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = { inputs: bindings };\n    }\n\n    if (inputs) {\n      bindings.inputs = { ...inputs, ...bindings.inputs };\n    }\n\n    if (outputs) {\n      bindings.outputs = { ...outputs, ...bindings.outputs };\n    }\n\n    return bindings;\n  }\n\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { InjectionService } from './injection.service';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { InjectionRegisteryService } from './injection-registery.service';\n@Injectable()\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\n  type: any = TooltipContentComponent;\n\n  constructor(injectionService: InjectionService) {\n    super(injectionService);\n  }\n}\n","import { ScaleType } from './scale-type.enum';\n\nexport interface LegendOptions {\n  colors: any;\n  domain: any[];\n  position: LegendPosition;\n  title: string;\n  scaleType: ScaleType;\n}\n\nexport enum LegendPosition {\n  Right = 'right',\n  Below = 'below'\n}\n\nexport enum LegendType {\n  ScaleLegend = 'scaleLegend',\n  Legend = 'legend'\n}\n","export enum ScaleType {\n  Time = 'time',\n  Linear = 'linear',\n  Ordinal = 'ordinal',\n  Quantile = 'quantile'\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { TooltipService } from '../tooltip/tooltip.service';\nimport { LegendOptions, LegendType, LegendPosition } from '../types/legend.model';\nimport { ScaleType } from '../types/scale-type.enum';\n\n@Component({\n  providers: [TooltipService],\n  selector: 'ngx-charts-chart',\n  template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartComponent implements OnChanges {\n  @Input() view: [number, number];\n  @Input() showLegend: boolean = false;\n  @Input() legendOptions: LegendOptions;\n  @Input() legendType: LegendType;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() legendLabelClick = new EventEmitter<string>();\n  @Output() legendLabelActivate = new EventEmitter<{ name: string }>();\n  @Output() legendLabelDeactivate = new EventEmitter<{ name: string }>();\n\n  chartWidth: number;\n  title: string;\n  legendWidth: number;\n\n  readonly LegendPosition = LegendPosition;\n  readonly LegendType = LegendType;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let legendColumns = 0;\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n        if (this.legendType === LegendType.ScaleLegend) {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n    this.legendWidth =\n      !this.legendOptions || this.legendOptions.position === LegendPosition.Right\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\n        : this.chartWidth;\n  }\n\n  getLegendType(): LegendType {\n    return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n  }\n}\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\n\n/**\n * Visibility Observer\n */\n@Directive({\n  selector: 'visibility-observer'\n})\nexport class VisibilityObserver {\n  @Output() visible: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n  isVisible: boolean = false;\n\n  constructor(private element: ElementRef, private zone: NgZone) {\n    this.runCheck();\n  }\n\n  destroy(): void {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange(): void {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck(): void {\n    const check = () => {\n      if (!this.element) {\n        return;\n      }\n\n      // https://davidwalsh.name/offsetheight-visibility\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n}\n","export function isDate(value): boolean {\n  return toString.call(value) === '[object Date]';\n}\n\nexport function isNumber(value): boolean {\n  return typeof value === 'number';\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  ElementRef,\n  NgZone,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\n\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { VisibilityObserver } from '../utils/visibility-observer';\nimport { isDate } from '../utils/types';\nimport { Color } from '../utils/color-sets';\nimport { ScaleType } from './types/scale-type.enum';\nimport { ViewDimensions } from './types/view-dimension.interface';\n\n@Component({\n  selector: 'base-chart',\n  template: ` <div></div> `\n})\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\n  @Input() results: any;\n  @Input() view: [number, number];\n  @Input() scheme: string | Color = 'cool';\n  @Input() schemeType: ScaleType = ScaleType.Ordinal;\n  @Input() customColors: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  width: number;\n  height: number;\n  resizeSubscription: any;\n  visibilityObserver: VisibilityObserver;\n\n  constructor(\n    protected chartElement: ElementRef,\n    protected zone: NgZone,\n    protected cd: ChangeDetectorRef,\n    @Inject(PLATFORM_ID) public platformId: any\n  ) {}\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.animations = false;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.bindWindowResizeEvent();\n\n    // listen for visibility of the element for hidden by default scenario\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.unbindEvents();\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    }\n\n    // default values if width or height are 0 or undefined\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims(): ViewDimensions {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return { width, height };\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n  formatDates(): void {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n      if (isDate(g.label)) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n          if (isDate(d.label)) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  protected unbindEvents(): void {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  private bindWindowResizeEvent(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const source = observableFromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n  private cloneData(data): any {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n}\n","export enum Orientation {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right'\n}\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { Orientation } from '../types/orientation.enum';\n\n@Component({\n  selector: 'g[ngx-charts-axis-label]',\n  template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AxisLabelComponent implements OnChanges {\n  @Input() orient: Orientation;\n  @Input() label: string;\n  @Input() offset: number;\n  @Input() width: number;\n  @Input() height: number;\n\n  x: number;\n  y: number;\n  transform: string;\n  strokeWidth: string;\n  textAnchor: string;\n  element: ElementRef;\n  textHeight = 25;\n  margin = 5;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case Orientation.Bottom:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case Orientation.Left:\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      case Orientation.Right:\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      default:\n    }\n  }\n}\n","export function trimLabel(s: any, max: number = 16): string {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n","export function reduceTicks(ticks: any[], maxTicks: number): any[] {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n","export enum TextAnchor {\n  Start = 'start',\n  Middle = 'middle',\n  End = 'end'\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  SimpleChanges,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nimport { Orientation } from '../types/orientation.enum';\nimport { TextAnchor } from '../types/text-anchor.enum';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient: Orientation;\n  @Input() tickArguments: number[] = [5];\n  @Input() tickValues: string[] | number[];\n  @Input() tickStroke: string = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineHeight: number;\n  @Input() width: number;\n  @Input() rotateTicks: boolean = true;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  verticalSpacing: number = 20;\n  rotateLabels: boolean = false;\n  innerTickSize: number = 6;\n  outerTickSize: number = 6;\n  tickPadding: number = 3;\n  textAnchor: TextAnchor = TextAnchor.Middle;\n  maxTicksLength: number = 0;\n  maxAllowedLength: number = 16;\n  adjustedScale: any;\n  textTransform: string;\n  ticks: any[];\n  tickFormat: (o: any) => any;\n  height: number = 0;\n  approxHeight: number = 10;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.dimensionsChanged.emit({ height: this.approxHeight });\n      return;\n    }\n\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({ height: this.height });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n\n    this.adjustedScale = this.scale.bandwidth\n      ? function (d) {\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\n        }\n      : this.scale;\n\n    this.textTransform = '';\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = TextAnchor.End;\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = TextAnchor.Middle;\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks: any[]): number {\n    let angle = 0;\n    this.maxTicksLength = 0;\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 7; // need to measure this\n    const wordWidth = len * charWidth;\n\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\n\n    // calculate optimal angle\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);\n\n    return angle;\n  }\n\n  getTicks(): any[] {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth: number): number {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick: number): string {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform(): string {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { Orientation } from '../types/orientation.enum';\nimport { ViewDimensions } from '../types/view-dimension.interface';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis]',\n  template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisComponent implements OnChanges {\n  @Input() xScale;\n  @Input() dims: ViewDimensions;\n  @Input() trimTicks: boolean;\n  @Input() rotateTicks: boolean = true;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() showLabel: boolean;\n  @Input() labelText: string;\n  @Input() ticks: any[];\n  @Input() xAxisTickCount: number;\n  @Input() xOrient: Orientation = Orientation.Bottom;\n  @Input() xAxisOffset: number = 0;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  xAxisClassName: string = 'x axis';\n\n  tickArguments: number[];\n  transform: string;\n  labelOffset: number = 0;\n  fill: string = 'none';\n  stroke: string = 'stroke';\n  tickStroke: string = '#ccc';\n  strokeWidth: string = 'none';\n  padding: number = 5;\n\n  readonly orientation = Orientation;\n\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({ height }): void {\n    const newLabelOffset = height + 25 + 5;\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ height });\n      }, 0);\n    }\n  }\n}\n","/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nexport function roundedRect(\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  r: number,\n  [tl, tr, bl, br]: boolean[]\n): string {\n  let retval = '';\n\n  w = Math.floor(w);\n  h = Math.floor(h);\n\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n\n  return retval;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  EventEmitter,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  SimpleChanges,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nimport { roundedRect } from '../../common/shape.helper';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Orientation } from '../types/orientation.enum';\nimport { TextAnchor } from '../types/text-anchor.enum';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient: Orientation;\n  @Input() tickArguments: number[] = [5];\n  @Input() tickValues: string[] | number[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines: boolean = false;\n  @Input() gridLineWidth: number;\n  @Input() height: number;\n  @Input() referenceLines;\n  @Input() showRefLabels: boolean = false;\n  @Input() showRefLines: boolean = false;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  innerTickSize: number = 6;\n  tickPadding: number = 3;\n  tickSpacing: number;\n  verticalSpacing: number = 20;\n  textAnchor: TextAnchor = TextAnchor.Middle;\n  dy: string;\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n  adjustedScale: any;\n  transform: (o: any) => string;\n  tickFormat: (o: any) => string;\n  ticks: any[];\n  width: number = 0;\n  outerTickSize: number = 6;\n  rotateLabels: boolean = false;\n  refMax: number;\n  refMin: number;\n  referenceLineLength: number = 0;\n  referenceAreaPath: string;\n\n  readonly Orientation = Orientation;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.width = this.getApproximateAxisWidth();\n      this.dimensionsChanged.emit({ width: this.width });\n      return;\n    }\n\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({ width });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    let scale;\n    const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n\n    scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth\n      ? function (d) {\n          return scale(d) + scale.bandwidth() * 0.5;\n        }\n      : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case Orientation.Bottom:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case Orientation.Left:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = TextAnchor.End;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      case Orientation.Right:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = TextAnchor.Start;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      default:\n    }\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines(): void {\n    this.refMin = this.adjustedScale(\n      Math.min.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.refMax = this.adjustedScale(\n      Math.max.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.referenceLineLength = this.referenceLines.length;\n\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n      false,\n      false,\n      false,\n      false\n    ]);\n  }\n\n  getTicks(): any[] {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight: number): number {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick: number): string {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform(): string {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n  getApproximateAxisWidth(): number {\n    const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n    const charWidth = 7;\n    return maxChars * charWidth;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { Orientation } from '../types/orientation.enum';\nimport { ViewDimensions } from '../types/view-dimension.interface';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis]',\n  template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisComponent implements OnChanges {\n  @Input() yScale;\n  @Input() dims: ViewDimensions;\n  @Input() trimTicks: boolean;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() ticks: any[];\n  @Input() showGridLines: boolean = false;\n  @Input() showLabel: boolean;\n  @Input() labelText: string;\n  @Input() yAxisTickCount: any;\n  @Input() yOrient: Orientation = Orientation.Left;\n  @Input() referenceLines;\n  @Input() showRefLines: boolean;\n  @Input() showRefLabels: boolean;\n  @Input() yAxisOffset: number = 0;\n  @Output() dimensionsChanged = new EventEmitter();\n\n  yAxisClassName: string = 'y axis';\n  tickArguments: number[];\n  offset: number;\n  transform: string;\n  labelOffset: number = 15;\n  fill: string = 'none';\n  stroke: string = '#CCC';\n  tickStroke: string = '#CCC';\n  strokeWidth: number = 1;\n  padding: number = 5;\n\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.offset = -(this.yAxisOffset + this.padding);\n    if (this.yOrient === Orientation.Right) {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.offset = this.offset;\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({ width }): void {\n    if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AxisLabelComponent } from './axis-label.component';\nimport { XAxisComponent } from './x-axis.component';\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { YAxisComponent } from './y-axis.component';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n})\nexport class AxesModule {}\n","export enum StyleTypes {\n  popover = 'popover',\n  tooltip = 'tooltip'\n}\n","export enum ShowTypes {\n  all = 'all' as any,\n  focus = 'focus' as any,\n  mouseover = 'mouseover' as any\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  Renderer2,\n  OnDestroy,\n  TemplateRef,\n  ComponentRef\n} from '@angular/core';\n\nimport { PlacementTypes } from './position';\nimport { StyleTypes } from './style.type';\nimport { ShowTypes } from './show.type';\n\nimport { TooltipService } from './tooltip.service';\n\n@Directive({ selector: '[ngx-tooltip]' })\nexport class TooltipDirective implements OnDestroy {\n  @Input() tooltipCssClass: string = '';\n  @Input() tooltipTitle?: string;\n  @Input() tooltipAppendToBody: boolean = true;\n  @Input() tooltipSpacing: number = 10;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipShowCaret: boolean = true;\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.Top;\n  @Input() tooltipAlignment: PlacementTypes = PlacementTypes.Center;\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\n  @Input() tooltipCloseOnClickOutside: boolean = true;\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\n  @Input() tooltipHideTimeout: number = 300;\n  @Input() tooltipShowTimeout: number = 100;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\n  @Input() tooltipContext: any;\n  @Input() tooltipImmediateExit: boolean = false;\n\n  @Output() show: EventEmitter<boolean> = new EventEmitter();\n  @Output() hide: EventEmitter<boolean> = new EventEmitter();\n\n  private get listensForFocus(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  private get listensForHover(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  private component: ComponentRef<any>;\n  private timeout: ReturnType<typeof setTimeout>;\n  private mouseLeaveContentEvent: any;\n  private mouseEnterContentEvent: any;\n  private documentClickEvent: any;\n\n  constructor(\n    private tooltipService: TooltipService,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnDestroy(): void {\n    this.hideTooltip(true);\n  }\n\n  @HostListener('focusin')\n  onFocus(): void {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('mouseleave', ['$event.target'])\n  onMouseLeave(target): void {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  @HostListener('click')\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate?: boolean): void {\n    if (this.component || this.tooltipDisabled) return;\n\n    const time = immediate\n      ? 0\n      : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options);\n\n      // add a tiny timeout to avoid event re-triggers\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip: HTMLElement): void {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    });\n\n    // content mouse leave listener\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    }\n\n    // content close on click outside\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate: boolean = false): void {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent();\n\n      // emit events\n      this.hide.emit(true);\n\n      // destroy component\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  private createBoundOptions(): any {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TooltipDirective } from './tooltip.directive';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\nimport { InjectionService } from './injection.service';\n\n@NgModule({\n  declarations: [TooltipContentComponent, TooltipDirective],\n  providers: [InjectionService, TooltipService],\n  exports: [TooltipContentComponent, TooltipDirective],\n  imports: [CommonModule],\n  entryComponents: [TooltipContentComponent]\n})\nexport class TooltipModule {}\n","/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nexport function formatLabel(label: any): string {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n\n/**\n * Escapes a label.\n *\n * @export\n */\nexport function escapeLabel(label: any): string {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  // append a 'a' because neo gets mad\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","export enum BarOrientation {\n  Vertical = 'vertical',\n  Horizontal = 'horizontal'\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from './label.helper';\nimport { id } from '../utils/id';\nimport { ColorHelper } from './color.helper';\nimport { DataItem, Series, StringOrNumberOrDate } from '../models/chart-data.model';\nimport { PlacementTypes } from './tooltip/position';\nimport { StyleTypes } from './tooltip/style.type';\nimport { BarOrientation } from './types/bar-orientation.enum';\nimport { Gradient } from './types/gradient.interface';\nimport { ScaleType } from './types/scale-type.enum';\n\nexport enum SeriesType {\n  Standard = 'standard',\n  Stacked = 'stacked'\n}\n\nexport interface Circle {\n  classNames: string[];\n  value: string | number;\n  label: string;\n  data: DataItem;\n  cx: number;\n  cy: number;\n  radius: number;\n  height: number;\n  tooltipLabel: string;\n  color: string;\n  opacity: number;\n  seriesName: string;\n  gradientStops: Gradient[];\n  min: number;\n  max: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-circle-series]',\n  template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 1 }))\n      ])\n    ])\n  ]\n})\nexport class CircleSeriesComponent implements OnChanges, OnInit {\n  @Input() data: Series;\n  @Input() type: SeriesType = SeriesType.Standard;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() scaleType: ScaleType;\n  @Input() visibleValue: boolean;\n  @Input() activeEntries: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate: EventEmitter<{ name: StringOrNumberOrDate }> = new EventEmitter();\n  @Output() deactivate: EventEmitter<{ name: StringOrNumberOrDate }> = new EventEmitter();\n\n  areaPath: any;\n  circle: Circle; // active circle\n  barVisible: boolean = false;\n  gradientId: string;\n  gradientFill: string;\n\n  barOrientation = BarOrientation;\n  placementTypes = PlacementTypes;\n  styleTypes = StyleTypes;\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle(): Circle {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d: any, i: number): Circle {\n    const seriesName = this.data.name as string;\n\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n\n    let cx;\n    if (this.scaleType === ScaleType.Time) {\n      cx = this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n\n    let color;\n    if (this.colors.scaleType === ScaleType.Linear) {\n      if (this.type === SeriesType.Standard) {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({\n    tooltipLabel,\n    value,\n    seriesName,\n    min,\n    max\n  }: {\n    tooltipLabel: string;\n    value: any;\n    seriesName: string;\n    min: number;\n    max: number;\n  }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min: number, max: number): string {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n        result += min.toLocaleString();\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color: string): Gradient[] {\n    return [\n      {\n        offset: 0,\n        color,\n        opacity: 0.2\n      },\n      {\n        offset: 100,\n        color,\n        opacity: 1\n      }\n    ];\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle(): void {\n    this.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(): void {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({ name: this.data.name });\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-circle]',\n  template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CircleComponent implements OnChanges {\n  @Input() cx: number;\n  @Input() cy: number;\n  @Input() r: number;\n  @Input() fill: string;\n  @Input() stroke: string;\n  @Input() data: number | string;\n  @Input() classNames: string[] | string;\n  @Input() circleOpacity: number;\n  @Input() pointerEvents: string;\n\n  @Output() select: EventEmitter<number | string> = new EventEmitter();\n  @Output() activate: EventEmitter<number | string> = new EventEmitter();\n  @Output() deactivate: EventEmitter<number | string> = new EventEmitter();\n\n  @HostListener('click')\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel]',\n  template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelComponent {\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n}\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { BarOrientation } from './types/bar-orientation.enum';\nimport { ViewDimensions } from './types/view-dimension.interface';\n\ninterface GridPanel {\n  class: ClassEnum;\n  height: number;\n  name: string;\n  width: number;\n  x: number;\n  y: number;\n}\n\nenum ClassEnum {\n  Odd = 'odd',\n  Even = 'even'\n}\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel-series]',\n  template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelSeriesComponent implements OnChanges {\n  gridPanels: GridPanel[];\n\n  @Input() data: any[];\n\n  @Input() dims: ViewDimensions;\n\n  @Input() xScale: any;\n\n  @Input() yScale: any;\n\n  @Input() orient: BarOrientation;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels(): GridPanel[] {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = ClassEnum.Odd;\n\n      if (this.orient === BarOrientation.Vertical) {\n        const position: number = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === BarOrientation.Horizontal) {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { BarOrientation } from './types/bar-orientation.enum';\nimport { Gradient } from './types/gradient.interface';\n\n@Component({\n  selector: 'g[ngx-charts-svg-linear-gradient]',\n  template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgLinearGradientComponent implements OnChanges {\n  @Input() orientation = BarOrientation.Vertical;\n  @Input() name: string;\n  @Input() stops: Gradient[];\n\n  x1: string;\n  x2: string;\n  y1: string;\n  y2: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === BarOrientation.Horizontal) {\n      this.x2 = '100%';\n    } else if (this.orientation === BarOrientation.Vertical) {\n      this.y1 = '100%';\n    }\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\nimport { Gradient } from './types/gradient.interface';\n\n@Component({\n  selector: 'g[ngx-charts-svg-radial-gradient]',\n  template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgRadialGradientComponent implements OnChanges {\n  @Input() color: string;\n  @Input() name: string;\n  @Input() startOpacity: number;\n  @Input() endOpacity = 1;\n  @Input() cx: number = 0;\n  @Input() cy: number = 0;\n\n  @Input()\n  get stops(): Gradient[] {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value: Gradient[]) {\n    this.stopsInput = value;\n  }\n\n  r: string;\n\n  private stopsInput: Gradient[];\n  private stopsDefault: Gradient[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.r = '30%';\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [\n        {\n          offset: 0,\n          color: this.color,\n          opacity: this.startOpacity\n        },\n        {\n          offset: 100,\n          color: this.color,\n          opacity: this.endOpacity\n        }\n      ];\n    }\n  }\n}\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { select } from 'd3-selection';\nimport { id } from '../utils/id';\nimport { AreaChartSeries } from '../models/chart-data.model';\nimport { BarOrientation } from './types/bar-orientation.enum';\nimport { Gradient } from './types/gradient.interface';\n\n@Component({\n  selector: 'g[ngx-charts-area]',\n  template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaComponent implements OnChanges {\n  @Input() data: AreaChartSeries;\n  @Input() path: string;\n  @Input() startingPath: string;\n  @Input() fill: string;\n  @Input() opacity: number = 1;\n  @Input() startOpacity: number = 0.5;\n  @Input() endOpacity: number = 1;\n  @Input() gradient: boolean = false;\n  @Input() stops: Gradient[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  element: HTMLElement;\n  gradientId: string;\n  gradientFill: string;\n  areaPath: string;\n  animationsLoaded: boolean = false;\n  gradientStops: Gradient[];\n  hasGradient: boolean = false;\n\n  barOrientation = BarOrientation;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n\n    if (!this.animationsLoaded) {\n      this.loadAnimation();\n      this.animationsLoaded = true;\n    }\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation(): void {\n    this.areaPath = this.startingPath;\n    setTimeout(this.updatePathEl.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient(): Gradient[] {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: this.endOpacity\n      }\n    ];\n  }\n}\n","// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d): number {\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n\n/**\n * Counts from a number to the end incrementally.\n */\nexport function count(countFrom: number, countTo: number, countDecimals: number, countDuration: number, callback: any) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp: number) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n\n/**\n * Determine decimals places\n *\n * @export\n */\nexport function decimalChecker(countTo: number): number {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\nimport { count, decimalChecker } from './count.helper';\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n@Component({\n  selector: '[ngx-charts-count-up]',\n  template: ` {{ value }} `\n})\nexport class CountUpDirective implements OnDestroy {\n  @Input() countDuration: number = 1;\n  @Input() countPrefix: string = '';\n  @Input() countSuffix: string = '';\n  @Input() valueFormatting: any;\n\n  @Input()\n  set countDecimals(val: number) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals(): number {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  @Input()\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo(): any {\n    return this._countTo;\n  }\n\n  @Input()\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom(): any {\n    return this._countFrom;\n  }\n\n  @Output() countChange = new EventEmitter();\n  @Output() countFinish = new EventEmitter();\n\n  nativeElement: any;\n\n  value: any = '';\n  formattedValue: string;\n\n  private animationReq: any;\n\n  private _countDecimals: number = 0;\n  private _countTo: number = 0;\n  private _countFrom: number = 0;\n\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\n    this.nativeElement = element.nativeElement;\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start(): void {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting =\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({ value, progress, finished }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({ value: this.value, progress });\n      if (finished) this.countFinish.emit({ value: this.value, progress });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n}\n","declare let global: any;\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root: any;\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n}\n\n// tslint:disable-next-line:variable-name\nexport const MouseEvent = root.MouseEvent as any & {\n  prototype?: MouseEvent;\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\n};\n\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, { bubbles, cancelable });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { createMouseEvent } from '../events';\nimport { isPlatformBrowser } from '@angular/common';\nimport { ColorHelper } from '../common/color.helper';\nimport { PlacementTypes } from './tooltip/position';\nimport { StyleTypes } from './tooltip/style.type';\nimport { ViewDimensions } from './types/view-dimension.interface';\nimport { ScaleType } from './types/scale-type.enum';\n\nexport interface Tooltip {\n  color: string;\n  d0: number;\n  d1: number;\n  max: number;\n  min: number;\n  name: any;\n  series: any;\n  value: any;\n}\n\n@Component({\n  selector: 'g[ngx-charts-tooltip-area]',\n  template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition('inactive => active', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 0.7 }))\n      ]),\n      transition('active => inactive', [\n        style({\n          opacity: 0.7\n        }),\n        animate(250, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class TooltipArea {\n  anchorOpacity: number = 0;\n  anchorPos: number = -1;\n  anchorValues: Tooltip[] = [];\n  lastAnchorPos: number;\n\n  placementTypes = PlacementTypes;\n  styleTypes = StyleTypes;\n\n  @Input() dims: ViewDimensions;\n  @Input() xSet: any[];\n  @Input() xScale;\n  @Input() yScale;\n  @Input() results: any[];\n  @Input() colors: ColorHelper;\n  @Input() showPercentage: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() hover: EventEmitter<{ value: any }> = new EventEmitter();\n\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  getValues(xVal): Tooltip[] {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n        let color;\n        if (this.colors.scaleType === ScaleType.Linear) {\n          let v = val;\n          if (item.d1) {\n            v = item.d1;\n          }\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n\n    this.anchorValues = this.getValues(closestPoint);\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos: number): number {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip(): void {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip(): void {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem: Tooltip): string {\n    let result: string = '';\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n    result += ': ';\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n        result += tooltipItem.min.toLocaleString();\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n      result += ')';\n    }\n    return result;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { brushX } from 'd3-brush';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { id } from '../../utils/id';\nimport { ScaleType } from '../types/scale-type.enum';\nimport { ViewDimensions } from '../types/view-dimension.interface';\n\n@Component({\n  selector: 'g[ngx-charts-timeline]',\n  template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n  styleUrls: ['./timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Timeline implements OnChanges {\n  @Input() view: [number, number];\n  @Input() results; // type this\n  @Input() scheme; // type this\n  @Input() customColors; // type this\n  @Input() legend: boolean;\n  @Input() autoScale: boolean;\n  @Input() scaleType: ScaleType;\n  @Input() height: number = 50;\n\n  @Output() select = new EventEmitter();\n  @Output() onDomainChange = new EventEmitter();\n\n  element: HTMLElement;\n  dims: ViewDimensions;\n  xDomain: any[];\n  xScale: any;\n  brush: any;\n  transform: string;\n  initialized: boolean = false;\n  filterId: string;\n  filter: string;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update(): void {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n\n    this.cd.markForCheck();\n  }\n\n  getXDomain(): any[] {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush(): void {\n    if (this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush = brushX()\n      .extent([\n        [0, 0],\n        [width, height]\n      ])\n      .on('brush end', ({ selection }) => {\n        const newSelection = selection || this.xScale.range();\n        const newDomain = newSelection.map(this.xScale.invert);\n\n        this.onDomainChange.emit(newDomain);\n        this.cd.markForCheck();\n      });\n\n    select(this.element).select('.brush').call(this.brush);\n  }\n\n  updateBrush(): void {\n    if (!this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush.extent([\n      [0, 0],\n      [width, height]\n    ]);\n    select(this.element).select('.brush').call(this.brush);\n\n    // clear hardcoded properties so they can be defined by CSS\n    select(this.element)\n      .select('.selection')\n      .attr('fill', undefined)\n      .attr('stroke', undefined)\n      .attr('fill-opacity', undefined);\n\n    this.cd.markForCheck();\n  }\n\n  getDims(): ViewDimensions {\n    const width = this.view[0];\n\n    const dims = {\n      width,\n      height: this.height\n    };\n\n    return dims;\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectorRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { formatLabel } from '../label.helper';\nimport { ColorHelper } from '../color.helper';\n\nexport interface LegendEntry {\n  color: string;\n  formattedLabel: string;\n  label: string;\n}\n\n@Component({\n  selector: 'ngx-charts-legend',\n  template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendComponent implements OnChanges {\n  @Input() data: string[];\n  @Input() title: string;\n  @Input() colors: ColorHelper;\n  @Input() height: number;\n  @Input() width: number;\n  @Input() activeEntries;\n  @Input() horizontal = false;\n\n  @Output() labelClick: EventEmitter<string> = new EventEmitter();\n  @Output() labelActivate: EventEmitter<{ name: string }> = new EventEmitter();\n  @Output() labelDeactivate: EventEmitter<{ name: string }> = new EventEmitter();\n\n  legendEntries: LegendEntry[] = [];\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries(): LegendEntry[] {\n    const items = [];\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry: LegendEntry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item: { name: string }) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item: { name: string }) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index: number, item: LegendEntry): string {\n    return item.label;\n  }\n}\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ngx-charts-legend-entry',\n  template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendEntryComponent {\n  @Input() color: string;\n  @Input() label: string;\n  @Input() formattedLabel: string;\n  @Input() isActive: boolean = false;\n\n  @Output() select: EventEmitter<string> = new EventEmitter();\n  @Output() activate: EventEmitter<{ name: string }> = new EventEmitter();\n  @Output() deactivate: EventEmitter<{ name: string }> = new EventEmitter();\n  @Output() toggle: EventEmitter<string> = new EventEmitter();\n\n  get trimmedLabel(): string {\n    return this.formattedLabel || '(empty)';\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit({ name: this.label });\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit({ name: this.label });\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'ngx-charts-scale-legend',\n  template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./scale-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScaleLegendComponent implements OnChanges {\n  @Input() valueRange: number[];\n  @Input() colors: any;\n  @Input() height: number;\n  @Input() width: number;\n  @Input() horizontal: boolean = false;\n\n  gradient: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n  }\n\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n  gradientString(colors: string[], splits: number[]): string {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n\n    return pairs.join(', ');\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { formatLabel } from '../label.helper';\nimport { DataItem, StringOrNumberOrDate } from '../../models/chart-data.model';\nimport { ColorHelper } from '../color.helper';\n\nexport interface AdvancedLegendItem {\n  value: StringOrNumberOrDate;\n  _value: StringOrNumberOrDate;\n  color: string;\n  data: DataItem;\n  label: string;\n  displayLabel: string;\n  originalLabel: string;\n  percentage: string;\n}\n\n@Component({\n  selector: 'ngx-charts-advanced-legend',\n  template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./advanced-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedLegendComponent implements OnChanges {\n  @Input() width: number;\n  @Input() data: DataItem[];\n  @Input() colors: ColorHelper;\n  @Input() label: string = 'Total';\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate: EventEmitter<DataItem> = new EventEmitter();\n  @Output() deactivate: EventEmitter<DataItem> = new EventEmitter();\n\n  legendItems: AdvancedLegendItem[] = [];\n  total: number;\n  roundedTotal: number;\n\n  @Input() valueFormatting: (value: StringOrNumberOrDate) => any;\n  @Input() labelFormatting: (value: string) => string = label => label;\n  @Input() percentageFormatting: (value: number) => number = percentage => percentage;\n\n  defaultValueFormatting: (value: StringOrNumberOrDate) => string = value => value.toLocaleString();\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getTotal(): number {\n    return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n  }\n\n  update(): void {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems(): AdvancedLegendItem[] {\n    return (this.data as any).map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(index: number, item: AdvancedLegendItem) {\n    return item.label;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ChartComponent } from './charts/chart.component';\nimport { BaseChartComponent } from './base-chart.component';\nimport { AxesModule } from './axes/axes.module';\nimport { TooltipModule } from './tooltip/tooltip.module';\nimport { CircleSeriesComponent } from './circle-series.component';\nimport { CircleComponent } from './circle.component';\nimport { GridPanelComponent } from './grid-panel.component';\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\nimport { AreaComponent } from './area.component';\nimport { CountUpDirective } from './count/count.directive';\nimport { TooltipArea } from './tooltip-area.component';\nimport { Timeline } from './timeline/timeline.component';\nimport { VisibilityObserver } from '../utils/visibility-observer';\nimport { LegendComponent } from './legend/legend.component';\nimport { LegendEntryComponent } from './legend/legend-entry.component';\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\n\nconst COMPONENTS = [\n  AreaComponent,\n  BaseChartComponent,\n  CountUpDirective,\n  TooltipArea,\n  ChartComponent,\n  LegendComponent,\n  LegendEntryComponent,\n  ScaleLegendComponent,\n  CircleComponent,\n  CircleSeriesComponent,\n  GridPanelComponent,\n  GridPanelSeriesComponent,\n  SvgLinearGradientComponent,\n  SvgRadialGradientComponent,\n  Timeline,\n  AdvancedLegendComponent\n];\n\n@NgModule({\n  imports: [CommonModule, AxesModule, TooltipModule],\n  declarations: [...COMPONENTS, VisibilityObserver],\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n})\nexport class ChartCommonModule {}\n","import { LegendPosition } from './types/legend.model';\nimport { ScaleType } from './types/scale-type.enum';\nimport { ViewDimensions } from './types/view-dimension.interface';\n\nexport function calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = ScaleType.Ordinal,\n  legendPosition = LegendPosition.Right,\n  columns = 12\n}): ViewDimensions {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === LegendPosition.Right) {\n    if (legendType === ScaleType.Ordinal) {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = (chartWidth * columns) / 12;\n\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n","import { ScaleType } from '../common/types/scale-type.enum';\n\nexport interface Color {\n  name: string;\n  selectable: boolean;\n  group: ScaleType;\n  domain: string[];\n}\n\nexport let colorSets: Color[] = [\n  {\n    name: 'vivid',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#647c8a',\n      '#3f51b5',\n      '#2196f3',\n      '#00b862',\n      '#afdf0a',\n      '#a7b61a',\n      '#f3e562',\n      '#ff9800',\n      '#ff5722',\n      '#ff4514'\n    ]\n  },\n  {\n    name: 'natural',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#bf9d76',\n      '#e99450',\n      '#d89f59',\n      '#f2dfa7',\n      '#a5d7c6',\n      '#7794b1',\n      '#afafaf',\n      '#707160',\n      '#ba9383',\n      '#d9d5c3'\n    ]\n  },\n  {\n    name: 'cool',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#a8385d',\n      '#7aa3e5',\n      '#a27ea8',\n      '#aae3f5',\n      '#adcded',\n      '#a95963',\n      '#8796c0',\n      '#7ed3ed',\n      '#50abcc',\n      '#ad6886'\n    ]\n  },\n  {\n    name: 'fire',\n    selectable: true,\n    group: ScaleType.Ordinal,\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n  },\n  {\n    name: 'solar',\n    selectable: true,\n    group: ScaleType.Linear,\n    domain: [\n      '#fff8e1',\n      '#ffecb3',\n      '#ffe082',\n      '#ffd54f',\n      '#ffca28',\n      '#ffc107',\n      '#ffb300',\n      '#ffa000',\n      '#ff8f00',\n      '#ff6f00'\n    ]\n  },\n  {\n    name: 'air',\n    selectable: true,\n    group: ScaleType.Linear,\n    domain: [\n      '#e1f5fe',\n      '#b3e5fc',\n      '#81d4fa',\n      '#4fc3f7',\n      '#29b6f6',\n      '#03a9f4',\n      '#039be5',\n      '#0288d1',\n      '#0277bd',\n      '#01579b'\n    ]\n  },\n  {\n    name: 'aqua',\n    selectable: true,\n    group: ScaleType.Linear,\n    domain: [\n      '#e0f7fa',\n      '#b2ebf2',\n      '#80deea',\n      '#4dd0e1',\n      '#26c6da',\n      '#00bcd4',\n      '#00acc1',\n      '#0097a7',\n      '#00838f',\n      '#006064'\n    ]\n  },\n  {\n    name: 'flame',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#A10A28',\n      '#D3342D',\n      '#EF6D49',\n      '#FAAD67',\n      '#FDDE90',\n      '#DBED91',\n      '#A9D770',\n      '#6CBA67',\n      '#2C9653',\n      '#146738'\n    ]\n  },\n  {\n    name: 'ocean',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#1D68FB',\n      '#33C0FC',\n      '#4AFFFE',\n      '#AFFFFF',\n      '#FFFC63',\n      '#FDBD2D',\n      '#FC8A25',\n      '#FA4F1E',\n      '#FA141B',\n      '#BA38D1'\n    ]\n  },\n  {\n    name: 'forest',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#55C22D',\n      '#C1F33D',\n      '#3CC099',\n      '#AFFFFF',\n      '#8CFC9D',\n      '#76CFFA',\n      '#BA60FB',\n      '#EE6490',\n      '#C42A1C',\n      '#FC9F32'\n    ]\n  },\n  {\n    name: 'horizon',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#2597FB',\n      '#65EBFD',\n      '#99FDD0',\n      '#FCEE4B',\n      '#FEFCFA',\n      '#FDD6E3',\n      '#FCB1A8',\n      '#EF6F7B',\n      '#CB96E8',\n      '#EFDEE0'\n    ]\n  },\n  {\n    name: 'neons',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#FF3333',\n      '#FF33FF',\n      '#CC33FF',\n      '#0000FF',\n      '#33CCFF',\n      '#33FFFF',\n      '#33FF66',\n      '#CCFF33',\n      '#FFCC00',\n      '#FF6600'\n    ]\n  },\n  {\n    name: 'picnic',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#FAC51D',\n      '#66BD6D',\n      '#FAA026',\n      '#29BB9C',\n      '#E96B56',\n      '#55ACD2',\n      '#B7332F',\n      '#2C83C9',\n      '#9166B8',\n      '#92E7E8'\n    ]\n  },\n  {\n    name: 'night',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#2B1B5A',\n      '#501356',\n      '#183356',\n      '#28203F',\n      '#391B3C',\n      '#1E2B3C',\n      '#120634',\n      '#2D0432',\n      '#051932',\n      '#453080',\n      '#75267D',\n      '#2C507D',\n      '#4B3880',\n      '#752F7D',\n      '#35547D'\n    ]\n  },\n  {\n    name: 'nightLights',\n    selectable: false,\n    group: ScaleType.Ordinal,\n    domain: [\n      '#4e31a5',\n      '#9c25a7',\n      '#3065ab',\n      '#57468b',\n      '#904497',\n      '#46648b',\n      '#32118d',\n      '#a00fb3',\n      '#1052a2',\n      '#6e51bd',\n      '#b63cc3',\n      '#6c97cb',\n      '#8671c1',\n      '#b455be',\n      '#7496c3'\n    ]\n  }\n];\n","import { range } from 'd3-array';\nimport {\n  scaleBand,\n  ScaleLinear,\n  scaleLinear,\n  ScaleOrdinal,\n  scaleOrdinal,\n  ScaleQuantile,\n  scaleQuantile\n} from 'd3-scale';\n\nimport { Color, colorSets } from '../utils/color-sets';\nimport { StringOrNumberOrDate } from '../models/chart-data.model';\nimport { ScaleType } from './types/scale-type.enum';\nimport { Gradient } from './types/gradient.interface';\n\nexport class ColorHelper {\n  scale: any;\n  scaleType: ScaleType;\n  colorDomain: string[];\n  domain: number[] | string[];\n  customColors: any;\n\n  constructor(scheme: string | Color, type: ScaleType, domain: number[] | string[], customColors?) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme: string | Color, type: ScaleType, domain: number[] | string[]): any {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    let colorScale: ScaleQuantile<number> | ScaleOrdinal<string, unknown> | ScaleLinear<number, number>;\n    switch (type) {\n      case ScaleType.Quantile:\n        colorScale = scaleQuantile()\n          .range(scheme.domain as any)\n          .domain(domain as number[]);\n        break;\n      case ScaleType.Ordinal:\n        colorScale = scaleOrdinal()\n          .range(scheme.domain)\n          .domain(domain as string[]);\n        break;\n      case ScaleType.Linear:\n        {\n          const colorDomain = [...scheme.domain];\n          if (colorDomain.length === 1) {\n            colorDomain.push(colorDomain[0]);\n            this.colorDomain = colorDomain;\n          }\n\n          const points = range(0, 1, 1.0 / colorDomain.length);\n          colorScale = scaleLinear()\n            .range(colorDomain as any)\n            .domain(points);\n        }\n        break;\n      default:\n        break;\n    }\n\n    return colorScale;\n  }\n\n  getColor(value: StringOrNumberOrDate): string {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n    if (this.scaleType === ScaleType.Linear) {\n      const valueScale = scaleLinear()\n        .domain(this.domain as number[])\n        .range([0, 1]);\n\n      return this.scale(valueScale(value as number));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found: any; // todo type customColors\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value: number | string, start?: number | string): Gradient[] {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n    const valueScale = scaleLinear()\n      .domain(this.domain as number[])\n      .range([0, 1]);\n\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n\n    const endColor = this.getColor(value);\n\n    // generate the stops\n    const startVal = valueScale(start as number);\n    const startColor = this.getColor(start);\n\n    const endVal = valueScale(value as number);\n    let i = 1;\n    let currentVal = startVal;\n    const stops: Gradient[] = [];\n\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n}\n","import { ScaleType } from './types/scale-type.enum';\nimport { StringOrNumberOrDate } from '../models/chart-data.model';\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nexport function getUniqueXDomainValues(results: any[]): any[] {\n  const valueSet = new Set();\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n  return Array.from(valueSet);\n}\n\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nexport function getScaleType(values: any[], checkDateType: boolean = true): ScaleType {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n    if (allDates) {\n      return ScaleType.Time;\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n  if (allNumbers) {\n    return ScaleType.Linear;\n  }\n\n  return ScaleType.Ordinal;\n}\n\nexport function getXDomainArray(\n  values: Array<string | number | Date>,\n  xScaleMin?: number,\n  xScaleMax?: number\n): { domain: any[]; xSet: any[]; scaleType: string } {\n  const scaleType = getScaleType(values);\n  let xSet: StringOrNumberOrDate[] = [];\n  let domain: StringOrNumberOrDate[] = [];\n\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n  }\n\n  let min: number;\n  let max: number;\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const mappedValues = values.map(v => Number(v));\n    min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n    max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n  }\n\n  if (scaleType === ScaleType.Time) {\n    domain = [new Date(min), new Date(max)];\n    xSet = [...values].sort((a: Date, b: Date) => {\n      const aDate = a.getTime();\n      const bDate = b.getTime();\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    });\n  } else if (scaleType === ScaleType.Linear) {\n    domain = [min, max];\n    // Use compare function to sort numbers numerically\n    xSet = [...values].sort((a: number, b: number) => a - b);\n  } else {\n    domain = values;\n    xSet = values;\n  }\n\n  return { domain, xSet, scaleType };\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  TrackByFunction\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { CurveFactory, curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\nimport { isDate, isNumber } from '../utils/types';\nimport { Series } from '../models/chart-data.model';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\n@Component({\n  selector: 'ngx-charts-area-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean = false;\n  @Input() yAxis: boolean = false;\n  @Input() baseValue: any = 'auto';\n  @Input() autoScale: boolean = false;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() timeline: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: CurveFactory = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any[];\n  yDomain: [number, number];\n  seriesDomain: string[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  clipPathId: string;\n  clipPath: string;\n  scaleType: ScaleType;\n  series: Series;\n  margin: number[] = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: LegendOptions;\n\n  timelineWidth: number;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any[];\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): [number, number] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): string[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width: number): number {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain: [number, number], height: number): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values): ScaleType {\n    let date = true;\n    let num = true;\n    for (const value of values) {\n      if (isDate(value)) {\n        date = false;\n      }\n      if (isNumber(value)) {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return ScaleType.Time;\n    }\n\n    if (num) {\n      return ScaleType.Linear;\n    }\n\n    return ScaleType.Ordinal;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?: Series): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy: TrackByFunction<Series> = (index: number, item: Series) => {\n    return item.name;\n  };\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts: LegendOptions = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll(): void {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  TrackByFunction\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\nimport { Series } from '../models/chart-data.model';\nimport { SeriesType } from '../common/circle-series.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'ngx-charts-area-chart-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean = false;\n  @Input() showYAxisLabel: boolean = false;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: ScaleType;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: [number, number] = [0, 100];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  tooltipAreas: any[];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: LegendOptions;\n\n  seriesType = SeriesType;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      let total = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = (d.d0 * 100) / total;\n          d.d1 = (d.d1 * 100) / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getSeriesDomain(): string[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width: number): any {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height: number): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy: TrackByFunction<Series> = (index: number, item: Series) => {\n    return item.name;\n  };\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts: LegendOptions = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll(): void {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\nimport { SeriesType } from '../common/circle-series.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\n@Component({\n  selector: 'ngx-charts-area-chart-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartStackedComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean = false;\n  @Input() yAxis: boolean = false;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() timeline: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: ScaleType;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: [number, number];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: number;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  seriesType = SeriesType;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): [number, number] {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain(): string[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width: number): any {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height: number): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return `${item.name}`;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","export function sortLinear(data, property: string, direction = 'asc'): any[] {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nexport function sortByDomain(data, property: string, direction = 'asc', domain): any[] {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nexport function sortByTime(data, property: string, direction = 'asc'): any[] {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { area } from 'd3-shape';\nimport { ColorHelper } from '../common/color.helper';\nimport { Gradient } from '../common/types/gradient.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { AreaChartSeries } from '../models/chart-data.model';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-area-series]',\n  template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaSeriesComponent implements OnChanges {\n  @Input() data: AreaChartSeries;\n  @Input() xScale: any;\n  @Input() yScale: any;\n  @Input() baseValue: any = 'auto';\n  @Input() colors: ColorHelper;\n  @Input() scaleType: ScaleType;\n  @Input() stacked: boolean = false;\n  @Input() normalized: boolean = false;\n  @Input() gradient: boolean;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  opacity: number;\n  path: string;\n  startingPath: string;\n\n  hasGradient: boolean;\n  gradientStops: Gradient[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradient();\n\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0((d, i) => this.yScale(d.d0))\n        .y1((d, i) => this.yScale(d.d1));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => this.yScale.range()[0])\n        .y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => this.yScale(d.value));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n\n    this.opacity = 0.8;\n\n    let data = this.data.series;\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AreaChartComponent } from './area-chart.component';\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\nimport { AreaSeriesComponent } from './area-series.component';\nimport { ChartCommonModule } from '../common/chart-common.module';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n})\nexport class AreaChartModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { roundedRect } from '../common/shape.helper';\nimport { id } from '../utils/id';\nimport { DataItem } from '../models/chart-data.model';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { Gradient } from '../common/types/gradient.interface';\n\n@Component({\n  selector: 'g[ngx-charts-bar]',\n  template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarComponent implements OnChanges {\n  @Input() fill: string;\n  @Input() data: DataItem;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() orientation: BarOrientation;\n  @Input() roundEdges: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() offset: number = 0;\n  @Input() isActive: boolean = false;\n  @Input() stops: Gradient[];\n  @Input() animations: boolean = true;\n  @Input() ariaLabel: string;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate: EventEmitter<DataItem> = new EventEmitter();\n  @Output() deactivate: EventEmitter<DataItem> = new EventEmitter();\n\n  element: HTMLElement;\n  path: string;\n  gradientId: string;\n  gradientFill: string;\n  gradientStops: Gradient[];\n  hasGradient: boolean = false;\n  hideBar: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n    this.update();\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation(): void {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient(): Gradient[] {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  getStartingPath(): string {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === BarOrientation.Vertical) {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath(): string {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius(): number {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity(): number {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges(): boolean[] {\n    let edges = [false, false, false, false];\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n    return edges;\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  private checkToHideBar(): void {\n    this.hideBar =\n      this.noBarWhenZero &&\n      ((this.orientation === BarOrientation.Vertical && this.height === 0) ||\n        (this.orientation === BarOrientation.Horizontal && this.width === 0));\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarHorizontalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() xScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yScale: any;\n  xScale: any;\n  xDomain: [number, number];\n  yDomain: string[];\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n\n  getXDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain(): string[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend: boolean = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend: boolean = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  TrackByFunction\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontal2DComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding: number = 16;\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  barOrientation = BarOrientation;\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): [number, number] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group: DataItem): string {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group?: DataItem): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy: TrackByFunction<DataItem> = (index: number, item: DataItem) => {\n    return item.name;\n  };\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex: number): void {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group: DataItem, fromLegend: boolean = false): void {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: DataItem, fromLegend: boolean = false): void {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","export enum BarChartType {\n  Standard = 'standard',\n  Normalized = 'normalized',\n  Stacked = 'stacked'\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  TrackByFunction\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [type]=\"barChartType.Normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number] = [0, 100];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  barChartType = BarChartType;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group: Series): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?: Series): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy: TrackByFunction<Series> = (index: number, item: Series) => {\n    return item.name;\n  };\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  TrackByFunction\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  barChartType = BarChartType;\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): [number, number] {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group: Series): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?: Series): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy: TrackByFunction<Series> = (index: number, item: Series) => {\n    return item.name;\n  };\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex: number) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarVerticalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xScale: any;\n  yScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n    return [min, max];\n  }\n\n  onClick(data: DataItem | string) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  TrackByFunction\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVertical2DComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() scaleType: ScaleType = ScaleType.Ordinal;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding: number = 16;\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  barOrientation = BarOrientation;\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex: number): void {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): [number, number] {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n\n    return [min, max];\n  }\n\n  groupTransform(group: DataItem): string {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group?: DataItem): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy: TrackByFunction<DataItem> = (index: number, item: DataItem) => {\n    return item.name;\n  };\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group: DataItem, fromLegend: boolean = false): void {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: DataItem, fromLegend: boolean = false): void {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  TrackByFunction\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number] = [0, 100];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n\n  barChartType = BarChartType;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group: Series): string {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group?: Series) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy: TrackByFunction<Series> = (index: number, item: Series) => {\n    return item.name;\n  };\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  TrackByFunction\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalStackedComponent extends BaseChartComponent {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding: number = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: string[];\n  innerDomain: string[];\n  valueDomain: [number, number];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  tickFormatting: (label: string) => string;\n  colors: ColorHelper;\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  barChartType = BarChartType;\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n\n  getInnerDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n\n  getValueDomain(): [number, number] {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex: number) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group: Series): string {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group?: Series) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy: TrackByFunction<Series> = (index: number, item: Series) => {\n    return item.name;\n  };\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend: boolean = false): void {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group: Series, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","export enum D0Types {\n  positive = 'positive',\n  negative = 'negative'\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem, StringOrNumberOrDate } from '../models/chart-data.model';\nimport { ColorHelper } from '../common/color.helper';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { Bar } from './types/bar.model';\nimport { D0Types } from './types/d0-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\n@Component({\n  selector: 'g[ngx-charts-series-horizontal]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesHorizontal implements OnChanges {\n  @Input() dims: ViewDimensions;\n  @Input() type: BarChartType = BarChartType.Standard;\n  @Input() series: DataItem[];\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() activeEntries: DataItem[];\n  @Input() seriesName: StringOrNumberOrDate;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelWidthChanged = new EventEmitter<{ size: Event; index: number }>();\n\n  tooltipPlacement: PlacementTypes;\n  tooltipType: StyleTypes;\n  bars: Bar[];\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  barOrientation = BarOrientation;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type: D0Types;\n    d0Type = D0Types.positive;\n    let total;\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => (sum as any) + d, 0);\n    }\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n\n    this.bars = this.series.map(d => {\n      let value = d.value as any;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === BarChartType.Standard) {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n        bar.y = this.yScale(label);\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels(): void {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      // if total is positive then we show it on the right, otherwise on the left\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ?? d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings(): void {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry: DataItem): boolean {\n    if (!this.activeEntries) return false;\n\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n\n    return item !== undefined;\n  }\n\n  getLabel(dataItem: DataItem): StringOrNumberOrDate {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index: number, bar: Bar): string {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index: number, barLabel: any): string {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data: DataItem): void {\n    this.select.emit(data);\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem, StringOrNumberOrDate } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { ColorHelper } from '../common/color.helper';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { D0Types } from './types/d0-type.enum';\nimport { Bar } from './types/bar.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\n@Component({\n  selector: 'g[ngx-charts-series-vertical]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Vertical\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesVerticalComponent implements OnChanges {\n  @Input() dims: ViewDimensions;\n  @Input() type: BarChartType = BarChartType.Standard;\n  @Input() series: DataItem[];\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() gradient: boolean;\n  @Input() activeEntries: DataItem[];\n  @Input() seriesName: StringOrNumberOrDate;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelHeightChanged = new EventEmitter();\n\n  tooltipPlacement: PlacementTypes;\n  tooltipType: StyleTypes;\n\n  bars: Bar[];\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  barOrientation = BarOrientation;\n\n  ngOnChanges(changes): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    let width;\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n\n    let total;\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value as any;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === BarChartType.Standard) {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels(): void {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ?? d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings(): void {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry: DataItem): boolean {\n    if (!this.activeEntries) return false;\n\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n\n    return item !== undefined;\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem: DataItem): StringOrNumberOrDate {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index: number, bar: Bar): string {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index: number, barLabel: any): string {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { formatLabel } from '../common/label.helper';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\n\n@Component({\n  selector: 'g[ngx-charts-bar-label]',\n  template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n  styleUrls: ['./bar-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarLabelComponent implements OnChanges {\n  @Input() value;\n  @Input() valueFormatting: any;\n  @Input() barX;\n  @Input() barY;\n  @Input() barWidth;\n  @Input() barHeight;\n  @Input() orientation: BarOrientation;\n\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\n\n  element: any;\n  x: number;\n  y: number;\n  horizontalPadding: number = 2;\n  verticalPadding: number = 5;\n  formatedValue: string;\n  transform: string;\n  textAnchor: string;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getSize(): any {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return { height: h, width: w, negative: this.value < 0 };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update(): void {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth;\n      // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BarComponent } from './bar.component';\nimport { BarHorizontalComponent } from './bar-horizontal.component';\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\nimport { BarVerticalComponent } from './bar-vertical.component';\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\nimport { SeriesHorizontal } from './series-horizontal.component';\nimport { SeriesVerticalComponent } from './series-vertical.component';\nimport { BarLabelComponent } from './bar-label.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ],\n  exports: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ]\n})\nexport class BarChartModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ColorHelper } from '../common/color.helper';\nimport { BoxChartMultiSeries, BoxChartSeries, IBoxModel, StringOrNumberOrDate } from '../models/chart-data.model';\nimport { scaleLinear, ScaleLinear, scaleBand, ScaleBand } from 'd3-scale';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { LegendPosition, LegendOptions } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\n@Component({\n  selector: 'ngx-charts-box-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class BoxChartComponent extends BaseChartComponent {\n  /** Show or hide the legend. */\n  @Input() legend: boolean = false;\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() legendTitle: string = 'Legend';\n  /** I think it is better to handle legend options as single Input object of type ILegendOptions */\n  @Input() legendOptionsConfig: LegendOptions;\n  @Input() showGridLines: boolean = true;\n  @Input() xAxis: boolean = true;\n  @Input() yAxis: boolean = true;\n  @Input() showXAxisLabel: boolean = true;\n  @Input() showYAxisLabel: boolean = true;\n  @Input() roundDomains: boolean = false;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() roundEdges: boolean = true;\n  @Input() strokeColor: string = '#FFFFFF';\n  @Input() strokeWidth: number = 2;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n\n  @Output() select: EventEmitter<IBoxModel> = new EventEmitter();\n  @Output() activate: EventEmitter<IBoxModel> = new EventEmitter();\n  @Output() deactivate: EventEmitter<IBoxModel> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate', { static: false }) tooltipTemplate: TemplateRef<any>;\n\n  /** Input Data, this came from Base Chart Component. */\n  results: BoxChartMultiSeries;\n  /** Chart Dimensions, this came from Base Chart Component. */\n  dims: ViewDimensions;\n  /** Color data. */\n  colors: ColorHelper;\n  /** Transform string css attribute for the chart container */\n  transform: string;\n\n  /** Chart Margins (For each side, counterclock wise). */\n  margin: [number, number, number, number] = [10, 20, 10, 20];\n\n  /** Legend Options object to handle positioning, title, colors and domain. */\n  legendOptions: LegendOptions;\n\n  xScale: ScaleBand<string>;\n  yScale: ScaleLinear<number, number>;\n  xDomain: StringOrNumberOrDate[];\n  yDomain: number[];\n  seriesDomain: string[];\n  /** Chart X axis dimension. */\n  xAxisHeight: number = 0;\n  /** Chart Y axis dimension. */\n  yAxisWidth: number = 0;\n\n  trackBy(index: number, item: BoxChartSeries): StringOrNumberOrDate {\n    return item.name;\n  }\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.setScales();\n    this.setColors();\n\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  setColors(): void {\n    let domain: string[] | number[] = [];\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  setScales() {\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n  }\n\n  getXScale(domain: Array<string | number | Date>, width: number): ScaleBand<string> {\n    const scale = scaleBand()\n      .domain(domain.map(d => d.toString()))\n      .rangeRound([0, width])\n      .padding(0.5);\n\n    return scale;\n  }\n\n  getYScale(domain: number[], height: number): ScaleLinear<number, number> {\n    const scale = scaleLinear().domain(domain).range([height, 0]);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getUniqueBoxChartXDomainValues(results: BoxChartMultiSeries) {\n    const valueSet = new Set<string | number | Date>();\n    for (const result of results) {\n      valueSet.add(result.name);\n    }\n    return Array.from(valueSet);\n  }\n\n  getXDomain(): Array<string | number | Date> {\n    let domain: Array<string | number | Date> = [];\n    const values: Array<string | number | Date> = this.getUniqueBoxChartXDomainValues(this.results);\n    let min: number;\n    let max: number;\n    if (typeof values[0] === 'string') {\n      domain = values.map(val => val.toString());\n    } else if (typeof values[0] === 'number') {\n      const mappedValues = values.map(v => Number(v));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [min, max];\n    } else {\n      const mappedValues = values.map(v => Number(new Date(v)));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [new Date(min), new Date(max)];\n    }\n    return domain;\n  }\n\n  getYDomain(): number[] {\n    const domain: Array<number | Date> = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    const mappedValues = values.map(v => Number(v));\n\n    const min: number = Math.min(...mappedValues);\n    const max: number = Math.max(...mappedValues);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): string[] {\n    return this.results.map(d => `${d.name}`);\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onClick(data: IBoxModel): void {\n    this.select.emit(data);\n  }\n\n  onActivate(data: IBoxModel): void {\n    this.activate.emit(data);\n  }\n\n  onDeactivate(data: IBoxModel): void {\n    this.deactivate.emit(data);\n  }\n\n  private getLegendOptions(): LegendOptions {\n    const legendOpts: LegendOptions = {\n      scaleType: this.schemeType,\n      colors: this.colors,\n      domain: [],\n      position: this.legendPosition,\n      title: this.legendTitle\n    };\n    if (this.schemeType === ScaleType.Ordinal) {\n      legendOpts.domain = this.xDomain;\n      legendOpts.colors = this.colors;\n    } else {\n      legendOpts.domain = this.yDomain;\n      legendOpts.colors = this.colors.scale;\n    }\n    return legendOpts;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  TemplateRef\n} from '@angular/core';\nimport { min, max, quantile } from 'd3-array';\nimport { ScaleLinear, ScaleBand } from 'd3-scale';\nimport { IBoxModel, BoxChartSeries, DataItem } from '../models/chart-data.model';\nimport { IVector2D } from '../models/coordinates.model';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { ColorHelper } from '../common/color.helper';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'g[ngx-charts-box-series]',\n  template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class BoxSeriesComponent implements OnChanges {\n  @Input() dims: ViewDimensions;\n  @Input() series: BoxChartSeries;\n  @Input() xScale: ScaleBand<string>;\n  @Input() yScale: ScaleLinear<number, number>;\n  @Input() colors: ColorHelper;\n  @Input() animations: boolean = true;\n  @Input() strokeColor: string;\n  @Input() strokeWidth: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() tooltipPlacement: PlacementTypes;\n  @Input() tooltipType: StyleTypes;\n  @Input() roundEdges: boolean;\n  @Input() gradient: boolean = false;\n\n  @Output() select: EventEmitter<IBoxModel> = new EventEmitter();\n  @Output() activate: EventEmitter<IBoxModel> = new EventEmitter();\n  @Output() deactivate: EventEmitter<IBoxModel> = new EventEmitter();\n\n  box: IBoxModel;\n  counts: DataItem[];\n  quartiles: [number, number, number];\n  whiskers: [number, number];\n  lineCoordinates: [IVector2D, IVector2D, IVector2D, IVector2D];\n  tooltipTitle: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  onClick(data: IBoxModel): void {\n    this.select.emit(data);\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n    const seriesName = this.series.name;\n\n    // Calculate Quantile and Whiskers for each box serie.\n    this.counts = this.series.series;\n\n    const mappedCounts = this.counts.map(serie => Number(serie.value));\n    this.whiskers = [min(mappedCounts), max(mappedCounts)];\n\n    // We get the group count and must sort it in order to retrieve quantiles.\n    const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n    this.quartiles = this.getBoxQuantiles(groupCounts);\n    this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n\n    const value = this.quartiles[1];\n    const formattedLabel = formatLabel(seriesName);\n    const box: IBoxModel = {\n      value,\n      data: this.counts,\n      label: seriesName,\n      formattedLabel,\n      width,\n      height: 0,\n      x: 0,\n      y: 0,\n      roundEdges: this.roundEdges,\n      quartiles: this.quartiles,\n      lineCoordinates: this.lineCoordinates\n    };\n\n    box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n    box.x = this.xScale(seriesName.toString());\n    box.y = this.yScale(this.quartiles[2]);\n    box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n\n    if (this.colors.scaleType === ScaleType.Ordinal) {\n      box.color = this.colors.getColor(seriesName);\n    } else {\n      box.color = this.colors.getColor(this.quartiles[1]);\n      box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n    }\n\n    const tooltipLabel = formattedLabel;\n    const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n\n    box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n    this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n\n    this.box = box;\n  }\n\n  getBoxQuantiles(inputData: Array<number | Date>): [number, number, number] {\n    return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n  }\n\n  getLinesCoordinates(\n    seriesName: string,\n    whiskers: [number, number],\n    quartiles: [number, number, number],\n    barWidth: number\n  ): [IVector2D, IVector2D, IVector2D, IVector2D] {\n    // The X value is not being centered, so had to sum half the width to align it.\n    const commonX = this.xScale(seriesName);\n    const offsetX = commonX + barWidth / 2;\n\n    const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n    const whiskerLineWidth = Math.max(barWidth / 3, 1);\n\n    const whiskerZero = this.yScale(whiskers[0]);\n    const whiskerOne = this.yScale(whiskers[1]);\n    const median = this.yScale(quartiles[1]);\n\n    const topLine: IVector2D = {\n      v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerZero },\n      v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerZero }\n    };\n    const medianLine: IVector2D = {\n      v1: { x: offsetX + medianLineWidth / 2, y: median },\n      v2: { x: offsetX - medianLineWidth / 2, y: median }\n    };\n    const bottomLine: IVector2D = {\n      v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerOne },\n      v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerOne }\n    };\n    const verticalLine: IVector2D = {\n      v1: { x: offsetX, y: whiskerZero },\n      v2: { x: offsetX, y: whiskerOne }\n    };\n    return [verticalLine, topLine, medianLine, bottomLine];\n  }\n\n  updateTooltipSettings() {\n    if (this.tooltipDisabled) {\n      this.tooltipPlacement = undefined;\n      this.tooltipType = undefined;\n    } else {\n      if (!this.tooltipPlacement) {\n        this.tooltipPlacement = PlacementTypes.Top;\n      }\n      if (!this.tooltipType) {\n        this.tooltipType = StyleTypes.tooltip;\n      }\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { select, BaseType } from 'd3-selection';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\n\nimport cloneDeep from 'clone-deep';\n\nimport { roundedRect } from '../common/shape.helper';\nimport { id } from '../utils/id';\nimport { IBoxModel } from '../models/chart-data.model';\nimport { IVector2D } from '../models/coordinates.model';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { Gradient } from '../common/types/gradient.interface';\n\ntype LineCoordinates = [IVector2D, IVector2D, IVector2D, IVector2D];\n\n@Component({\n  selector: 'g[ngx-charts-box]',\n  template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BoxComponent implements OnChanges {\n  @Input() strokeColor: string;\n  @Input() strokeWidth: number;\n  @Input() fill: string;\n  @Input() data: IBoxModel;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() lineCoordinates: LineCoordinates;\n  @Input() roundEdges: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() gradientStops: Gradient[];\n  @Input() offset: number = 0;\n  @Input() isActive: boolean = false;\n  @Input() animations: boolean = true;\n  @Input() ariaLabel: string;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select: EventEmitter<IBoxModel> = new EventEmitter();\n  @Output() activate: EventEmitter<IBoxModel> = new EventEmitter();\n  @Output() deactivate: EventEmitter<IBoxModel> = new EventEmitter();\n\n  BarOrientation = BarOrientation;\n\n  nativeElm: any;\n\n  // Path related properties.\n  oldPath: string;\n  boxPath: string;\n  oldLineCoordinates: LineCoordinates;\n\n  // Color related properties.\n  gradientId: string;\n  gradientFill: string;\n  initialized: boolean = false;\n  hasGradient: boolean = false;\n  hideBar: boolean = false;\n\n  /** Mask Path to cut the line on the box part. */\n  maskLine: string;\n  /** Mask Path Id to keep track of the mask element */\n  maskLineId: string;\n\n  boxStrokeWidth: number;\n  whiskerStrokeWidth: number;\n  medianLineWidth: number;\n\n  constructor(element: ElementRef, protected cd: ChangeDetectorRef) {\n    this.nativeElm = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update(): void {\n    this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n    this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n    this.medianLineWidth = 1.5 * this.strokeWidth;\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updateLineEl();\n    this.updatePathEl();\n    this.checkToHideBar();\n    this.maskLineId = 'mask' + id().toString();\n    this.maskLine = `url(#${this.maskLineId})`;\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  loadAnimation(): void {\n    this.boxPath = this.oldPath = this.getStartingPath();\n    this.oldLineCoordinates = this.getStartingLineCoordinates();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const nodeBar = select(this.nativeElm).selectAll('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      nodeBar\n        .attr('d', this.oldPath)\n        .transition()\n        .ease(easeSinInOut)\n        .duration(500)\n        .attrTween('d', this.pathTween(path, 4));\n    } else {\n      nodeBar.attr('d', path);\n    }\n    this.oldPath = path;\n  }\n\n  updateLineEl(): void {\n    const lineEl = select(this.nativeElm).selectAll('.bar-line');\n    const lineCoordinates = this.lineCoordinates;\n    const oldLineCoordinates = this.oldLineCoordinates;\n    if (this.animations) {\n      lineEl\n        .attr('x1', (_, index) => oldLineCoordinates[index].v1.x)\n        .attr('y1', (_, index) => oldLineCoordinates[index].v1.y)\n        .attr('x2', (_, index) => oldLineCoordinates[index].v2.x)\n        .attr('y2', (_, index) => oldLineCoordinates[index].v2.y)\n        .transition()\n        .ease(easeSinInOut)\n        .duration(500)\n        .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n        .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n        .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n        .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    } else {\n      lineEl\n        .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n        .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n        .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n        .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    }\n    this.oldLineCoordinates = [...lineCoordinates];\n  }\n\n  /**\n   * See [D3 Selections](https://www.d3indepth.com/selections/)\n   * @param d The joined data.\n   * @param index The index of the element within the selection\n   * @param node The node element (Line).\n   */\n  lineTween(attr: string, d: any, index: number, node: BaseType[] | ArrayLike<BaseType>) {\n    const nodeLineEl = node[index] as SVGLineElement;\n    return nodeLineEl[attr].baseVal.value;\n  }\n\n  // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n  pathTween(d1: string, precision: number) {\n    return function () {\n      // tslint:disable-next-line: no-this-assignment\n      const path0 = this;\n      const path1 = this.cloneNode();\n      path1.setAttribute('d', d1);\n      const n0 = path0?.getTotalLength();\n      const n1 = path1?.getTotalLength();\n      // Uniform sampling of distance based on specified precision.\n      const distances = [0];\n      let i = 0;\n      const dt = precision / Math.max(n0, n1);\n      while (i < 1) {\n        distances.push(i);\n        i += dt;\n      }\n      distances.push(1);\n\n      // Compute point-interpolators at each distance.\n      const points = distances.map((t: number) => {\n        const p0 = path0.getPointAtLength(t * n0);\n        const p1 = path1.getPointAtLength(t * n1);\n        return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n      });\n\n      // 't': T is the fraction of time (between 0 and 1) since the transition began.\n      return (t: any) => {\n        return t < 1 ? 'M' + points.map((p: (t: number) => any[]) => p(t)).join('L') : d1;\n      };\n    };\n  }\n\n  getStartingPath(): string {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    const radius = this.roundEdges ? 1 : 0;\n    const { x, y } = this.lineCoordinates[2].v1;\n\n    return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n  }\n\n  getPath(): string {\n    const radius = this.getRadius();\n    let path = '';\n\n    path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n\n    return path;\n  }\n\n  getStartingLineCoordinates(): LineCoordinates {\n    if (!this.animations) {\n      return [...this.lineCoordinates];\n    }\n\n    const lineCoordinates: LineCoordinates = cloneDeep(this.lineCoordinates);\n\n    lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y =\n      lineCoordinates[2].v1.y;\n\n    return lineCoordinates;\n  }\n\n  getRadius(): number {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getGradient(): Gradient[] {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  getStartOpacity(): number {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges(): boolean[] {\n    let edges: [boolean, boolean, boolean, boolean] = [false, false, false, false];\n    if (this.roundEdges) {\n      edges = [true, true, true, true];\n    }\n    return edges;\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  private checkToHideBar(): void {\n    this.hideBar = this.noBarWhenZero && this.height === 0;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BoxChartComponent } from './box-chart.component';\nimport { BoxSeriesComponent } from './box-series.component';\nimport { BoxComponent } from './box.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n  exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n})\nexport class BoxChartModule {}\n","import { ScaleLinear, scaleLinear, ScalePoint, scalePoint, ScaleTime, scaleTime } from 'd3-scale';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\nexport function getDomain(\n  values: any[],\n  scaleType: ScaleType,\n  autoScale: boolean,\n  minVal?: number,\n  maxVal?: number\n): number[] {\n  let domain: number[] = [];\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nexport function getScale(\n  domain: number[],\n  range: number[],\n  scaleType: ScaleType,\n  roundDomains: boolean\n): ScaleTime<number, number> | ScaleLinear<number, number> | ScalePoint<string> {\n  switch (scaleType) {\n    case ScaleType.Time:\n      return scaleTime().range(range).domain(domain);\n    case ScaleType.Linear: {\n      const scale = scaleLinear().range(range).domain(domain);\n      if (roundDomains) {\n        return scale.nice();\n      }\n      return scale;\n    }\n    case ScaleType.Ordinal:\n      return scalePoint()\n        .range([range[0], range[1]])\n        .domain(domain.map(r => r.toString()));\n    default:\n      return undefined;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\nimport { getDomain, getScale } from './bubble-chart.utils';\nimport { id } from '../utils/id';\nimport { BubbleChartSeries } from '../models/chart-data.model';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'ngx-charts-bubble-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class BubbleChartComponent extends BaseChartComponent {\n  @Input() showGridLines: boolean = true;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean = true;\n  @Input() yAxis: boolean = true;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() maxRadius: number = 10;\n  @Input() minRadius: number = 3;\n  @Input() autoScale: boolean;\n  @Input() schemeType: ScaleType = ScaleType.Ordinal;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: number;\n  @Input() xScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  colors: ColorHelper;\n  scaleType: ScaleType = ScaleType.Linear;\n  margin: number[] = [10, 20, 10, 20];\n  bubblePadding: number[] = [0, 0, 0, 0];\n  data: BubbleChartSeries[];\n\n  legendOptions: LegendOptions;\n  transform: string;\n\n  clipPath: string;\n  clipPathId: string;\n\n  seriesDomain: number[];\n  xDomain: number[];\n  yDomain: number[];\n  rDomain: number[];\n\n  xScaleType: ScaleType;\n  yScaleType: ScaleType;\n\n  yScale: any;\n  xScale: any;\n  rScale: any;\n\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n\n  activeEntries: any[] = [];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n\n    const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n\n    this.data = this.results;\n\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n\n    this.legendOptions = this.getLegendOptions();\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding(): number[] {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n    let height = this.dims.height;\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height: number): any {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width: number): any {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range): any {\n    const scale = scaleLinear().range(range).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain(): number[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain(): number[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain(): [number, number] {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll(): void {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index: number, item): string {\n    return `${item.name}`;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BubbleChartSeries } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\n@Component({\n  selector: 'g[ngx-charts-bubble-series]',\n  template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0,\n          transform: 'scale(0)'\n        }),\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n      ])\n    ])\n  ]\n})\nexport class BubbleSeriesComponent implements OnChanges {\n  @Input() data: BubbleChartSeries;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() rScale;\n  @Input() xScaleType: ScaleType;\n  @Input() yScaleType: ScaleType;\n  @Input() colors: ColorHelper;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circles: any[]; // TODO type this\n\n  placementTypes = PlacementTypes;\n  styleTypes = StyleTypes;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circles = this.getCircles();\n  }\n\n  getCircles(): any[] {\n    const seriesName = this.data.name;\n\n    return this.data.series\n      .map((d, i) => {\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n          const y = d.y;\n          const x = d.x;\n          const r = d.r;\n\n          const radius = this.rScale(r || 1);\n          const tooltipLabel = formatLabel(d.name);\n\n          const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n          const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n\n          const color =\n            this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n          const opacity = isActive ? 1 : 0.3;\n\n          const data = Object.assign({}, d, {\n            series: seriesName,\n            name: d.name,\n            value: d.y,\n            x: d.x,\n            radius: d.r\n          });\n\n          return {\n            data,\n            x,\n            y,\n            r,\n            classNames: [`circle-data-${i}`],\n            value: y,\n            label: x,\n            cx,\n            cy,\n            radius,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            isActive,\n            transform: `translate(${cx},${cy})`\n          };\n        }\n      })\n      .filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle): string {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name =\n      hasSeriesName && hasTooltipLabel\n        ? `${circle.seriesName} • ${circle.tooltipLabel}`\n        : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle =\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle): boolean {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({ name: circle.seriesName });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle): void {\n    circle.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(circle): void {\n    circle.barVisible = false;\n    this.deactivate.emit({ name: this.data.name });\n  }\n\n  trackBy(index, circle): string {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BubbleChartComponent } from './bubble-chart.component';\nimport { BubbleSeriesComponent } from './bubble-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\n})\nexport class BubbleChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { Transition } from 'd3-transition';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { Gradient } from '../common/types/gradient.interface';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatMapCellComponent implements OnChanges {\n  @Input() fill: string;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() data: number;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<number> = new EventEmitter();\n  @Output() activate: EventEmitter<number> = new EventEmitter();\n  @Output() deactivate: EventEmitter<number> = new EventEmitter();\n\n  element: HTMLElement;\n  transform: string;\n  startOpacity: number;\n  gradientId: string;\n  gradientUrl: string;\n  gradientStops: Gradient[];\n\n  barOrientation = BarOrientation;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.transform = `translate(${this.x} , ${this.y})`;\n\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops(): Gradient[] {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    node.transition().duration(750).attr('opacity', 1);\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem, Series } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\n\ninterface Cell {\n  cell: DataItem;\n  data: number;\n  fill: string;\n  height: number;\n  label: string;\n  row: Series;\n  series: string;\n  width: number;\n  x: number;\n  y: number;\n}\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() colors;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() gradient: boolean;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<DataItem> = new EventEmitter();\n  @Output() activate: EventEmitter<DataItem> = new EventEmitter();\n  @Output() deactivate: EventEmitter<DataItem> = new EventEmitter();\n\n  cells: Cell[];\n\n  placementTypes = PlacementTypes;\n  styleTypes = StyleTypes;\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cells = this.getCells();\n  }\n\n  getCells(): Cell[] {\n    const cells = [];\n\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n\n    return cells;\n  }\n\n  getTooltipText({ label, data, series }: { label: string; data: number; series: string }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index: number, item): string {\n    return item.label;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { scaleBand } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\ninterface RectItem {\n  fill: string;\n  height: number;\n  rx: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\n@Component({\n  selector: 'ngx-charts-heat-map',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class HeatMapComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() gradient: boolean;\n  @Input() innerPadding: number | number[] | string | string[] = 8;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() min: number;\n  @Input() max: number;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xDomain: string[];\n  yDomain: string[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  colors: ColorHelper;\n  colorScale: any;\n  transform: string;\n  rects: RectItem[];\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: LegendOptions;\n  scaleType: ScaleType = ScaleType.Linear;\n\n  update(): void {\n    super.update();\n\n    this.formatDates();\n\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.scaleType = getScaleType(this.valueDomain, false);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType as any,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === ScaleType.Linear) {\n      let min = this.min;\n      let max = this.max;\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain(): string[] {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(): string[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n  getDimension(value: string | number | Array<string | number>, index: number = 0, N: number, L: number): number {\n    if (typeof value === 'string') {\n      value = value\n        .replace('[', '')\n        .replace(']', '')\n        .replace('px', '')\n        // tslint:disable-next-line: quotemark\n        .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n    return N / (L / +value + 1);\n  }\n\n  getXScale(): any {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n\n  getYScale(): any {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n\n  getRects(): RectItem[] {\n    const rects = [];\n\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n\n    return rects;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions(): LegendOptions {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n      title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend: boolean = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { HeatMapCellComponent } from './heat-map-cell.component';\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\nimport { HeatMapComponent } from './heat-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n})\nexport class HeatMapModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { Series } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-line]',\n  template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          strokeDasharray: 2000,\n          strokeDashoffset: 2000\n        }),\n        animate(\n          1000,\n          style({\n            strokeDashoffset: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineComponent implements OnChanges {\n  @Input() path: string;\n  @Input() stroke: string;\n  @Input() data: Series;\n  @Input() fill: string = 'none';\n  @Input() animations: boolean = true;\n\n  // @Output() select = new EventEmitter();\n\n  initialized: boolean = false;\n  initialPath: string;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'ngx-charts-line-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineChartComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() autoScale: boolean;\n  @Input() timeline: boolean;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() rangeFillOpacity: number;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showRefLines: boolean = false;\n  @Input() referenceLines: any;\n  @Input() showRefLabels: boolean = true;\n  @Input() xScaleMin: number;\n  @Input() xScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: [number, number];\n  seriesDomain: any;\n  yScale: any;\n  xScale: any;\n  colors: ColorHelper;\n  scaleType: ScaleType;\n  transform: string;\n  clipPath: string;\n  clipPathId: string;\n  areaPath: any;\n  margin: number[] = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  hasRange: boolean; // whether the line has a min-max range around it\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): [number, number] {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): string[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width: number): any {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, width]).domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height: number): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index: number, item): string {\n    return `${item.name}`;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    const opts = {\n      scaleType: this.schemeType as any,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    this.deactivateAll();\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll(): void {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { area, line } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { Gradient } from '../common/types/gradient.interface';\n\n@Component({\n  selector: 'g[ngx-charts-line-series]',\n  template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineSeriesComponent implements OnChanges {\n  @Input() data: Series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() scaleType: ScaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() hasRange: boolean;\n  @Input() animations: boolean = true;\n\n  path: string;\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: Gradient[];\n  areaGradientStops: Gradient[];\n  stroke: string;\n\n  barOrientation = BarOrientation;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const data = this.sortData(this.data.series);\n\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator(): any {\n    return line<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === ScaleType.Time) {\n          value = this.xScale(label);\n        } else if (this.scaleType === ScaleType.Linear) {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  getRangeGenerator(): any {\n    return area<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === ScaleType.Time) {\n          value = this.xScale(label);\n        } else if (this.scaleType === ScaleType.Linear) {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n      .curve(this.curve);\n  }\n\n  getAreaGenerator(): any {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area<any>()\n      .x(xProperty)\n      .y0(() => this.yScale.range()[0])\n      .y1(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LineComponent } from './line.component';\nimport { LineChartComponent } from './line-chart.component';\nimport { LineSeriesComponent } from './line-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n})\nexport class LineChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveCardinalClosed } from 'd3-shape';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { getScaleType } from '../common/domain.helper';\nimport { isDate } from '../utils/types';\nimport { LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { Orientation } from '../common/types/orientation.enum';\n\nconst twoPI = 2 * Math.PI;\n\n@Component({\n  selector: 'ngx-charts-polar-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: [\n    '../common/base-chart.component.scss',\n    '../pie-chart/pie-chart.component.scss',\n    './polar-chart.component.scss'\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class PolarChartComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() autoScale: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveCardinalClosed;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: ScaleType;\n  @Input() rangeFillOpacity: number = 0.15;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: (o: any) => any;\n  @Input() yAxisTickFormatting: (o: any) => any;\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showSeriesOnHover: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() yAxisMinScale: number = 0;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yAxisDims: ViewDimensions;\n  labelOffset: number;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any; // -> rScale\n  xScale: any; // -> tScale\n  yAxisScale: any; // -> yScale\n  colors: ColorHelper;\n  scaleType: ScaleType;\n  transform: string;\n  transformPlot: string;\n  transformYAxis: string;\n  transformXAxis: string;\n  // series: any; // ???\n  margin: number[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  thetaTicks: any[];\n  radiusTicks: number[];\n  outerRadius: number;\n\n  orientation = Orientation;\n\n  update(): void {\n    super.update();\n\n    this.setDims();\n\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n\n    this.yAxisDims = {\n      ...this.dims,\n      width: halfWidth\n    };\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n\n    const minDistance = 10;\n\n    /* from pie chart, abstract out -*/\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j];\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues(): any[] {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()): any[] {\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n    return values;\n  }\n\n  getYValues(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()): any[] {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n\n    min = Math.max(0, min);\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width: number): any {\n    switch (this.scaleType) {\n      case ScaleType.Time:\n        return scaleTime().range([0, width]).domain(domain);\n      case ScaleType.Linear:\n        const scale = scaleLinear().range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n      default:\n        return scalePoint()\n          .range([0, width - twoPI / domain.length])\n          .padding(0)\n          .domain(domain);\n    }\n  }\n\n  getYScale(domain, height: number): any {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === ScaleType.Ordinal) {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }: { width: number }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }: { height: number }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll(): void {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index: number, item): string {\n    return `${item.name}`;\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { lineRadial } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nimport { escapeLabel } from '../common/label.helper';\nimport { Series, DataItem } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\ninterface PolarChartCircle {\n  color: string;\n  cx: number;\n  cy: number;\n  data: Series;\n  label: string;\n  value: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-polar-series]',\n  template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PolarSeriesComponent implements OnChanges {\n  @Input() name;\n  @Input() data;\n  @Input() xScale; // Theta\n  @Input() yScale; // R\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => string;\n  @Input() gradient: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  path: string;\n  circles: PolarChartCircle[];\n  circleRadius: number = 3;\n\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  seriesColor: string;\n\n  active: boolean;\n  inactive: boolean;\n\n  barOrientation = BarOrientation;\n  placementTypes = PlacementTypes;\n  styleTypes = StyleTypes;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const line = this.getLineGenerator();\n\n    const data = this.sortData(this.data.series);\n\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n\n    this.path = line(data) || '';\n\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d: DataItem) {\n    const label = d.name;\n    if (this.scaleType === ScaleType.Time) {\n      return this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      return this.xScale(Number(label));\n    }\n    return this.xScale(label);\n  }\n\n  getRadius(d: DataItem) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator(): any {\n    return lineRadial<any>()\n      .angle(d => this.getAngle(d))\n      .radius(d => this.getRadius(d))\n      .curve(this.curve);\n  }\n\n  sortData(data: DataItem) {\n    if (this.scaleType === ScaleType.Linear) {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      return sortByTime(data, 'name');\n    }\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry: DataItem): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry: DataItem): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({ label, value }: { label: string; value: number }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === ScaleType.Linear) {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\n@Component({\n  selector: 'ngx-charts-advanced-pie-chart',\n  template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedPieChartComponent extends BaseChartComponent {\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() label: string = 'Total';\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  domain: string[];\n  outerRadius: number;\n  innerRadius: number;\n  transform: string;\n  colors: ColorHelper;\n  legendWidth: number;\n  margin: number[] = [20, 20, 20, 20];\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() nameFormatting: (value: string) => any;\n  @Input() percentageFormatting: (value: number) => any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: (this.width * 4) / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n    this.setColors();\n\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain(): string[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { arc, DefaultArcObject } from 'd3-shape';\n\nimport { trimLabel } from '../common/trim-label.helper';\nimport { TextAnchor } from '../common/types/text-anchor.enum';\nimport { DataItem } from '../models/chart-data.model';\n\nexport interface PieData extends DefaultArcObject {\n  data: DataItem;\n  index: number;\n  pos: [number, number];\n  value: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-pie-label]',\n  template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieLabelComponent implements OnChanges {\n  @Input() data: PieData;\n  @Input() radius: number;\n  @Input() label: string;\n  @Input() color: string;\n  @Input() max: number;\n  @Input() value: number;\n  @Input() explodeSlices: boolean;\n  @Input() animations: boolean = true;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  trimLabel: (label: string, max?: number) => string;\n  line: string;\n  styleTransform: string;\n  attrTransform: string;\n  textTransition: string;\n\n  constructor(@Inject(PLATFORM_ID) public platformId: any) {\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.setTransforms();\n    this.update();\n  }\n\n  setTransforms() {\n    if (isPlatformServer(this.platformId)) {\n      this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = `translate(${this.textX},${this.textY})`;\n      this.textTransition = !this.animations ? null : 'transform 0.75s';\n    } else {\n      const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n      this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n      this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n    }\n  }\n\n  update(): void {\n    let startRadius = this.radius;\n    if (this.explodeSlices) {\n      startRadius = (this.radius * this.value) / this.max;\n    }\n\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n\n    // Calculate innerPos then scale outer position to match label position\n    const innerPos = innerArc.centroid(this.data);\n\n    let scale = this.data.pos[1] / innerPos[1];\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX(): number {\n    return this.data.pos[0];\n  }\n\n  get textY(): number {\n    return this.data.pos[1];\n  }\n\n  textAnchor(): TextAnchor {\n    return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { interpolate } from 'd3-interpolate';\nimport { select } from 'd3-selection';\nimport { arc } from 'd3-shape';\nimport { id } from '../utils/id';\nimport { DataItem } from '../models/chart-data.model';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\n\n@Component({\n  selector: 'g[ngx-charts-pie-arc]',\n  template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieArcComponent implements OnChanges {\n  @Input() fill: string;\n  @Input() startAngle: number = 0;\n  @Input() endAngle: number = Math.PI * 2;\n  @Input() innerRadius: number;\n  @Input() outerRadius: number;\n  @Input() cornerRadius: number = 0;\n  @Input() value: number;\n  @Input() max: number;\n  @Input() data: DataItem;\n  @Input() explodeSlices: boolean = false;\n  @Input() gradient: boolean = false;\n  @Input() animate: boolean = true;\n  @Input() pointerEvents: boolean = true;\n  @Input() isActive: boolean = false;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  barOrientation = BarOrientation;\n\n  element: HTMLElement;\n  path: any;\n  startOpacity: number;\n  radialGradientId: string;\n  gradientFill: string;\n  initialized: boolean = false;\n\n  private _timeout;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getGradient(): string {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents(): string {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update(): void {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc(): any {\n    let outerRadius = this.outerRadius;\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = (this.outerRadius * this.value) / this.max;\n    }\n\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const copyOfD = Object.assign({}, d);\n        copyOfD.endAngle = copyOfD.startAngle;\n        const interpolater = interpolate(copyOfD, copyOfD);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      })\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  updateAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  onClick(): void {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event: MouseEvent): void {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\n@Component({\n  selector: 'ngx-charts-pie-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieChartComponent extends BaseChartComponent {\n  @Input() labels: boolean = false;\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() explodeSlices: boolean = false;\n  @Input() doughnut: boolean = false;\n  @Input() arcWidth: number = 0.25;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: any;\n  @Output() dblclick = new EventEmitter();\n  // optional margins\n  @Input() margins: number[];\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  translation: string;\n  outerRadius: number;\n  innerRadius: number;\n  data: DataItem[];\n  colors: ColorHelper;\n  domain: string[];\n  dims: ViewDimensions;\n  legendOptions: LegendOptions;\n\n  update(): void {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n    this.innerRadius = 0;\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain();\n\n    // sort data according to domain\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain(): string[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem | string): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  getLegendOptions(): LegendOptions {\n    return {\n      scaleType: ScaleType.Ordinal,\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false): void {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false): void {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  private hasNoOptionalMarginsSet(): boolean {\n    return !this.margins || this.margins.length <= 0;\n  }\n}\n","import { scaleBand } from 'd3-scale';\nimport { ViewDimensions } from './types/view-dimension.interface';\nimport { StringOrNumberOrDate } from '../models/chart-data.model';\n\nexport interface GridItem {\n  data: GridData;\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\nexport interface GridData {\n  extra?: any;\n  label: string;\n  name: StringOrNumberOrDate;\n  percent: number;\n  total: number;\n  value: number;\n}\n\nexport function gridSize(dims: ViewDimensions, len: number, minWidth: number): [number, number] {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nexport function gridLayout(\n  dims: ViewDimensions,\n  data: GridData[],\n  minWidth: number,\n  designatedTotal: number\n): GridItem[] {\n  const xScale: any = scaleBand<number>();\n  const yScale: any = scaleBand<number>();\n  const width = dims.width;\n  const height = dims.height;\n\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n\n  const xDomain = [];\n  const yDomain = [];\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n  return res;\n}\n\nfunction getTotal(results: any): number {\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { min } from 'd3-array';\nimport { format } from 'd3-format';\n\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { gridLayout } from '../common/grid-layout.helper';\nimport { formatLabel } from '../common/label.helper';\nimport { DataItem, PieGridDataItem } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\nexport interface PieGridData {\n  data: PieGridDataItem;\n  height: number;\n  width: number;\n  x: number;\n  y: number;\n}\n\n@Component({\n  selector: 'ngx-charts-pie-grid',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridComponent extends BaseChartComponent {\n  @Input() designatedTotal: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => any;\n  @Input() label: string = 'Total';\n  @Input() minWidth: number = 150;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  dims: ViewDimensions;\n  data: PieGridData[];\n  transform: string;\n  series: any[];\n  domain: string[];\n  colorScale: ColorHelper;\n  margin: number[] = [20, 20, 20, 20];\n\n  placementTypes = PlacementTypes;\n  styleTypes = StyleTypes;\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n\n    this.series = this.getSeries();\n    this.setColors();\n\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({ data }): string {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain(): string[] {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries(): any[] {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n\n      let count = 0;\n      const colors = () => {\n        count += 1;\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [\n          d,\n          {\n            data: {\n              other: true,\n              value: total - value,\n              name: d.data.name\n            }\n          }\n        ]\n      };\n    });\n  }\n\n  getTotal(): any {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { pie } from 'd3-shape';\nimport { PieGridDataItem } from '../models/chart-data.model';\nimport { PieGridData } from './pie-grid.component';\n\nexport interface PieArc {\n  animate: boolean;\n  class: string;\n  data: PieGridDataItem;\n  endAngle: number;\n  fill: string;\n  pointerEvents: boolean;\n  startAngle: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-pie-grid-series]',\n  template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() data: PieGridData[];\n  @Input() innerRadius = 70;\n  @Input() outerRadius = 80;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  layout: any;\n  arcs: PieArc[];\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.layout = pie<any, any>()\n      .value(d => d.data.value)\n      .sort(null);\n\n    this.arcs = this.getArcs();\n  }\n\n  getArcs(): PieArc[] {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data): void {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  label(arc): string {\n    return arc.data.name;\n  }\n\n  color(arc): string {\n    return this.colors(this.label(arc));\n  }\n}\n","import {\n  Component,\n  SimpleChanges,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { max } from 'd3-array';\nimport { arc, pie } from 'd3-shape';\nimport { ColorHelper } from '../common/color.helper';\n\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { PieData } from './pie-label.component';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\n@Component({\n  selector: 'g[ngx-charts-pie-series]',\n  template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieSeriesComponent implements OnChanges {\n  @Input() colors: ColorHelper;\n  @Input() series: DataItem[] = [];\n  @Input() dims: ViewDimensions;\n  @Input() innerRadius: number = 60;\n  @Input() outerRadius: number = 80;\n  @Input() explodeSlices: boolean;\n  @Input() showLabels: boolean;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: (o: any) => any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  max: number;\n  data: PieData[];\n\n  placementTypes = PlacementTypes;\n  styleTypes = StyleTypes;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    const pieGenerator = pie<any, any>()\n      .value(d => d.value)\n      .sort(null);\n\n    const arcData = pieGenerator(this.series);\n\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc(): any {\n    const factor = 1.5;\n\n    return arc()\n      .innerRadius(this.outerRadius * factor)\n      .outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData): any {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n        if (!this.labelVisible(b)) {\n          continue;\n        }\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc): boolean {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc): string {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n    return this.label(myArc);\n  }\n\n  label(myArc): string {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc): string {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc): any {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\nimport { PieLabelComponent } from './pie-label.component';\nimport { PieArcComponent } from './pie-arc.component';\nimport { PieChartComponent } from './pie-chart.component';\nimport { PieGridComponent } from './pie-grid.component';\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\nimport { PieSeriesComponent } from './pie-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ],\n  exports: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ]\n})\nexport class PieChartModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { PolarChartComponent } from './polar-chart.component';\nimport { PolarSeriesComponent } from './polar-series.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { LineChartModule } from '../line-chart/line-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\n  declarations: [PolarChartComponent, PolarSeriesComponent],\n  exports: [PolarChartComponent, PolarSeriesComponent]\n})\nexport class PolarChartModule {}\n","export function calculateTextWidth(fontFamilyKey: {}, text: string, defaultWidth = 8) {\n  return text.split('').reduce((acc, curr) => {\n    const width = fontFamilyKey[curr] || defaultWidth;\n    return acc + width;\n  }, 0);\n}\n","export const VERDANA_FONT_WIDTHS_16_PX = {\n  '0': 10,\n  '1': 10,\n  '2': 10,\n  '3': 10,\n  '4': 10,\n  '5': 10,\n  '6': 10,\n  '7': 10,\n  '8': 10,\n  '9': 10,\n  A: 11,\n  B: 11,\n  C: 11,\n  D: 12,\n  E: 10,\n  F: 9,\n  G: 12,\n  H: 12,\n  I: 7,\n  J: 7,\n  K: 11,\n  L: 9,\n  M: 13,\n  N: 12,\n  O: 13,\n  P: 10,\n  Q: 13,\n  R: 11,\n  S: 11,\n  T: 10,\n  U: 12,\n  V: 11,\n  W: 16,\n  X: 11,\n  Y: 10,\n  Z: 11,\n  a: 10,\n  b: 10,\n  c: 8,\n  d: 10,\n  e: 10,\n  f: 6,\n  g: 10,\n  h: 10,\n  i: 4,\n  j: 6,\n  k: 9,\n  l: 4,\n  m: 16,\n  n: 10,\n  o: 10,\n  p: 10,\n  q: 10,\n  r: 7,\n  s: 8,\n  t: 6,\n  u: 10,\n  v: 9,\n  w: 13,\n  x: 9,\n  y: 9,\n  z: 8,\n  '!': 6,\n  '@': 16,\n  '#': 13,\n  $: 10,\n  '%': 17,\n  '^': 13,\n  '&': 12,\n  '*': 10,\n  '(': 7,\n  ')': 7,\n  _: 10,\n  '-': 7,\n  '+': 13,\n  '=': 13,\n  ',': 6,\n  '.': 6,\n  '/': 7,\n  \"'\": 4,\n  ':': 7,\n  '|': 7,\n  '?': 9,\n  ';': 7,\n  '<': 13,\n  '>': 13\n};\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  NgZone,\n  OnDestroy,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { roundedRect } from '../common/shape.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { decimalChecker, count } from '../common/count/count.helper';\nimport { GridData } from '../common/grid-layout.helper';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { calculateTextWidth } from '../utils/calculate-width';\nimport { VERDANA_FONT_WIDTHS_16_PX } from '../common/constants/font-widths';\n\n@Component({\n  selector: 'g[ngx-charts-card]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardComponent implements OnChanges, OnDestroy {\n  @Input() color: string;\n  @Input() bandColor: string;\n  @Input() textColor: string;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() label: string;\n  @Input() data: GridData;\n  @Input() medianSize: number;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\n\n  element: HTMLElement;\n  value: string = '';\n  transform: string;\n  formattedLabel: string;\n  cardWidth: number;\n  cardHeight: number;\n  textWidth: number;\n  textFontSize: number = 12;\n  textTransform: string = '';\n  initialized: boolean = false;\n  animationReq: number;\n\n  bandHeight: number = 10;\n  transformBand: string;\n  textPadding: number[] = [10, 20, 5, 20];\n  labelFontSize: number = 15;\n\n  bandPath: string;\n\n  constructor(\n    element: ElementRef,\n    private cd: ChangeDetectorRef,\n    private zone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      cancelAnimationFrame(this.animationReq);\n    }\n  }\n\n  update(): void {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n\n      this.label = this.label ? this.label : (this.data.name as any);\n\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n\n      const value = hasValue ? valueFormatting(cardData) : '';\n\n      this.value = this.paddedValue(value);\n      this.setPadding();\n\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n\n      setTimeout(() => {\n        if (isPlatformBrowser(this.platformId)) {\n          this.scaleText();\n        }\n        this.value = value;\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value: string): string {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n    return value;\n  }\n\n  startCount(): void {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({ value, finished }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText(): void {\n    this.zone.run(() => {\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  scaleTextSSR() {\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n    const height = 18;\n    const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n    const availableWidth = this.cardWidth - 2 * textPadding;\n    const availableHeight = this.cardHeight / 3;\n\n    const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n\n    this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n    this.labelFontSize = Math.min(this.textFontSize, 15);\n\n    this.setPadding();\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n}\n","import * as d3_color from 'd3-color';\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nexport function hexToRgb(value: string): any {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nexport function invertColor(value: string): string {\n  const color = d3_color.rgb(value);\n  const { r, g, b, opacity } = color;\n  if (opacity === 0) {\n    return color.toString();\n  }\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n\n  return shadeRGBColor(color, depth);\n}\n\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nexport function shadeRGBColor({ r, g, b }, percent: number): string {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n\n  return `rgb(${r}, ${g}, ${b})`;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { invertColor } from '../utils/color-utils';\nimport { GridItem, GridData } from '../common/grid-layout.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\nexport interface CardModel extends GridItem {\n  color: string;\n  tooltipText: string;\n  textColor: string;\n  bandColor: string;\n  label: string;\n}\n\n@Component({\n  selector: 'g[ngx-charts-card-series]',\n  template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardSeriesComponent implements OnChanges {\n  @Input() data: CardModel[];\n  @Input() dims: ViewDimensions;\n  @Input() colors: ColorHelper;\n  @Input() innerPadding: number = 15;\n\n  @Input() cardColor: string;\n  @Input() bandColor: string;\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\n  @Input() textColor: string;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cards: CardModel[];\n  emptySlots: any[];\n  medianSize: number;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data\n        .map(d => {\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n          return hasValue\n            ? valueFormatting({\n                data: d.data,\n                label: d ? d.data.name : '',\n                value: d && d.data ? d.data.value : ''\n              }).length\n            : 0;\n        })\n        .sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards(): CardModel[] {\n    const yPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n\n    return this.data.map((d, index) => {\n      let label = d.data.name as any;\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card): string {\n    return card.label;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\nimport { CardModel } from './card-series.component';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\n@Component({\n  selector: 'ngx-charts-number-card',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberCardComponent extends BaseChartComponent {\n  @Input() cardColor: string;\n  @Input() bandColor: string;\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\n  @Input() innerPadding: number = 15;\n  @Input() textColor: string;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() designatedTotal: number;\n\n  dims: ViewDimensions;\n  data: CardModel[];\n  colors: ColorHelper;\n  transform: string;\n  domain: any[];\n  margin: number[] = [10, 10, 10, 10];\n\n  get clickable(): boolean {\n    return !!this.select.observers.length;\n  }\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({ value: null });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal) as any;\n  }\n\n  getDomain(): string[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { CardComponent } from './card.component';\nimport { CardSeriesComponent } from './card-series.component';\nimport { NumberCardComponent } from './number-card.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n})\nexport class NumberCardModule {}\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { select } from 'd3-selection';\nimport { invertColor } from '../utils/color-utils';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\nimport { DataItem } from '../models/chart-data.model';\nimport { Gradient } from '../common/types/gradient.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell]',\n  template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellComponent implements OnChanges {\n  @Input() data: DataItem;\n  @Input() fill: string;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() label: string;\n  @Input() value: any;\n  // @Input() valueType;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  gradientStops: Gradient[];\n  gradientId: string;\n  gradientUrl: string;\n\n  element: HTMLElement;\n  transform: string;\n  formattedLabel: string;\n  formattedValue: string;\n  initialized: boolean = false;\n\n  orientation = BarOrientation;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update(): void {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n\n    this.animateToCurrentForm();\n  }\n\n  getTextColor(): string {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('opacity', 1)\n        .attr('x', this.x)\n        .attr('y', this.y)\n        .attr('width', this.width)\n        .attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops(): Gradient[] {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: 0.3\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n}\n","import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\n\ninterface TreeMapCell {\n  data: DataItem;\n  fill: string;\n  height: number;\n  label: string;\n  value: any;\n  width: number;\n  x: number;\n  y: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellSeriesComponent implements OnChanges {\n  @Input() data: any; // type this\n  @Input() dims: ViewDimensions;\n  @Input() colors: ColorHelper;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cells: TreeMapCell[];\n  styleTypes = StyleTypes;\n  placementTypes = PlacementTypes;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.cells = this.getCells();\n  }\n\n  getCells(): TreeMapCell[] {\n    return this.data.children\n      .filter(d => {\n        return d.depth === 1;\n      })\n      .map((d, index) => {\n        const label = d.id;\n\n        return {\n          data: d.data,\n          x: d.x0,\n          y: d.y0,\n          width: d.x1 - d.x0,\n          height: d.y1 - d.y0,\n          fill: this.colors.getColor(label),\n          label,\n          value: d.value\n        };\n      });\n  }\n\n  getTooltipText({ label, value }: { label: any; value: any }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { treemap, stratify } from 'd3-hierarchy';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\n@Component({\n  selector: 'ngx-charts-tree-map',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['./tree-map.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapComponent extends BaseChartComponent {\n  @Input() results: DataItem[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n\n  @Output() select = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  domain: any;\n  transform: any;\n  colors: ColorHelper;\n  treemap: any;\n  data: DataItem;\n  margin: number[] = [10, 10, 10, 10];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.domain = this.getDomain();\n\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\n\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n\n    const root = stratify<any>()\n      .id(d => {\n        let label = d.name;\n\n        if (label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label.toLocaleString();\n        }\n        return label;\n      })\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n      .sum(d => d.value);\n\n    this.data = this.treemap(root);\n\n    this.setColors();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { TreeMapCellComponent } from './tree-map-cell.component';\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\nimport { TreeMapComponent } from './tree-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n})\nexport class TreeMapModule {}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { calculateTextWidth } from '../utils/calculate-width';\nimport { VERDANA_FONT_WIDTHS_16_PX } from '../common/constants/font-widths';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\nenum ElementType {\n  Value = 'value',\n  Units = 'units'\n}\n\n@Component({\n  selector: 'ngx-charts-linear-gauge',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() value: number = 0;\n  @Input() units: string;\n  @Input() previousValue: number;\n  @Input() valueFormatting: any;\n\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\n\n  dims: ViewDimensions;\n  valueDomain: [number, number];\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n  margin: number[] = [10, 20, 10, 20];\n  transformLine: string;\n\n  valueResizeScale: number = 1;\n  unitsResizeScale: number = 1;\n  valueTextTransform: string = '';\n  valueTranslate: string = '';\n  unitsTextTransform: string = '';\n  unitsTranslate: string = '';\n  displayValue: string;\n  hasPreviousValue: boolean;\n\n  barOrientation = BarOrientation;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText(ElementType.Value);\n      this.scaleText(ElementType.Units);\n    });\n  }\n\n  update(): void {\n    super.update();\n\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.setColors();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR('value');\n      this.scaleTextSSR('units');\n    } else {\n      setTimeout(() => this.scaleText(ElementType.Value), 50);\n      setTimeout(() => this.scaleText(ElementType.Units), 50);\n    }\n  }\n\n  getValueDomain(): [number, number] {\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element: ElementType, repeat: boolean = true): void {\n    let el;\n    let resizeScale;\n    if (element === ElementType.Value) {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const { width, height } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === ElementType.Value) {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n      this.cd.markForCheck();\n      if (repeat && isPlatformBrowser(this.platformId)) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  scaleTextSSR(element) {\n    let resizeScale = 1;\n\n    const value = element === 'value' ? this.displayValue : this.units;\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n    const height = 25;\n\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (element === 'value') {\n      this.valueResizeScale = resizeScale;\n      this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    } else {\n      this.unitsResizeScale = resizeScale;\n      this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  onClick(): void {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n  }\n}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { ArcItem } from './gauge-arc.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\n\ninterface Arcs {\n  backgroundArc: ArcItem;\n  valueArc: ArcItem;\n}\n\n@Component({\n  selector: 'ngx-charts-gauge',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() legend: boolean = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: LegendPosition = LegendPosition.Right;\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() textValue: string;\n  @Input() units: string;\n  @Input() bigSegments: number = 10;\n  @Input() smallSegments: number = 5;\n  @Input() results: any[];\n  @Input() showAxis: boolean = true;\n  @Input() startAngle: number = -120;\n  @Input() angleSpan: number = 240;\n  @Input() activeEntries: any[] = [];\n  @Input() axisTickFormatting: any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() showText: boolean = true;\n\n  // Specify margins\n  @Input() margin: number[];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  @ViewChild('textEl') textEl: ElementRef;\n\n  dims: ViewDimensions;\n  domain: any[];\n  valueDomain: [number, number];\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n\n  outerRadius: number;\n  textRadius: number; // max available radius for the text\n  resizeScale: number = 1;\n  rotation: string = '';\n  textTransform: string = 'scale(1, 1)';\n  cornerRadius: number = 10;\n  arcs: Arcs[];\n  displayValue: string;\n  legendOptions: LegendOptions;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update(): void {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    }\n\n    // make the starting angle positive\n    if (this.startAngle < 0) {\n      this.startAngle = (this.startAngle % 360) + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n\n    this.arcs = this.getArcs();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs(): any[] {\n    const arcs = [];\n\n    const availableRadius = this.outerRadius * 0.7;\n\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n\n    let i = 0;\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n\n      const backgroundArc = {\n        endAngle: (this.angleSpan * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n\n      const valueArc = {\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain(): string[] {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat: boolean = true): void {\n    if (!this.showText) {\n      return;\n    }\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  getLegendOptions(): LegendOptions {\n    return {\n      scaleType: ScaleType.Ordinal,\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index: number, item: Arcs): any {\n    return item.valueArc.data.name;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\n\nexport interface ArcItem {\n  data: DataItem;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n}\n\n@Component({\n  selector: 'g[ngx-charts-gauge-arc]',\n  template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeArcComponent {\n  @Input() backgroundArc: ArcItem;\n  @Input() valueArc: ArcItem;\n  @Input() cornerRadius: number;\n  @Input() colors: ColorHelper;\n  @Input() isActive: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  placementTypes = PlacementTypes;\n  styleTypes = StyleTypes;\n\n  tooltipText(arc: ArcItem): string {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { line } from 'd3-shape';\nimport { TextAnchor } from '../common/types/text-anchor.enum';\n\ninterface Big {\n  line: string;\n  text: string;\n  textAnchor: string;\n  textTransform: string;\n}\n\ninterface Ticks {\n  big: Big[];\n  small: Array<{ line: string }>;\n}\n\n@Component({\n  selector: 'g[ngx-charts-gauge-axis]',\n  template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeAxisComponent implements OnChanges {\n  @Input() bigSegments: number;\n  @Input() smallSegments: number;\n  @Input() min: number;\n  @Input() max: number;\n  @Input() angleSpan: number;\n  @Input() startAngle: number;\n  @Input() radius: number;\n  @Input() valueScale: any;\n  @Input() tickFormatting: any;\n\n  ticks: Ticks;\n  rotationAngle: number;\n  rotate: string = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.update();\n  }\n\n  update(): void {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks(): Ticks {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = (angleDeg * Math.PI) / 180;\n\n      const textAnchor = this.getTextAnchor(angleDeg);\n\n      let skip = false;\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\n\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle: number): TextAnchor {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = TextAnchor.Middle;\n    if (angle > 45 && angle <= 135) {\n      textAnchor = TextAnchor.Start;\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = TextAnchor.End;\n    }\n    return textAnchor;\n  }\n\n  getTickPath(startDistance: number, tickLength: number, angle: number): any {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n\n    const points = [\n      { x: x1, y: y1 },\n      { x: x2, y: y2 }\n    ];\n    const lineGenerator = line<any>()\n      .x(d => d.x)\n      .y(d => d.y);\n    return lineGenerator(points);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LinearGaugeComponent } from './linear-gauge.component';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeArcComponent } from './gauge-arc.component';\nimport { GaugeAxisComponent } from './gauge-axis.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n})\nexport class GaugeModule {}\n","// The export is needed here to generate a valid polyfills.metadata.json file\nexport function ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from './common/chart-common.module';\nimport { AreaChartModule } from './area-chart/area-chart.module';\nimport { BarChartModule } from './bar-chart/bar-chart.module';\nimport { BoxChartModule } from './box-chart/box-chart.module';\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\nimport { HeatMapModule } from './heat-map/heat-map.module';\nimport { LineChartModule } from './line-chart/line-chart.module';\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\nimport { NumberCardModule } from './number-card/number-card.module';\nimport { PieChartModule } from './pie-chart/pie-chart.module';\nimport { TreeMapModule } from './tree-map/tree-map.module';\nimport { GaugeModule } from './gauge/gauge.module';\nimport { ngxChartsPolyfills } from './polyfills';\n\n@NgModule({\n  exports: [\n    ChartCommonModule,\n    AreaChartModule,\n    BarChartModule,\n    BoxChartModule,\n    BubbleChartModule,\n    HeatMapModule,\n    LineChartModule,\n    PolarChartModule,\n    NumberCardModule,\n    PieChartModule,\n    TreeMapModule,\n    GaugeModule\n  ]\n})\nexport class NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n}\n","import { timeFormat } from 'd3-time-format';\n\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\n  return function (label: string): string {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(<any>label);\n    }\n\n    return label.toString();\n  };\n}\n","/*\n * Public API Surface of ngx-charts\n */\n\nexport * from './lib/ngx-charts.module';\n\nexport * from './lib/area-chart/area-chart.module';\nexport * from './lib/area-chart/area-chart.component';\nexport * from './lib/area-chart/area-chart-normalized.component';\nexport * from './lib/area-chart/area-chart-stacked.component';\nexport * from './lib/area-chart/area-series.component';\n\nexport * from './lib/bar-chart/bar-chart.module';\nexport * from './lib/bar-chart/bar.component';\nexport * from './lib/bar-chart/bar-horizontal.component';\nexport * from './lib/bar-chart/bar-horizontal-2d.component';\nexport * from './lib/bar-chart/bar-horizontal-normalized.component';\nexport * from './lib/bar-chart/bar-horizontal-stacked.component';\nexport * from './lib/bar-chart/series-horizontal.component';\nexport * from './lib/bar-chart/bar-label.component';\nexport * from './lib/bar-chart/bar-vertical.component';\nexport * from './lib/bar-chart/bar-vertical-2d.component';\nexport * from './lib/bar-chart/bar-vertical-normalized.component';\nexport * from './lib/bar-chart/bar-vertical-stacked.component';\nexport * from './lib/bar-chart/series-vertical.component';\nexport * from './lib/bar-chart/types/bar.model';\nexport * from './lib/bar-chart/types/bar-chart-type.enum';\nexport * from './lib/bar-chart/types/d0-type.enum';\n\nexport * from './lib/box-chart/box-chart.module';\nexport * from './lib/box-chart/box.component';\nexport * from './lib/box-chart/box-chart.component';\nexport * from './lib/box-chart/box-series.component';\n\nexport * from './lib/bubble-chart/bubble-chart.module';\nexport * from './lib/bubble-chart/bubble-chart.component';\nexport * from './lib/bubble-chart/bubble-chart.utils';\nexport * from './lib/bubble-chart/bubble-series.component';\n\nexport * from './lib/common/chart-common.module';\nexport * from './lib/common/legend/legend.component';\nexport * from './lib/common/legend/scale-legend.component';\nexport * from './lib/common/legend/legend-entry.component';\nexport * from './lib/common/legend/advanced-legend.component';\n\nexport * from './lib/common/tooltip/tooltip.module';\nexport * from './lib/common/tooltip/tooltip.service';\nexport * from './lib/common/tooltip/tooltip.component';\nexport * from './lib/common/tooltip/tooltip.directive';\nexport * from './lib/common/tooltip/style.type';\nexport * from './lib/common/tooltip/show.type';\nexport * from './lib/common/tooltip/position/placement-type.enum';\n\nexport * from './lib/common/types/bar-orientation.enum';\nexport * from './lib/common/types/gradient.interface';\nexport * from './lib/common/types/legend.model';\nexport * from './lib/common/types/orientation.enum';\nexport * from './lib/common/types/scale-type.enum';\nexport * from './lib/common/types/text-anchor.enum';\nexport * from './lib/common/types/view-dimension.interface';\n\nexport * from './lib/common/axes/axes.module';\nexport * from './lib/common/axes/axis-label.component';\nexport * from './lib/common/axes/x-axis.component';\nexport * from './lib/common/axes/x-axis-ticks.component';\nexport * from './lib/common/axes/y-axis.component';\nexport * from './lib/common/axes/y-axis-ticks.component';\nexport * from './lib/common/axes/ticks.helper';\n\nexport * from './lib/common/count/count.directive';\nexport * from './lib/common/count/count.helper';\nexport * from './lib/common/timeline/timeline.component';\nexport * from './lib/common/color.helper';\nexport * from './lib/common/charts/chart.component';\n\nexport * from './lib/common/area.component';\nexport * from './lib/common/base-chart.component';\nexport * from './lib/common/circle.component';\nexport * from './lib/common/circle-series.component';\nexport * from './lib/common/grid-layout.helper';\nexport * from './lib/common/grid-panel.component';\nexport * from './lib/common/grid-panel-series.component';\nexport * from './lib/common/svg-linear-gradient.component';\nexport * from './lib/common/svg-radial-gradient.component';\nexport * from './lib/common/tooltip-area.component';\nexport * from './lib/common/tick-format.helper';\nexport * from './lib/common/trim-label.helper';\nexport * from './lib/common/view-dimensions.helper';\nexport * from './lib/common/label.helper';\nexport * from './lib/common/domain.helper';\n\nexport * from './lib/gauge/gauge.module';\nexport * from './lib/gauge/gauge-arc.component';\nexport * from './lib/gauge/gauge-axis.component';\nexport * from './lib/gauge/gauge.component';\nexport * from './lib/gauge/linear-gauge.component';\n\nexport * from './lib/heat-map/heat-map.module';\nexport * from './lib/heat-map/heat-map.component';\nexport * from './lib/heat-map/heat-map-cell.component';\nexport * from './lib/heat-map/heat-map-cell-series.component';\n\nexport * from './lib/line-chart/line-chart.module';\nexport * from './lib/line-chart/line-chart.component';\nexport * from './lib/line-chart/line.component';\nexport * from './lib/line-chart/line-series.component';\n\nexport * from './lib/models/chart-data.model';\n\nexport * from './lib/number-card/number-card.module';\nexport * from './lib/number-card/number-card.component';\nexport * from './lib/number-card/card.component';\nexport * from './lib/number-card/card-series.component';\n\nexport * from './lib/pie-chart/pie-chart.module';\nexport * from './lib/pie-chart/advanced-pie-chart.component';\nexport * from './lib/pie-chart/pie-chart.component';\nexport * from './lib/pie-chart/pie-arc.component';\nexport * from './lib/pie-chart/pie-grid.component';\nexport * from './lib/pie-chart/pie-grid-series.component';\nexport * from './lib/pie-chart/pie-series.component';\nexport * from './lib/pie-chart/pie-label.component';\n\nexport * from './lib/polar-chart/polar-chart.module';\nexport * from './lib/polar-chart/polar-chart.component';\nexport * from './lib/polar-chart/polar-series.component';\n\nexport * from './lib/tree-map/tree-map.module';\nexport * from './lib/tree-map/tree-map.component';\nexport * from './lib/tree-map/tree-map-cell.component';\nexport * from './lib/tree-map/tree-map-cell-series.component';\n\nexport * from './lib/utils/id';\nexport * from './lib/utils/color-sets';\nexport * from './lib/utils/sort';\nexport * from './lib/utils/throttle';\nexport * from './lib/utils/color-utils';\nexport * from './lib/utils/visibility-observer';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {InjectionRegisteryService as ɵa} from './lib/common/tooltip/injection-registery.service';\nexport {InjectionService as ɵb} from './lib/common/tooltip/injection.service';"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/fesm2015/swimlane-ngx-charts.js b/node_modules/@swimlane/ngx-charts/fesm2015/swimlane-ngx-charts.js
index 0f4d969..dcd5984 100644
--- a/node_modules/@swimlane/ngx-charts/fesm2015/swimlane-ngx-charts.js
+++ b/node_modules/@swimlane/ngx-charts/fesm2015/swimlane-ngx-charts.js
@@ -11150,7 +11150,10 @@ class LineSeriesComponent {
             return value;
         })
             .y(d => this.yScale(d.value))
-            .curve(this.curve);
+            .curve(this.curve)
+            .defined(function (d) {
+                return d.value !== null;
+            });
     }
     getRangeGenerator() {
         return area()
@@ -11170,7 +11173,10 @@ class LineSeriesComponent {
         })
             .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))
             .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))
-            .curve(this.curve);
+            .curve(this.curve)
+            .defined(function (d) {
+                return d.value !== null;
+            });
     }
     getAreaGenerator() {
         const xProperty = d => {
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.d.ts
index 7caed4b..048b45e 100644
--- a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.d.ts
@@ -6,6 +6,7 @@ import { SeriesType } from '../common/circle-series.component';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class AreaChartNormalizedComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -86,4 +87,8 @@ export declare class AreaChartNormalizedComponent extends BaseChartComponent {
     onActivate(item: any): void;
     onDeactivate(item: any): void;
     deactivateAll(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<AreaChartNormalizedComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AreaChartNormalizedComponent, "ngx-charts-area-chart-normalized", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "showGridLines": "showGridLines"; "curve": "curve"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "xAxis": "xAxis"; "yAxis": "yAxis"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "timeline": "timeline"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate", "seriesTooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=area-chart-normalized.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..7caed4b
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,89 @@
+import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { Series } from '../models/chart-data.model';
+import { SeriesType } from '../common/circle-series.component';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class AreaChartNormalizedComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: boolean;
+    yAxis: boolean;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    timeline: any;
+    gradient: any;
+    showGridLines: boolean;
+    curve: any;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    roundDomains: boolean;
+    tooltipDisabled: boolean;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    seriesTooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    scaleType: ScaleType;
+    xDomain: any[];
+    xSet: any[];
+    yDomain: [number, number];
+    seriesDomain: any;
+    xScale: any;
+    yScale: any;
+    transform: string;
+    clipPathId: string;
+    clipPath: string;
+    colors: ColorHelper;
+    margin: number[];
+    tooltipAreas: any[];
+    hoveredVertical: any;
+    xAxisHeight: number;
+    yAxisWidth: number;
+    filteredDomain: any;
+    legendOptions: LegendOptions;
+    seriesType: typeof SeriesType;
+    timelineWidth: any;
+    timelineHeight: number;
+    timelineXScale: any;
+    timelineYScale: any;
+    timelineXDomain: any;
+    timelineTransform: any;
+    timelinePadding: number;
+    update(): void;
+    updateTimeline(): void;
+    getXDomain(): any[];
+    getSeriesDomain(): string[];
+    getXScale(domain: any, width: number): any;
+    getYScale(domain: any, height: number): any;
+    updateDomain(domain: any): void;
+    updateHoveredVertical(item: any): void;
+    hideCircles(): void;
+    onClick(data: any, series?: any): void;
+    trackBy: TrackByFunction<Series>;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(item: any): void;
+    onDeactivate(item: any): void;
+    deactivateAll(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.d.ts.map
new file mode 100644
index 0000000..591fcf0
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-normalized.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"area-chart-normalized.component.d.ts","sources":["area-chart-normalized.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { Series } from '../models/chart-data.model';\nimport { SeriesType } from '../common/circle-series.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class AreaChartNormalizedComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: boolean;\n    yAxis: boolean;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    timeline: any;\n    gradient: any;\n    showGridLines: boolean;\n    curve: any;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    roundDomains: boolean;\n    tooltipDisabled: boolean;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    seriesTooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    scaleType: ScaleType;\n    xDomain: any[];\n    xSet: any[];\n    yDomain: [number, number];\n    seriesDomain: any;\n    xScale: any;\n    yScale: any;\n    transform: string;\n    clipPathId: string;\n    clipPath: string;\n    colors: ColorHelper;\n    margin: number[];\n    tooltipAreas: any[];\n    hoveredVertical: any;\n    xAxisHeight: number;\n    yAxisWidth: number;\n    filteredDomain: any;\n    legendOptions: LegendOptions;\n    seriesType: typeof SeriesType;\n    timelineWidth: any;\n    timelineHeight: number;\n    timelineXScale: any;\n    timelineYScale: any;\n    timelineXDomain: any;\n    timelineTransform: any;\n    timelinePadding: number;\n    update(): void;\n    updateTimeline(): void;\n    getXDomain(): any[];\n    getSeriesDomain(): string[];\n    getXScale(domain: any, width: number): any;\n    getYScale(domain: any, height: number): any;\n    updateDomain(domain: any): void;\n    updateHoveredVertical(item: any): void;\n    hideCircles(): void;\n    onClick(data: any, series?: any): void;\n    trackBy: TrackByFunction<Series>;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(item: any): void;\n    onDeactivate(item: any): void;\n    deactivateAll(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.d.ts
index 686f189..30f13e5 100644
--- a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.d.ts
@@ -5,6 +5,7 @@ import { SeriesType } from '../common/circle-series.component';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
 import { ScaleType } from '../common/types/scale-type.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class AreaChartStackedComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -89,4 +90,8 @@ export declare class AreaChartStackedComponent extends BaseChartComponent {
     onActivate(item: any): void;
     onDeactivate(item: any): void;
     deactivateAll(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<AreaChartStackedComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AreaChartStackedComponent, "ngx-charts-area-chart-stacked", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "timeline": "timeline"; "showGridLines": "showGridLines"; "curve": "curve"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate", "seriesTooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=area-chart-stacked.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..686f189
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,92 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { SeriesType } from '../common/circle-series.component';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+import { ScaleType } from '../common/types/scale-type.enum';
+export declare class AreaChartStackedComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: boolean;
+    yAxis: boolean;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    timeline: boolean;
+    gradient: boolean;
+    showGridLines: boolean;
+    curve: any;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    roundDomains: boolean;
+    tooltipDisabled: boolean;
+    xScaleMin: any;
+    xScaleMax: any;
+    yScaleMin: number;
+    yScaleMax: number;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    seriesTooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    scaleType: ScaleType;
+    xDomain: any[];
+    xSet: any[];
+    yDomain: [number, number];
+    seriesDomain: any;
+    xScale: any;
+    yScale: any;
+    transform: string;
+    clipPathId: string;
+    clipPath: string;
+    colors: ColorHelper;
+    margin: number[];
+    hoveredVertical: any;
+    xAxisHeight: number;
+    yAxisWidth: number;
+    filteredDomain: any;
+    legendOptions: any;
+    timelineWidth: number;
+    timelineHeight: number;
+    timelineXScale: any;
+    timelineYScale: any;
+    timelineXDomain: any;
+    timelineTransform: any;
+    timelinePadding: number;
+    seriesType: typeof SeriesType;
+    update(): void;
+    updateTimeline(): void;
+    getXDomain(): any[];
+    getYDomain(): [number, number];
+    getSeriesDomain(): string[];
+    getXScale(domain: any, width: number): any;
+    getYScale(domain: any, height: number): any;
+    updateDomain(domain: any): void;
+    updateHoveredVertical(item: any): void;
+    hideCircles(): void;
+    onClick(data: any, series?: any): void;
+    trackBy(index: any, item: any): string;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(item: any): void;
+    onDeactivate(item: any): void;
+    deactivateAll(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.d.ts.map
new file mode 100644
index 0000000..bc72bda
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart-stacked.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"area-chart-stacked.component.d.ts","sources":["area-chart-stacked.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { SeriesType } from '../common/circle-series.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\nexport declare class AreaChartStackedComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: boolean;\n    yAxis: boolean;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    timeline: boolean;\n    gradient: boolean;\n    showGridLines: boolean;\n    curve: any;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    roundDomains: boolean;\n    tooltipDisabled: boolean;\n    xScaleMin: any;\n    xScaleMax: any;\n    yScaleMin: number;\n    yScaleMax: number;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    seriesTooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    scaleType: ScaleType;\n    xDomain: any[];\n    xSet: any[];\n    yDomain: [number, number];\n    seriesDomain: any;\n    xScale: any;\n    yScale: any;\n    transform: string;\n    clipPathId: string;\n    clipPath: string;\n    colors: ColorHelper;\n    margin: number[];\n    hoveredVertical: any;\n    xAxisHeight: number;\n    yAxisWidth: number;\n    filteredDomain: any;\n    legendOptions: any;\n    timelineWidth: number;\n    timelineHeight: number;\n    timelineXScale: any;\n    timelineYScale: any;\n    timelineXDomain: any;\n    timelineTransform: any;\n    timelinePadding: number;\n    seriesType: typeof SeriesType;\n    update(): void;\n    updateTimeline(): void;\n    getXDomain(): any[];\n    getYDomain(): [number, number];\n    getSeriesDomain(): string[];\n    getXScale(domain: any, width: number): any;\n    getYScale(domain: any, height: number): any;\n    updateDomain(domain: any): void;\n    updateHoveredVertical(item: any): void;\n    hideCircles(): void;\n    onClick(data: any, series?: any): void;\n    trackBy(index: any, item: any): string;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(item: any): void;\n    onDeactivate(item: any): void;\n    deactivateAll(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.component.d.ts
index 4426465..a997875 100644
--- a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.component.d.ts
@@ -6,6 +6,7 @@ import { Series } from '../models/chart-data.model';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
 import { ScaleType } from '../common/types/scale-type.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class AreaChartComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -93,4 +94,8 @@ export declare class AreaChartComponent extends BaseChartComponent {
     onActivate(item: any): void;
     onDeactivate(item: any): void;
     deactivateAll(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<AreaChartComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AreaChartComponent, "ngx-charts-area-chart", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "baseValue": "baseValue"; "autoScale": "autoScale"; "timeline": "timeline"; "showGridLines": "showGridLines"; "curve": "curve"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate", "seriesTooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=area-chart.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..4426465
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,96 @@
+import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';
+import { CurveFactory } from 'd3-shape';
+import { ColorHelper } from '../common/color.helper';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { Series } from '../models/chart-data.model';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+import { ScaleType } from '../common/types/scale-type.enum';
+export declare class AreaChartComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: boolean;
+    yAxis: boolean;
+    baseValue: any;
+    autoScale: boolean;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    timeline: boolean;
+    gradient: boolean;
+    showGridLines: boolean;
+    curve: CurveFactory;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    roundDomains: boolean;
+    tooltipDisabled: boolean;
+    xScaleMin: any;
+    xScaleMax: any;
+    yScaleMin: number;
+    yScaleMax: number;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    seriesTooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    xSet: any;
+    xDomain: any[];
+    yDomain: [number, number];
+    seriesDomain: string[];
+    xScale: any;
+    yScale: any;
+    transform: string;
+    colors: ColorHelper;
+    clipPathId: string;
+    clipPath: string;
+    scaleType: ScaleType;
+    series: Series;
+    margin: number[];
+    hoveredVertical: any;
+    xAxisHeight: number;
+    yAxisWidth: number;
+    filteredDomain: any;
+    legendOptions: LegendOptions;
+    timelineWidth: number;
+    timelineHeight: number;
+    timelineXScale: any;
+    timelineYScale: any;
+    timelineXDomain: any[];
+    timelineTransform: any;
+    timelinePadding: number;
+    update(): void;
+    updateTimeline(): void;
+    getXDomain(): any[];
+    getYDomain(): [number, number];
+    getSeriesDomain(): string[];
+    getXScale(domain: any, width: number): number;
+    getYScale(domain: [number, number], height: number): any;
+    getScaleType(values: any): ScaleType;
+    updateDomain(domain: any): void;
+    updateHoveredVertical(item: any): void;
+    hideCircles(): void;
+    onClick(data: any, series?: Series): void;
+    trackBy: TrackByFunction<Series>;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(item: any): void;
+    onDeactivate(item: any): void;
+    deactivateAll(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.component.d.ts.map
new file mode 100644
index 0000000..2d563b7
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"area-chart.component.d.ts","sources":["area-chart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';\nimport { CurveFactory } from 'd3-shape';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { Series } from '../models/chart-data.model';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\nexport declare class AreaChartComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: boolean;\n    yAxis: boolean;\n    baseValue: any;\n    autoScale: boolean;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    timeline: boolean;\n    gradient: boolean;\n    showGridLines: boolean;\n    curve: CurveFactory;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    roundDomains: boolean;\n    tooltipDisabled: boolean;\n    xScaleMin: any;\n    xScaleMax: any;\n    yScaleMin: number;\n    yScaleMax: number;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    seriesTooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    xSet: any;\n    xDomain: any[];\n    yDomain: [number, number];\n    seriesDomain: string[];\n    xScale: any;\n    yScale: any;\n    transform: string;\n    colors: ColorHelper;\n    clipPathId: string;\n    clipPath: string;\n    scaleType: ScaleType;\n    series: Series;\n    margin: number[];\n    hoveredVertical: any;\n    xAxisHeight: number;\n    yAxisWidth: number;\n    filteredDomain: any;\n    legendOptions: LegendOptions;\n    timelineWidth: number;\n    timelineHeight: number;\n    timelineXScale: any;\n    timelineYScale: any;\n    timelineXDomain: any[];\n    timelineTransform: any;\n    timelinePadding: number;\n    update(): void;\n    updateTimeline(): void;\n    getXDomain(): any[];\n    getYDomain(): [number, number];\n    getSeriesDomain(): string[];\n    getXScale(domain: any, width: number): number;\n    getYScale(domain: [number, number], height: number): any;\n    getScaleType(values: any): ScaleType;\n    updateDomain(domain: any): void;\n    updateHoveredVertical(item: any): void;\n    hideCircles(): void;\n    onClick(data: any, series?: Series): void;\n    trackBy: TrackByFunction<Series>;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(item: any): void;\n    onDeactivate(item: any): void;\n    deactivateAll(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.module.d.ts
index 4a81294..4dcc47c 100644
--- a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.module.d.ts
@@ -1,2 +1,13 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './area-chart.component';
+import * as ɵngcc2 from './area-chart-normalized.component';
+import * as ɵngcc3 from './area-chart-stacked.component';
+import * as ɵngcc4 from './area-series.component';
+import * as ɵngcc5 from '../common/chart-common.module';
 export declare class AreaChartModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<AreaChartModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AreaChartModule, [typeof ɵngcc1.AreaChartComponent, typeof ɵngcc2.AreaChartNormalizedComponent, typeof ɵngcc3.AreaChartStackedComponent, typeof ɵngcc4.AreaSeriesComponent], [typeof ɵngcc5.ChartCommonModule], [typeof ɵngcc1.AreaChartComponent, typeof ɵngcc2.AreaChartNormalizedComponent, typeof ɵngcc3.AreaChartStackedComponent, typeof ɵngcc4.AreaSeriesComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<AreaChartModule>;
 }
+
+//# sourceMappingURL=area-chart.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..4a81294
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class AreaChartModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.module.d.ts.map
new file mode 100644
index 0000000..809b2dd
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-chart.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"area-chart.module.d.ts","sources":["area-chart.module.d.ts"],"names":[],"mappings":";;;;;;AAAA;;;;AACA","sourcesContent":["export declare class AreaChartModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-series.component.d.ts
index 034e8c4..29bf1a4 100644
--- a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-series.component.d.ts
@@ -3,6 +3,7 @@ import { ColorHelper } from '../common/color.helper';
 import { Gradient } from '../common/types/gradient.interface';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { AreaChartSeries } from '../models/chart-data.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class AreaSeriesComponent implements OnChanges {
     data: AreaChartSeries;
     xScale: any;
@@ -27,4 +28,8 @@ export declare class AreaSeriesComponent implements OnChanges {
     updateGradient(): void;
     isActive(entry: any): boolean;
     isInactive(entry: any): boolean;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<AreaSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AreaSeriesComponent, "g[ngx-charts-area-series]", never, { "baseValue": "baseValue"; "stacked": "stacked"; "normalized": "normalized"; "animations": "animations"; "data": "data"; "xScale": "xScale"; "yScale": "yScale"; "colors": "colors"; "scaleType": "scaleType"; "gradient": "gradient"; "curve": "curve"; "activeEntries": "activeEntries"; }, { "select": "select"; }, never, never>;
 }
+
+//# sourceMappingURL=area-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..034e8c4
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,30 @@
+import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { Gradient } from '../common/types/gradient.interface';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { AreaChartSeries } from '../models/chart-data.model';
+export declare class AreaSeriesComponent implements OnChanges {
+    data: AreaChartSeries;
+    xScale: any;
+    yScale: any;
+    baseValue: any;
+    colors: ColorHelper;
+    scaleType: ScaleType;
+    stacked: boolean;
+    normalized: boolean;
+    gradient: boolean;
+    curve: any;
+    activeEntries: any[];
+    animations: boolean;
+    select: EventEmitter<any>;
+    opacity: number;
+    path: string;
+    startingPath: string;
+    hasGradient: boolean;
+    gradientStops: Gradient[];
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    updateGradient(): void;
+    isActive(entry: any): boolean;
+    isInactive(entry: any): boolean;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/area-chart/area-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-series.component.d.ts.map
new file mode 100644
index 0000000..7c26a39
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/area-chart/area-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"area-series.component.d.ts","sources":["area-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { Gradient } from '../common/types/gradient.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { AreaChartSeries } from '../models/chart-data.model';\nexport declare class AreaSeriesComponent implements OnChanges {\n    data: AreaChartSeries;\n    xScale: any;\n    yScale: any;\n    baseValue: any;\n    colors: ColorHelper;\n    scaleType: ScaleType;\n    stacked: boolean;\n    normalized: boolean;\n    gradient: boolean;\n    curve: any;\n    activeEntries: any[];\n    animations: boolean;\n    select: EventEmitter<any>;\n    opacity: number;\n    path: string;\n    startingPath: string;\n    hasGradient: boolean;\n    gradientStops: Gradient[];\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    updateGradient(): void;\n    isActive(entry: any): boolean;\n    isInactive(entry: any): boolean;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.d.ts
index f12348f..3bd9463 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.d.ts
@@ -1,2 +1,21 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './bar.component';
+import * as ɵngcc2 from './bar-horizontal.component';
+import * as ɵngcc3 from './bar-horizontal-2d.component';
+import * as ɵngcc4 from './bar-horizontal-normalized.component';
+import * as ɵngcc5 from './bar-horizontal-stacked.component';
+import * as ɵngcc6 from './bar-vertical.component';
+import * as ɵngcc7 from './bar-vertical-2d.component';
+import * as ɵngcc8 from './bar-vertical-normalized.component';
+import * as ɵngcc9 from './bar-vertical-stacked.component';
+import * as ɵngcc10 from './bar-label.component';
+import * as ɵngcc11 from './series-horizontal.component';
+import * as ɵngcc12 from './series-vertical.component';
+import * as ɵngcc13 from '../common/chart-common.module';
 export declare class BarChartModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarChartModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<BarChartModule, [typeof ɵngcc1.BarComponent, typeof ɵngcc2.BarHorizontalComponent, typeof ɵngcc3.BarHorizontal2DComponent, typeof ɵngcc4.BarHorizontalNormalizedComponent, typeof ɵngcc5.BarHorizontalStackedComponent, typeof ɵngcc6.BarVerticalComponent, typeof ɵngcc7.BarVertical2DComponent, typeof ɵngcc8.BarVerticalNormalizedComponent, typeof ɵngcc9.BarVerticalStackedComponent, typeof ɵngcc10.BarLabelComponent, typeof ɵngcc11.SeriesHorizontal, typeof ɵngcc12.SeriesVerticalComponent], [typeof ɵngcc13.ChartCommonModule], [typeof ɵngcc1.BarComponent, typeof ɵngcc2.BarHorizontalComponent, typeof ɵngcc3.BarHorizontal2DComponent, typeof ɵngcc4.BarHorizontalNormalizedComponent, typeof ɵngcc5.BarHorizontalStackedComponent, typeof ɵngcc6.BarVerticalComponent, typeof ɵngcc7.BarVertical2DComponent, typeof ɵngcc8.BarVerticalNormalizedComponent, typeof ɵngcc9.BarVerticalStackedComponent, typeof ɵngcc10.BarLabelComponent, typeof ɵngcc11.SeriesHorizontal, typeof ɵngcc12.SeriesVerticalComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<BarChartModule>;
 }
+
+//# sourceMappingURL=bar-chart.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..f12348f
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class BarChartModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.d.ts.map
new file mode 100644
index 0000000..8796f3c
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-chart.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar-chart.module.d.ts","sources":["bar-chart.module.d.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA","sourcesContent":["export declare class BarChartModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.d.ts
index 0d700b1..65a55bd 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.d.ts
@@ -6,6 +6,7 @@ import { ScaleType } from '../common/types/scale-type.enum';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class BarHorizontal2DComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -77,4 +78,8 @@ export declare class BarHorizontal2DComponent extends BaseChartComponent {
     onDataLabelMaxWidthChanged(event: any, groupIndex: number): void;
     onActivate(event: any, group: DataItem, fromLegend?: boolean): void;
     onDeactivate(event: any, group: DataItem, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarHorizontal2DComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarHorizontal2DComponent, "ngx-charts-bar-horizontal-2d", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "tooltipDisabled": "tooltipDisabled"; "showGridLines": "showGridLines"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "groupPadding": "groupPadding"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "roundEdges": "roundEdges"; "showDataLabel": "showDataLabel"; "noBarWhenZero": "noBarWhenZero"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "xScaleMax": "xScaleMax"; "dataLabelFormatting": "dataLabelFormatting"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=bar-horizontal-2d.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..0d700b1
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,80 @@
+import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { DataItem } from '../models/chart-data.model';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+export declare class BarHorizontal2DComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: any;
+    yAxis: any;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    tooltipDisabled: boolean;
+    gradient: boolean;
+    showGridLines: boolean;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    groupPadding: number;
+    barPadding: number;
+    roundDomains: boolean;
+    roundEdges: boolean;
+    xScaleMax: number;
+    showDataLabel: boolean;
+    dataLabelFormatting: any;
+    noBarWhenZero: boolean;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    groupDomain: string[];
+    innerDomain: string[];
+    valueDomain: [number, number];
+    groupScale: any;
+    innerScale: any;
+    valueScale: any;
+    transform: string;
+    colors: ColorHelper;
+    margin: number[];
+    xAxisHeight: number;
+    yAxisWidth: number;
+    legendOptions: LegendOptions;
+    dataLabelMaxWidth: any;
+    barOrientation: typeof BarOrientation;
+    update(): void;
+    getGroupScale(): any;
+    getInnerScale(): any;
+    getValueScale(): any;
+    getGroupDomain(): string[];
+    getInnerDomain(): string[];
+    getValueDomain(): [number, number];
+    groupTransform(group: DataItem): string;
+    onClick(data: any, group?: DataItem): void;
+    trackBy: TrackByFunction<DataItem>;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onDataLabelMaxWidthChanged(event: any, groupIndex: number): void;
+    onActivate(event: any, group: DataItem, fromLegend?: boolean): void;
+    onDeactivate(event: any, group: DataItem, fromLegend?: boolean): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.d.ts.map
new file mode 100644
index 0000000..6d246cc
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-2d.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar-horizontal-2d.component.d.ts","sources":["bar-horizontal-2d.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nexport declare class BarHorizontal2DComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: any;\n    yAxis: any;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    tooltipDisabled: boolean;\n    gradient: boolean;\n    showGridLines: boolean;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    groupPadding: number;\n    barPadding: number;\n    roundDomains: boolean;\n    roundEdges: boolean;\n    xScaleMax: number;\n    showDataLabel: boolean;\n    dataLabelFormatting: any;\n    noBarWhenZero: boolean;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    groupDomain: string[];\n    innerDomain: string[];\n    valueDomain: [number, number];\n    groupScale: any;\n    innerScale: any;\n    valueScale: any;\n    transform: string;\n    colors: ColorHelper;\n    margin: number[];\n    xAxisHeight: number;\n    yAxisWidth: number;\n    legendOptions: LegendOptions;\n    dataLabelMaxWidth: any;\n    barOrientation: typeof BarOrientation;\n    update(): void;\n    getGroupScale(): any;\n    getInnerScale(): any;\n    getValueScale(): any;\n    getGroupDomain(): string[];\n    getInnerDomain(): string[];\n    getValueDomain(): [number, number];\n    groupTransform(group: DataItem): string;\n    onClick(data: any, group?: DataItem): void;\n    trackBy: TrackByFunction<DataItem>;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onDataLabelMaxWidthChanged(event: any, groupIndex: number): void;\n    onActivate(event: any, group: DataItem, fromLegend?: boolean): void;\n    onDeactivate(event: any, group: DataItem, fromLegend?: boolean): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.d.ts
index 01d03cb..3192f00 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.d.ts
@@ -6,6 +6,7 @@ import { BarChartType } from './types/bar-chart-type.enum';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class BarHorizontalNormalizedComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -67,4 +68,8 @@ export declare class BarHorizontalNormalizedComponent extends BaseChartComponent
     }): void;
     onActivate(event: any, group: Series, fromLegend?: boolean): void;
     onDeactivate(event: any, group: Series, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarHorizontalNormalizedComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarHorizontalNormalizedComponent, "ngx-charts-bar-horizontal-normalized", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "tooltipDisabled": "tooltipDisabled"; "showGridLines": "showGridLines"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "noBarWhenZero": "noBarWhenZero"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=bar-horizontal-normalized.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..01d03cb
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,70 @@
+import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { Series } from '../models/chart-data.model';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { BarChartType } from './types/bar-chart-type.enum';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class BarHorizontalNormalizedComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: any;
+    yAxis: any;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    tooltipDisabled: boolean;
+    gradient: boolean;
+    showGridLines: boolean;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    barPadding: number;
+    roundDomains: boolean;
+    noBarWhenZero: boolean;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    groupDomain: string[];
+    innerDomain: string[];
+    valueDomain: [number, number];
+    xScale: any;
+    yScale: any;
+    transform: string;
+    colors: ColorHelper;
+    margin: number[];
+    xAxisHeight: number;
+    yAxisWidth: number;
+    legendOptions: LegendOptions;
+    barChartType: typeof BarChartType;
+    update(): void;
+    getGroupDomain(): string[];
+    getInnerDomain(): string[];
+    getYScale(): any;
+    getXScale(): any;
+    groupTransform(group: Series): string;
+    onClick(data: any, group?: Series): void;
+    trackBy: TrackByFunction<Series>;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(event: any, group: Series, fromLegend?: boolean): void;
+    onDeactivate(event: any, group: Series, fromLegend?: boolean): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.d.ts.map
new file mode 100644
index 0000000..9022616
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-normalized.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar-horizontal-normalized.component.d.ts","sources":["bar-horizontal-normalized.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class BarHorizontalNormalizedComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: any;\n    yAxis: any;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    tooltipDisabled: boolean;\n    gradient: boolean;\n    showGridLines: boolean;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    barPadding: number;\n    roundDomains: boolean;\n    noBarWhenZero: boolean;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    groupDomain: string[];\n    innerDomain: string[];\n    valueDomain: [number, number];\n    xScale: any;\n    yScale: any;\n    transform: string;\n    colors: ColorHelper;\n    margin: number[];\n    xAxisHeight: number;\n    yAxisWidth: number;\n    legendOptions: LegendOptions;\n    barChartType: typeof BarChartType;\n    update(): void;\n    getGroupDomain(): string[];\n    getInnerDomain(): string[];\n    getYScale(): any;\n    getXScale(): any;\n    groupTransform(group: Series): string;\n    onClick(data: any, group?: Series): void;\n    trackBy: TrackByFunction<Series>;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(event: any, group: Series, fromLegend?: boolean): void;\n    onDeactivate(event: any, group: Series, fromLegend?: boolean): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.d.ts
index 634df6c..4b4a46c 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.d.ts
@@ -6,6 +6,7 @@ import { BarChartType } from './types/bar-chart-type.enum';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class BarHorizontalStackedComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -73,4 +74,8 @@ export declare class BarHorizontalStackedComponent extends BaseChartComponent {
     onDataLabelMaxWidthChanged(event: any, groupIndex: number): void;
     onActivate(event: any, group: Series, fromLegend?: boolean): void;
     onDeactivate(event: any, group: Series, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarHorizontalStackedComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarHorizontalStackedComponent, "ngx-charts-bar-horizontal-stacked", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "tooltipDisabled": "tooltipDisabled"; "showGridLines": "showGridLines"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "showDataLabel": "showDataLabel"; "noBarWhenZero": "noBarWhenZero"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "xScaleMax": "xScaleMax"; "dataLabelFormatting": "dataLabelFormatting"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=bar-horizontal-stacked.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..634df6c
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,76 @@
+import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { Series } from '../models/chart-data.model';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { BarChartType } from './types/bar-chart-type.enum';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class BarHorizontalStackedComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: any;
+    yAxis: any;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    tooltipDisabled: boolean;
+    gradient: boolean;
+    showGridLines: boolean;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    barPadding: number;
+    roundDomains: boolean;
+    xScaleMax: number;
+    showDataLabel: boolean;
+    dataLabelFormatting: any;
+    noBarWhenZero: boolean;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    groupDomain: string[];
+    innerDomain: string[];
+    valueDomain: [number, number];
+    xScale: any;
+    yScale: any;
+    transform: string;
+    colors: ColorHelper;
+    margin: number[];
+    xAxisHeight: number;
+    yAxisWidth: number;
+    legendOptions: LegendOptions;
+    dataLabelMaxWidth: any;
+    barChartType: typeof BarChartType;
+    update(): void;
+    getGroupDomain(): string[];
+    getInnerDomain(): string[];
+    getValueDomain(): [number, number];
+    getYScale(): any;
+    getXScale(): any;
+    groupTransform(group: Series): string;
+    onClick(data: any, group?: Series): void;
+    trackBy: TrackByFunction<Series>;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onDataLabelMaxWidthChanged(event: any, groupIndex: number): void;
+    onActivate(event: any, group: Series, fromLegend?: boolean): void;
+    onDeactivate(event: any, group: Series, fromLegend?: boolean): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.d.ts.map
new file mode 100644
index 0000000..167e390
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal-stacked.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar-horizontal-stacked.component.d.ts","sources":["bar-horizontal-stacked.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class BarHorizontalStackedComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: any;\n    yAxis: any;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    tooltipDisabled: boolean;\n    gradient: boolean;\n    showGridLines: boolean;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    barPadding: number;\n    roundDomains: boolean;\n    xScaleMax: number;\n    showDataLabel: boolean;\n    dataLabelFormatting: any;\n    noBarWhenZero: boolean;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    groupDomain: string[];\n    innerDomain: string[];\n    valueDomain: [number, number];\n    xScale: any;\n    yScale: any;\n    transform: string;\n    colors: ColorHelper;\n    margin: number[];\n    xAxisHeight: number;\n    yAxisWidth: number;\n    legendOptions: LegendOptions;\n    dataLabelMaxWidth: any;\n    barChartType: typeof BarChartType;\n    update(): void;\n    getGroupDomain(): string[];\n    getInnerDomain(): string[];\n    getValueDomain(): [number, number];\n    getYScale(): any;\n    getXScale(): any;\n    groupTransform(group: Series): string;\n    onClick(data: any, group?: Series): void;\n    trackBy: TrackByFunction<Series>;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onDataLabelMaxWidthChanged(event: any, groupIndex: number): void;\n    onActivate(event: any, group: Series, fromLegend?: boolean): void;\n    onDeactivate(event: any, group: Series, fromLegend?: boolean): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.d.ts
index 13e76c9..919ec06 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.d.ts
@@ -4,6 +4,7 @@ import { BaseChartComponent } from '../common/base-chart.component';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class BarHorizontalComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -68,4 +69,8 @@ export declare class BarHorizontalComponent extends BaseChartComponent {
     onDataLabelMaxWidthChanged(event: any): void;
     onActivate(item: any, fromLegend?: boolean): void;
     onDeactivate(item: any, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarHorizontalComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarHorizontalComponent, "ngx-charts-bar-horizontal", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "tooltipDisabled": "tooltipDisabled"; "showGridLines": "showGridLines"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "roundEdges": "roundEdges"; "showDataLabel": "showDataLabel"; "noBarWhenZero": "noBarWhenZero"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "xScaleMax": "xScaleMax"; "xScaleMin": "xScaleMin"; "dataLabelFormatting": "dataLabelFormatting"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=bar-horizontal.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..13e76c9
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,71 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class BarHorizontalComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: any;
+    yAxis: any;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    tooltipDisabled: boolean;
+    gradient: boolean;
+    showGridLines: boolean;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    barPadding: number;
+    roundDomains: boolean;
+    roundEdges: boolean;
+    xScaleMax: number;
+    xScaleMin: number;
+    showDataLabel: boolean;
+    dataLabelFormatting: any;
+    noBarWhenZero: boolean;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    yScale: any;
+    xScale: any;
+    xDomain: [number, number];
+    yDomain: string[];
+    transform: string;
+    colors: ColorHelper;
+    margin: number[];
+    xAxisHeight: number;
+    yAxisWidth: number;
+    legendOptions: LegendOptions;
+    dataLabelMaxWidth: any;
+    update(): void;
+    getXScale(): any;
+    getYScale(): any;
+    getXDomain(): [number, number];
+    getYDomain(): string[];
+    onClick(data: any): void;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onDataLabelMaxWidthChanged(event: any): void;
+    onActivate(item: any, fromLegend?: boolean): void;
+    onDeactivate(item: any, fromLegend?: boolean): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.d.ts.map
new file mode 100644
index 0000000..c7deab9
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-horizontal.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar-horizontal.component.d.ts","sources":["bar-horizontal.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class BarHorizontalComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: any;\n    yAxis: any;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    tooltipDisabled: boolean;\n    gradient: boolean;\n    showGridLines: boolean;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    barPadding: number;\n    roundDomains: boolean;\n    roundEdges: boolean;\n    xScaleMax: number;\n    xScaleMin: number;\n    showDataLabel: boolean;\n    dataLabelFormatting: any;\n    noBarWhenZero: boolean;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    yScale: any;\n    xScale: any;\n    xDomain: [number, number];\n    yDomain: string[];\n    transform: string;\n    colors: ColorHelper;\n    margin: number[];\n    xAxisHeight: number;\n    yAxisWidth: number;\n    legendOptions: LegendOptions;\n    dataLabelMaxWidth: any;\n    update(): void;\n    getXScale(): any;\n    getYScale(): any;\n    getXDomain(): [number, number];\n    getYDomain(): string[];\n    onClick(data: any): void;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onDataLabelMaxWidthChanged(event: any): void;\n    onActivate(item: any, fromLegend?: boolean): void;\n    onDeactivate(item: any, fromLegend?: boolean): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-label.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-label.component.d.ts
index 32c32e8..c8a0476 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-label.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-label.component.d.ts
@@ -1,5 +1,6 @@
 import { OnChanges, SimpleChanges, ElementRef, EventEmitter } from '@angular/core';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class BarLabelComponent implements OnChanges {
     value: any;
     valueFormatting: any;
@@ -22,4 +23,8 @@ export declare class BarLabelComponent implements OnChanges {
     getSize(): any;
     ngAfterViewInit(): void;
     update(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarLabelComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarLabelComponent, "g[ngx-charts-bar-label]", never, { "value": "value"; "valueFormatting": "valueFormatting"; "barX": "barX"; "barY": "barY"; "barWidth": "barWidth"; "barHeight": "barHeight"; "orientation": "orientation"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
 }
+
+//# sourceMappingURL=bar-label.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-label.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-label.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..32c32e8
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-label.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,25 @@
+import { OnChanges, SimpleChanges, ElementRef, EventEmitter } from '@angular/core';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+export declare class BarLabelComponent implements OnChanges {
+    value: any;
+    valueFormatting: any;
+    barX: any;
+    barY: any;
+    barWidth: any;
+    barHeight: any;
+    orientation: BarOrientation;
+    dimensionsChanged: EventEmitter<any>;
+    element: any;
+    x: number;
+    y: number;
+    horizontalPadding: number;
+    verticalPadding: number;
+    formatedValue: string;
+    transform: string;
+    textAnchor: string;
+    constructor(element: ElementRef);
+    ngOnChanges(changes: SimpleChanges): void;
+    getSize(): any;
+    ngAfterViewInit(): void;
+    update(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-label.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-label.component.d.ts.map
new file mode 100644
index 0000000..483035a
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-label.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar-label.component.d.ts","sources":["bar-label.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, SimpleChanges, ElementRef, EventEmitter } from '@angular/core';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nexport declare class BarLabelComponent implements OnChanges {\n    value: any;\n    valueFormatting: any;\n    barX: any;\n    barY: any;\n    barWidth: any;\n    barHeight: any;\n    orientation: BarOrientation;\n    dimensionsChanged: EventEmitter<any>;\n    element: any;\n    x: number;\n    y: number;\n    horizontalPadding: number;\n    verticalPadding: number;\n    formatedValue: string;\n    transform: string;\n    textAnchor: string;\n    constructor(element: ElementRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    getSize(): any;\n    ngAfterViewInit(): void;\n    update(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.d.ts
index dd734c1..612ebcb 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.d.ts
@@ -6,6 +6,7 @@ import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class BarVertical2DComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -78,4 +79,8 @@ export declare class BarVertical2DComponent extends BaseChartComponent {
     }): void;
     onActivate(event: any, group: DataItem, fromLegend?: boolean): void;
     onDeactivate(event: any, group: DataItem, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarVertical2DComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarVertical2DComponent, "ngx-charts-bar-vertical-2d", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "tooltipDisabled": "tooltipDisabled"; "scaleType": "scaleType"; "showGridLines": "showGridLines"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "groupPadding": "groupPadding"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "roundEdges": "roundEdges"; "showDataLabel": "showDataLabel"; "noBarWhenZero": "noBarWhenZero"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "yScaleMax": "yScaleMax"; "dataLabelFormatting": "dataLabelFormatting"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=bar-vertical-2d.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..dd734c1
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,81 @@
+import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { DataItem } from '../models/chart-data.model';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+export declare class BarVertical2DComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: any;
+    yAxis: any;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    tooltipDisabled: boolean;
+    scaleType: ScaleType;
+    gradient: boolean;
+    showGridLines: boolean;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    groupPadding: number;
+    barPadding: number;
+    roundDomains: boolean;
+    roundEdges: boolean;
+    yScaleMax: number;
+    showDataLabel: boolean;
+    dataLabelFormatting: any;
+    noBarWhenZero: boolean;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    groupDomain: string[];
+    innerDomain: string[];
+    valueDomain: [number, number];
+    groupScale: any;
+    innerScale: any;
+    valueScale: any;
+    transform: string;
+    colors: ColorHelper;
+    margin: number[];
+    xAxisHeight: number;
+    yAxisWidth: number;
+    legendOptions: LegendOptions;
+    dataLabelMaxHeight: any;
+    barOrientation: typeof BarOrientation;
+    update(): void;
+    onDataLabelMaxHeightChanged(event: any, groupIndex: number): void;
+    getGroupScale(): any;
+    getInnerScale(): any;
+    getValueScale(): any;
+    getGroupDomain(): string[];
+    getInnerDomain(): string[];
+    getValueDomain(): [number, number];
+    groupTransform(group: DataItem): string;
+    onClick(data: any, group?: DataItem): void;
+    trackBy: TrackByFunction<DataItem>;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(event: any, group: DataItem, fromLegend?: boolean): void;
+    onDeactivate(event: any, group: DataItem, fromLegend?: boolean): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.d.ts.map
new file mode 100644
index 0000000..64689b0
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-2d.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar-vertical-2d.component.d.ts","sources":["bar-vertical-2d.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nexport declare class BarVertical2DComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: any;\n    yAxis: any;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    tooltipDisabled: boolean;\n    scaleType: ScaleType;\n    gradient: boolean;\n    showGridLines: boolean;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    groupPadding: number;\n    barPadding: number;\n    roundDomains: boolean;\n    roundEdges: boolean;\n    yScaleMax: number;\n    showDataLabel: boolean;\n    dataLabelFormatting: any;\n    noBarWhenZero: boolean;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    groupDomain: string[];\n    innerDomain: string[];\n    valueDomain: [number, number];\n    groupScale: any;\n    innerScale: any;\n    valueScale: any;\n    transform: string;\n    colors: ColorHelper;\n    margin: number[];\n    xAxisHeight: number;\n    yAxisWidth: number;\n    legendOptions: LegendOptions;\n    dataLabelMaxHeight: any;\n    barOrientation: typeof BarOrientation;\n    update(): void;\n    onDataLabelMaxHeightChanged(event: any, groupIndex: number): void;\n    getGroupScale(): any;\n    getInnerScale(): any;\n    getValueScale(): any;\n    getGroupDomain(): string[];\n    getInnerDomain(): string[];\n    getValueDomain(): [number, number];\n    groupTransform(group: DataItem): string;\n    onClick(data: any, group?: DataItem): void;\n    trackBy: TrackByFunction<DataItem>;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(event: any, group: DataItem, fromLegend?: boolean): void;\n    onDeactivate(event: any, group: DataItem, fromLegend?: boolean): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.d.ts
index 62e69c5..87680a8 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.d.ts
@@ -6,6 +6,7 @@ import { BarChartType } from './types/bar-chart-type.enum';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class BarVerticalNormalizedComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -67,4 +68,8 @@ export declare class BarVerticalNormalizedComponent extends BaseChartComponent {
     }): void;
     onActivate(event: any, group: Series, fromLegend?: boolean): void;
     onDeactivate(event: any, group: Series, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarVerticalNormalizedComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarVerticalNormalizedComponent, "ngx-charts-bar-vertical-normalized", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "tooltipDisabled": "tooltipDisabled"; "showGridLines": "showGridLines"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "noBarWhenZero": "noBarWhenZero"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=bar-vertical-normalized.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..62e69c5
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,70 @@
+import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { Series } from '../models/chart-data.model';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { BarChartType } from './types/bar-chart-type.enum';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class BarVerticalNormalizedComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: any;
+    yAxis: any;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    tooltipDisabled: boolean;
+    gradient: boolean;
+    showGridLines: boolean;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    barPadding: number;
+    roundDomains: boolean;
+    noBarWhenZero: boolean;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    groupDomain: string[];
+    innerDomain: string[];
+    valueDomain: [number, number];
+    xScale: any;
+    yScale: any;
+    transform: string;
+    colors: ColorHelper;
+    margin: number[];
+    xAxisHeight: number;
+    yAxisWidth: number;
+    legendOptions: LegendOptions;
+    barChartType: typeof BarChartType;
+    update(): void;
+    getGroupDomain(): string[];
+    getInnerDomain(): string[];
+    getXScale(): any;
+    getYScale(): any;
+    groupTransform(group: Series): string;
+    onClick(data: any, group?: Series): void;
+    trackBy: TrackByFunction<Series>;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(event: any, group: Series, fromLegend?: boolean): void;
+    onDeactivate(event: any, group: Series, fromLegend?: boolean): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.d.ts.map
new file mode 100644
index 0000000..f0ec693
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-normalized.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar-vertical-normalized.component.d.ts","sources":["bar-vertical-normalized.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class BarVerticalNormalizedComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: any;\n    yAxis: any;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    tooltipDisabled: boolean;\n    gradient: boolean;\n    showGridLines: boolean;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    barPadding: number;\n    roundDomains: boolean;\n    noBarWhenZero: boolean;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    groupDomain: string[];\n    innerDomain: string[];\n    valueDomain: [number, number];\n    xScale: any;\n    yScale: any;\n    transform: string;\n    colors: ColorHelper;\n    margin: number[];\n    xAxisHeight: number;\n    yAxisWidth: number;\n    legendOptions: LegendOptions;\n    barChartType: typeof BarChartType;\n    update(): void;\n    getGroupDomain(): string[];\n    getInnerDomain(): string[];\n    getXScale(): any;\n    getYScale(): any;\n    groupTransform(group: Series): string;\n    onClick(data: any, group?: Series): void;\n    trackBy: TrackByFunction<Series>;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(event: any, group: Series, fromLegend?: boolean): void;\n    onDeactivate(event: any, group: Series, fromLegend?: boolean): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.d.ts
index dd47508..deef9e0 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.d.ts
@@ -6,6 +6,7 @@ import { BarChartType } from './types/bar-chart-type.enum';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class BarVerticalStackedComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -74,4 +75,8 @@ export declare class BarVerticalStackedComponent extends BaseChartComponent {
     }): void;
     onActivate(event: any, group: any, fromLegend?: boolean): void;
     onDeactivate(event: any, group: Series, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarVerticalStackedComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarVerticalStackedComponent, "ngx-charts-bar-vertical-stacked", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "tooltipDisabled": "tooltipDisabled"; "showGridLines": "showGridLines"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "showDataLabel": "showDataLabel"; "noBarWhenZero": "noBarWhenZero"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "yScaleMax": "yScaleMax"; "dataLabelFormatting": "dataLabelFormatting"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=bar-vertical-stacked.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..dd47508
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,77 @@
+import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { Series } from '../models/chart-data.model';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { BarChartType } from './types/bar-chart-type.enum';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class BarVerticalStackedComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: any;
+    yAxis: any;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    tooltipDisabled: boolean;
+    gradient: boolean;
+    showGridLines: boolean;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    barPadding: number;
+    roundDomains: boolean;
+    yScaleMax: number;
+    showDataLabel: boolean;
+    dataLabelFormatting: any;
+    noBarWhenZero: boolean;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    groupDomain: string[];
+    innerDomain: string[];
+    valueDomain: [number, number];
+    xScale: any;
+    yScale: any;
+    transform: string;
+    tickFormatting: (label: string) => string;
+    colors: ColorHelper;
+    margin: number[];
+    xAxisHeight: number;
+    yAxisWidth: number;
+    legendOptions: LegendOptions;
+    dataLabelMaxHeight: any;
+    barChartType: typeof BarChartType;
+    update(): void;
+    getGroupDomain(): string[];
+    getInnerDomain(): string[];
+    getValueDomain(): [number, number];
+    getXScale(): any;
+    getYScale(): any;
+    onDataLabelMaxHeightChanged(event: any, groupIndex: number): void;
+    groupTransform(group: Series): string;
+    onClick(data: any, group?: Series): void;
+    trackBy: TrackByFunction<Series>;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(event: any, group: any, fromLegend?: boolean): void;
+    onDeactivate(event: any, group: Series, fromLegend?: boolean): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.d.ts.map
new file mode 100644
index 0000000..ae6cf66
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical-stacked.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar-vertical-stacked.component.d.ts","sources":["bar-vertical-stacked.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef, TrackByFunction } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class BarVerticalStackedComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: any;\n    yAxis: any;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    tooltipDisabled: boolean;\n    gradient: boolean;\n    showGridLines: boolean;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    barPadding: number;\n    roundDomains: boolean;\n    yScaleMax: number;\n    showDataLabel: boolean;\n    dataLabelFormatting: any;\n    noBarWhenZero: boolean;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    groupDomain: string[];\n    innerDomain: string[];\n    valueDomain: [number, number];\n    xScale: any;\n    yScale: any;\n    transform: string;\n    tickFormatting: (label: string) => string;\n    colors: ColorHelper;\n    margin: number[];\n    xAxisHeight: number;\n    yAxisWidth: number;\n    legendOptions: LegendOptions;\n    dataLabelMaxHeight: any;\n    barChartType: typeof BarChartType;\n    update(): void;\n    getGroupDomain(): string[];\n    getInnerDomain(): string[];\n    getValueDomain(): [number, number];\n    getXScale(): any;\n    getYScale(): any;\n    onDataLabelMaxHeightChanged(event: any, groupIndex: number): void;\n    groupTransform(group: Series): string;\n    onClick(data: any, group?: Series): void;\n    trackBy: TrackByFunction<Series>;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(event: any, group: any, fromLegend?: boolean): void;\n    onDeactivate(event: any, group: Series, fromLegend?: boolean): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.d.ts
index 45355a2..b7093d2 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.d.ts
@@ -5,6 +5,7 @@ import { DataItem } from '../models/chart-data.model';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class BarVerticalComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -75,4 +76,8 @@ export declare class BarVerticalComponent extends BaseChartComponent {
     onDataLabelMaxHeightChanged(event: any): void;
     onActivate(item: any, fromLegend?: boolean): void;
     onDeactivate(item: any, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarVerticalComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarVerticalComponent, "ngx-charts-bar-vertical", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "tooltipDisabled": "tooltipDisabled"; "showGridLines": "showGridLines"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "barPadding": "barPadding"; "roundDomains": "roundDomains"; "roundEdges": "roundEdges"; "showDataLabel": "showDataLabel"; "noBarWhenZero": "noBarWhenZero"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "yScaleMax": "yScaleMax"; "yScaleMin": "yScaleMin"; "dataLabelFormatting": "dataLabelFormatting"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=bar-vertical.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..45355a2
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,78 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { DataItem } from '../models/chart-data.model';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class BarVerticalComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: any;
+    yAxis: any;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    tooltipDisabled: boolean;
+    gradient: boolean;
+    showGridLines: boolean;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    barPadding: number;
+    roundDomains: boolean;
+    roundEdges: boolean;
+    yScaleMax: number;
+    yScaleMin: number;
+    showDataLabel: boolean;
+    dataLabelFormatting: any;
+    noBarWhenZero: boolean;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    xScale: any;
+    yScale: any;
+    xDomain: any;
+    yDomain: any;
+    transform: string;
+    colors: ColorHelper;
+    margin: number[];
+    xAxisHeight: number;
+    yAxisWidth: number;
+    legendOptions: LegendOptions;
+    dataLabelMaxHeight: any;
+    update(): void;
+    getXScale(): any;
+    getYScale(): any;
+    getXDomain(): any[];
+    getYDomain(): [number, number];
+    onClick(data: DataItem | string): void;
+    setColors(): void;
+    getLegendOptions(): {
+        scaleType: any;
+        colors: any;
+        domain: any[];
+        title: any;
+        position: LegendPosition;
+    };
+    updateYAxisWidth({ width }: {
+        width: any;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: any;
+    }): void;
+    onDataLabelMaxHeightChanged(event: any): void;
+    onActivate(item: any, fromLegend?: boolean): void;
+    onDeactivate(item: any, fromLegend?: boolean): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.d.ts.map
new file mode 100644
index 0000000..5ae21f1
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar-vertical.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar-vertical.component.d.ts","sources":["bar-vertical.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class BarVerticalComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: any;\n    yAxis: any;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    tooltipDisabled: boolean;\n    gradient: boolean;\n    showGridLines: boolean;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    barPadding: number;\n    roundDomains: boolean;\n    roundEdges: boolean;\n    yScaleMax: number;\n    yScaleMin: number;\n    showDataLabel: boolean;\n    dataLabelFormatting: any;\n    noBarWhenZero: boolean;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    xScale: any;\n    yScale: any;\n    xDomain: any;\n    yDomain: any;\n    transform: string;\n    colors: ColorHelper;\n    margin: number[];\n    xAxisHeight: number;\n    yAxisWidth: number;\n    legendOptions: LegendOptions;\n    dataLabelMaxHeight: any;\n    update(): void;\n    getXScale(): any;\n    getYScale(): any;\n    getXDomain(): any[];\n    getYDomain(): [number, number];\n    onClick(data: DataItem | string): void;\n    setColors(): void;\n    getLegendOptions(): {\n        scaleType: any;\n        colors: any;\n        domain: any[];\n        title: any;\n        position: LegendPosition;\n    };\n    updateYAxisWidth({ width }: {\n        width: any;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: any;\n    }): void;\n    onDataLabelMaxHeightChanged(event: any): void;\n    onActivate(item: any, fromLegend?: boolean): void;\n    onDeactivate(item: any, fromLegend?: boolean): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar.component.d.ts
index 3f1b1a7..dad0b73 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar.component.d.ts
@@ -2,6 +2,7 @@ import { ElementRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/cor
 import { DataItem } from '../models/chart-data.model';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
 import { Gradient } from '../common/types/gradient.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class BarComponent implements OnChanges {
     fill: string;
     data: DataItem;
@@ -42,4 +43,8 @@ export declare class BarComponent implements OnChanges {
     onMouseEnter(): void;
     onMouseLeave(): void;
     private checkToHideBar;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BarComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BarComponent, "g[ngx-charts-bar]", never, { "roundEdges": "roundEdges"; "gradient": "gradient"; "offset": "offset"; "isActive": "isActive"; "animations": "animations"; "noBarWhenZero": "noBarWhenZero"; "fill": "fill"; "data": "data"; "width": "width"; "height": "height"; "x": "x"; "y": "y"; "orientation": "orientation"; "stops": "stops"; "ariaLabel": "ariaLabel"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
+
+//# sourceMappingURL=bar.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..3f1b1a7
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,45 @@
+import { ElementRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
+import { DataItem } from '../models/chart-data.model';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+import { Gradient } from '../common/types/gradient.interface';
+export declare class BarComponent implements OnChanges {
+    fill: string;
+    data: DataItem;
+    width: number;
+    height: number;
+    x: number;
+    y: number;
+    orientation: BarOrientation;
+    roundEdges: boolean;
+    gradient: boolean;
+    offset: number;
+    isActive: boolean;
+    stops: Gradient[];
+    animations: boolean;
+    ariaLabel: string;
+    noBarWhenZero: boolean;
+    select: EventEmitter<DataItem>;
+    activate: EventEmitter<DataItem>;
+    deactivate: EventEmitter<DataItem>;
+    element: HTMLElement;
+    path: string;
+    gradientId: string;
+    gradientFill: string;
+    gradientStops: Gradient[];
+    hasGradient: boolean;
+    hideBar: boolean;
+    constructor(element: ElementRef);
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    loadAnimation(): void;
+    updatePathEl(): void;
+    getGradient(): Gradient[];
+    getStartingPath(): string;
+    getPath(): string;
+    getRadius(): number;
+    getStartOpacity(): number;
+    get edges(): boolean[];
+    onMouseEnter(): void;
+    onMouseLeave(): void;
+    private checkToHideBar;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar.component.d.ts.map
new file mode 100644
index 0000000..322a572
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/bar.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bar.component.d.ts","sources":["bar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { DataItem } from '../models/chart-data.model';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { Gradient } from '../common/types/gradient.interface';\nexport declare class BarComponent implements OnChanges {\n    fill: string;\n    data: DataItem;\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n    orientation: BarOrientation;\n    roundEdges: boolean;\n    gradient: boolean;\n    offset: number;\n    isActive: boolean;\n    stops: Gradient[];\n    animations: boolean;\n    ariaLabel: string;\n    noBarWhenZero: boolean;\n    select: EventEmitter<DataItem>;\n    activate: EventEmitter<DataItem>;\n    deactivate: EventEmitter<DataItem>;\n    element: HTMLElement;\n    path: string;\n    gradientId: string;\n    gradientFill: string;\n    gradientStops: Gradient[];\n    hasGradient: boolean;\n    hideBar: boolean;\n    constructor(element: ElementRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    loadAnimation(): void;\n    updatePathEl(): void;\n    getGradient(): Gradient[];\n    getStartingPath(): string;\n    getPath(): string;\n    getRadius(): number;\n    getStartOpacity(): number;\n    get edges(): boolean[];\n    onMouseEnter(): void;\n    onMouseLeave(): void;\n    private checkToHideBar;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.d.ts
index f380541..53a730b 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.d.ts
@@ -7,6 +7,7 @@ import { BarChartType } from './types/bar-chart-type.enum';
 import { Bar } from './types/bar.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class SeriesHorizontal implements OnChanges {
     dims: ViewDimensions;
     type: BarChartType;
@@ -52,4 +53,8 @@ export declare class SeriesHorizontal implements OnChanges {
     trackBy(index: number, bar: Bar): string;
     trackDataLabelBy(index: number, barLabel: any): string;
     click(data: DataItem): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<SeriesHorizontal, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SeriesHorizontal, "g[ngx-charts-series-horizontal]", never, { "type": "type"; "tooltipDisabled": "tooltipDisabled"; "animations": "animations"; "showDataLabel": "showDataLabel"; "noBarWhenZero": "noBarWhenZero"; "dims": "dims"; "series": "series"; "xScale": "xScale"; "yScale": "yScale"; "colors": "colors"; "gradient": "gradient"; "activeEntries": "activeEntries"; "seriesName": "seriesName"; "tooltipTemplate": "tooltipTemplate"; "roundEdges": "roundEdges"; "dataLabelFormatting": "dataLabelFormatting"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; "dataLabelWidthChanged": "dataLabelWidthChanged"; }, never, never>;
 }
+
+//# sourceMappingURL=series-horizontal.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..f380541
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,55 @@
+import { EventEmitter, OnChanges, SimpleChanges, TemplateRef } from '@angular/core';
+import { DataItem, StringOrNumberOrDate } from '../models/chart-data.model';
+import { ColorHelper } from '../common/color.helper';
+import { PlacementTypes } from '../common/tooltip/position';
+import { StyleTypes } from '../common/tooltip/style.type';
+import { BarChartType } from './types/bar-chart-type.enum';
+import { Bar } from './types/bar.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+export declare class SeriesHorizontal implements OnChanges {
+    dims: ViewDimensions;
+    type: BarChartType;
+    series: DataItem[];
+    xScale: any;
+    yScale: any;
+    colors: ColorHelper;
+    tooltipDisabled: boolean;
+    gradient: boolean;
+    activeEntries: DataItem[];
+    seriesName: StringOrNumberOrDate;
+    tooltipTemplate: TemplateRef<any>;
+    roundEdges: boolean;
+    animations: boolean;
+    showDataLabel: boolean;
+    dataLabelFormatting: any;
+    noBarWhenZero: boolean;
+    select: EventEmitter<DataItem>;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    dataLabelWidthChanged: EventEmitter<{
+        size: Event;
+        index: number;
+    }>;
+    tooltipPlacement: PlacementTypes;
+    tooltipType: StyleTypes;
+    bars: Bar[];
+    barsForDataLabels: Array<{
+        x: number;
+        y: number;
+        width: number;
+        height: number;
+        total: number;
+        series: string;
+    }>;
+    barOrientation: typeof BarOrientation;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    updateDataLabels(): void;
+    updateTooltipSettings(): void;
+    isActive(entry: DataItem): boolean;
+    getLabel(dataItem: DataItem): StringOrNumberOrDate;
+    trackBy(index: number, bar: Bar): string;
+    trackDataLabelBy(index: number, barLabel: any): string;
+    click(data: DataItem): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.d.ts.map
new file mode 100644
index 0000000..82999fd
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-horizontal.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"series-horizontal.component.d.ts","sources":["series-horizontal.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, SimpleChanges, TemplateRef } from '@angular/core';\nimport { DataItem, StringOrNumberOrDate } from '../models/chart-data.model';\nimport { ColorHelper } from '../common/color.helper';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { Bar } from './types/bar.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nexport declare class SeriesHorizontal implements OnChanges {\n    dims: ViewDimensions;\n    type: BarChartType;\n    series: DataItem[];\n    xScale: any;\n    yScale: any;\n    colors: ColorHelper;\n    tooltipDisabled: boolean;\n    gradient: boolean;\n    activeEntries: DataItem[];\n    seriesName: StringOrNumberOrDate;\n    tooltipTemplate: TemplateRef<any>;\n    roundEdges: boolean;\n    animations: boolean;\n    showDataLabel: boolean;\n    dataLabelFormatting: any;\n    noBarWhenZero: boolean;\n    select: EventEmitter<DataItem>;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    dataLabelWidthChanged: EventEmitter<{\n        size: Event;\n        index: number;\n    }>;\n    tooltipPlacement: PlacementTypes;\n    tooltipType: StyleTypes;\n    bars: Bar[];\n    barsForDataLabels: Array<{\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        total: number;\n        series: string;\n    }>;\n    barOrientation: typeof BarOrientation;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    updateDataLabels(): void;\n    updateTooltipSettings(): void;\n    isActive(entry: DataItem): boolean;\n    getLabel(dataItem: DataItem): StringOrNumberOrDate;\n    trackBy(index: number, bar: Bar): string;\n    trackDataLabelBy(index: number, barLabel: any): string;\n    click(data: DataItem): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.d.ts
index 2454a92..b1b069b 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.d.ts
@@ -7,6 +7,7 @@ import { BarChartType } from './types/bar-chart-type.enum';
 import { Bar } from './types/bar.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class SeriesVerticalComponent implements OnChanges {
     dims: ViewDimensions;
     type: BarChartType;
@@ -49,4 +50,8 @@ export declare class SeriesVerticalComponent implements OnChanges {
     getLabel(dataItem: DataItem): StringOrNumberOrDate;
     trackBy(index: number, bar: Bar): string;
     trackDataLabelBy(index: number, barLabel: any): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<SeriesVerticalComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SeriesVerticalComponent, "g[ngx-charts-series-vertical]", never, { "type": "type"; "tooltipDisabled": "tooltipDisabled"; "animations": "animations"; "showDataLabel": "showDataLabel"; "noBarWhenZero": "noBarWhenZero"; "dims": "dims"; "series": "series"; "xScale": "xScale"; "yScale": "yScale"; "colors": "colors"; "gradient": "gradient"; "activeEntries": "activeEntries"; "seriesName": "seriesName"; "tooltipTemplate": "tooltipTemplate"; "roundEdges": "roundEdges"; "dataLabelFormatting": "dataLabelFormatting"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; "dataLabelHeightChanged": "dataLabelHeightChanged"; }, never, never>;
 }
+
+//# sourceMappingURL=series-vertical.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..2454a92
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,52 @@
+import { EventEmitter, OnChanges, TemplateRef } from '@angular/core';
+import { DataItem, StringOrNumberOrDate } from '../models/chart-data.model';
+import { PlacementTypes } from '../common/tooltip/position';
+import { StyleTypes } from '../common/tooltip/style.type';
+import { ColorHelper } from '../common/color.helper';
+import { BarChartType } from './types/bar-chart-type.enum';
+import { Bar } from './types/bar.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+export declare class SeriesVerticalComponent implements OnChanges {
+    dims: ViewDimensions;
+    type: BarChartType;
+    series: DataItem[];
+    xScale: any;
+    yScale: any;
+    colors: ColorHelper;
+    gradient: boolean;
+    activeEntries: DataItem[];
+    seriesName: StringOrNumberOrDate;
+    tooltipDisabled: boolean;
+    tooltipTemplate: TemplateRef<any>;
+    roundEdges: boolean;
+    animations: boolean;
+    showDataLabel: boolean;
+    dataLabelFormatting: any;
+    noBarWhenZero: boolean;
+    select: EventEmitter<DataItem>;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    dataLabelHeightChanged: EventEmitter<any>;
+    tooltipPlacement: PlacementTypes;
+    tooltipType: StyleTypes;
+    bars: Bar[];
+    barsForDataLabels: Array<{
+        x: number;
+        y: number;
+        width: number;
+        height: number;
+        total: number;
+        series: string;
+    }>;
+    barOrientation: typeof BarOrientation;
+    ngOnChanges(changes: any): void;
+    update(): void;
+    updateDataLabels(): void;
+    updateTooltipSettings(): void;
+    isActive(entry: DataItem): boolean;
+    onClick(data: DataItem): void;
+    getLabel(dataItem: DataItem): StringOrNumberOrDate;
+    trackBy(index: number, bar: Bar): string;
+    trackDataLabelBy(index: number, barLabel: any): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.d.ts.map
new file mode 100644
index 0000000..e7f7e93
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bar-chart/series-vertical.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"series-vertical.component.d.ts","sources":["series-vertical.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, TemplateRef } from '@angular/core';\nimport { DataItem, StringOrNumberOrDate } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { ColorHelper } from '../common/color.helper';\nimport { BarChartType } from './types/bar-chart-type.enum';\nimport { Bar } from './types/bar.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nexport declare class SeriesVerticalComponent implements OnChanges {\n    dims: ViewDimensions;\n    type: BarChartType;\n    series: DataItem[];\n    xScale: any;\n    yScale: any;\n    colors: ColorHelper;\n    gradient: boolean;\n    activeEntries: DataItem[];\n    seriesName: StringOrNumberOrDate;\n    tooltipDisabled: boolean;\n    tooltipTemplate: TemplateRef<any>;\n    roundEdges: boolean;\n    animations: boolean;\n    showDataLabel: boolean;\n    dataLabelFormatting: any;\n    noBarWhenZero: boolean;\n    select: EventEmitter<DataItem>;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    dataLabelHeightChanged: EventEmitter<any>;\n    tooltipPlacement: PlacementTypes;\n    tooltipType: StyleTypes;\n    bars: Bar[];\n    barsForDataLabels: Array<{\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n        total: number;\n        series: string;\n    }>;\n    barOrientation: typeof BarOrientation;\n    ngOnChanges(changes: any): void;\n    update(): void;\n    updateDataLabels(): void;\n    updateTooltipSettings(): void;\n    isActive(entry: DataItem): boolean;\n    onClick(data: DataItem): void;\n    getLabel(dataItem: DataItem): StringOrNumberOrDate;\n    trackBy(index: number, bar: Bar): string;\n    trackDataLabelBy(index: number, barLabel: any): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.component.d.ts
index 3e92c07..8c2e9eb 100644
--- a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.component.d.ts
@@ -5,6 +5,7 @@ import { BoxChartMultiSeries, BoxChartSeries, IBoxModel, StringOrNumberOrDate }
 import { ScaleLinear, ScaleBand } from 'd3-scale';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
 import { LegendPosition, LegendOptions } from '../common/types/legend.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class BoxChartComponent extends BaseChartComponent {
     /** Show or hide the legend. */
     legend: boolean;
@@ -70,4 +71,8 @@ export declare class BoxChartComponent extends BaseChartComponent {
     onActivate(data: IBoxModel): void;
     onDeactivate(data: IBoxModel): void;
     private getLegendOptions;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BoxChartComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BoxChartComponent, "ngx-charts-box-chart", never, { "legend": "legend"; "legendPosition": "legendPosition"; "legendTitle": "legendTitle"; "showGridLines": "showGridLines"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "roundDomains": "roundDomains"; "roundEdges": "roundEdges"; "strokeColor": "strokeColor"; "strokeWidth": "strokeWidth"; "tooltipDisabled": "tooltipDisabled"; "legendOptionsConfig": "legendOptionsConfig"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=box-chart.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..3e92c07
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,73 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { ColorHelper } from '../common/color.helper';
+import { BoxChartMultiSeries, BoxChartSeries, IBoxModel, StringOrNumberOrDate } from '../models/chart-data.model';
+import { ScaleLinear, ScaleBand } from 'd3-scale';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+import { LegendPosition, LegendOptions } from '../common/types/legend.model';
+export declare class BoxChartComponent extends BaseChartComponent {
+    /** Show or hide the legend. */
+    legend: boolean;
+    legendPosition: LegendPosition;
+    legendTitle: string;
+    /** I think it is better to handle legend options as single Input object of type ILegendOptions */
+    legendOptionsConfig: LegendOptions;
+    showGridLines: boolean;
+    xAxis: boolean;
+    yAxis: boolean;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    roundDomains: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    roundEdges: boolean;
+    strokeColor: string;
+    strokeWidth: number;
+    tooltipDisabled: boolean;
+    gradient: boolean;
+    select: EventEmitter<IBoxModel>;
+    activate: EventEmitter<IBoxModel>;
+    deactivate: EventEmitter<IBoxModel>;
+    tooltipTemplate: TemplateRef<any>;
+    /** Input Data, this came from Base Chart Component. */
+    results: BoxChartMultiSeries;
+    /** Chart Dimensions, this came from Base Chart Component. */
+    dims: ViewDimensions;
+    /** Color data. */
+    colors: ColorHelper;
+    /** Transform string css attribute for the chart container */
+    transform: string;
+    /** Chart Margins (For each side, counterclock wise). */
+    margin: [number, number, number, number];
+    /** Legend Options object to handle positioning, title, colors and domain. */
+    legendOptions: LegendOptions;
+    xScale: ScaleBand<string>;
+    yScale: ScaleLinear<number, number>;
+    xDomain: StringOrNumberOrDate[];
+    yDomain: number[];
+    seriesDomain: string[];
+    /** Chart X axis dimension. */
+    xAxisHeight: number;
+    /** Chart Y axis dimension. */
+    yAxisWidth: number;
+    trackBy(index: number, item: BoxChartSeries): StringOrNumberOrDate;
+    update(): void;
+    setColors(): void;
+    setScales(): void;
+    getXScale(domain: Array<string | number | Date>, width: number): ScaleBand<string>;
+    getYScale(domain: number[], height: number): ScaleLinear<number, number>;
+    getUniqueBoxChartXDomainValues(results: BoxChartMultiSeries): (string | number | Date)[];
+    getXDomain(): Array<string | number | Date>;
+    getYDomain(): number[];
+    getSeriesDomain(): string[];
+    updateYAxisWidth({ width }: {
+        width: any;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: any;
+    }): void;
+    onClick(data: IBoxModel): void;
+    onActivate(data: IBoxModel): void;
+    onDeactivate(data: IBoxModel): void;
+    private getLegendOptions;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.component.d.ts.map
new file mode 100644
index 0000000..4848b8b
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"box-chart.component.d.ts","sources":["box-chart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ColorHelper } from '../common/color.helper';\nimport { BoxChartMultiSeries, BoxChartSeries, IBoxModel, StringOrNumberOrDate } from '../models/chart-data.model';\nimport { ScaleLinear, ScaleBand } from 'd3-scale';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { LegendPosition, LegendOptions } from '../common/types/legend.model';\nexport declare class BoxChartComponent extends BaseChartComponent {\n    /** Show or hide the legend. */\n    legend: boolean;\n    legendPosition: LegendPosition;\n    legendTitle: string;\n    /** I think it is better to handle legend options as single Input object of type ILegendOptions */\n    legendOptionsConfig: LegendOptions;\n    showGridLines: boolean;\n    xAxis: boolean;\n    yAxis: boolean;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    roundDomains: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    roundEdges: boolean;\n    strokeColor: string;\n    strokeWidth: number;\n    tooltipDisabled: boolean;\n    gradient: boolean;\n    select: EventEmitter<IBoxModel>;\n    activate: EventEmitter<IBoxModel>;\n    deactivate: EventEmitter<IBoxModel>;\n    tooltipTemplate: TemplateRef<any>;\n    /** Input Data, this came from Base Chart Component. */\n    results: BoxChartMultiSeries;\n    /** Chart Dimensions, this came from Base Chart Component. */\n    dims: ViewDimensions;\n    /** Color data. */\n    colors: ColorHelper;\n    /** Transform string css attribute for the chart container */\n    transform: string;\n    /** Chart Margins (For each side, counterclock wise). */\n    margin: [number, number, number, number];\n    /** Legend Options object to handle positioning, title, colors and domain. */\n    legendOptions: LegendOptions;\n    xScale: ScaleBand<string>;\n    yScale: ScaleLinear<number, number>;\n    xDomain: StringOrNumberOrDate[];\n    yDomain: number[];\n    seriesDomain: string[];\n    /** Chart X axis dimension. */\n    xAxisHeight: number;\n    /** Chart Y axis dimension. */\n    yAxisWidth: number;\n    trackBy(index: number, item: BoxChartSeries): StringOrNumberOrDate;\n    update(): void;\n    setColors(): void;\n    setScales(): void;\n    getXScale(domain: Array<string | number | Date>, width: number): ScaleBand<string>;\n    getYScale(domain: number[], height: number): ScaleLinear<number, number>;\n    getUniqueBoxChartXDomainValues(results: BoxChartMultiSeries): (string | number | Date)[];\n    getXDomain(): Array<string | number | Date>;\n    getYDomain(): number[];\n    getSeriesDomain(): string[];\n    updateYAxisWidth({ width }: {\n        width: any;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: any;\n    }): void;\n    onClick(data: IBoxModel): void;\n    onActivate(data: IBoxModel): void;\n    onDeactivate(data: IBoxModel): void;\n    private getLegendOptions;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.module.d.ts
index 5980dba..7391ffd 100644
--- a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.module.d.ts
@@ -1,2 +1,12 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './box-chart.component';
+import * as ɵngcc2 from './box-series.component';
+import * as ɵngcc3 from './box.component';
+import * as ɵngcc4 from '../common/chart-common.module';
 export declare class BoxChartModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BoxChartModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<BoxChartModule, [typeof ɵngcc1.BoxChartComponent, typeof ɵngcc2.BoxSeriesComponent, typeof ɵngcc3.BoxComponent], [typeof ɵngcc4.ChartCommonModule], [typeof ɵngcc1.BoxChartComponent, typeof ɵngcc2.BoxSeriesComponent, typeof ɵngcc3.BoxComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<BoxChartModule>;
 }
+
+//# sourceMappingURL=box-chart.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..5980dba
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class BoxChartModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.module.d.ts.map
new file mode 100644
index 0000000..07a8338
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-chart.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"box-chart.module.d.ts","sources":["box-chart.module.d.ts"],"names":[],"mappings":";;;;;AAAA;;;;AACA","sourcesContent":["export declare class BoxChartModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-series.component.d.ts
index 650592e..4ed8df3 100644
--- a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-series.component.d.ts
@@ -6,6 +6,7 @@ import { ColorHelper } from '../common/color.helper';
 import { StyleTypes } from '../common/tooltip/style.type';
 import { PlacementTypes } from '../common/tooltip/position';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class BoxSeriesComponent implements OnChanges {
     dims: ViewDimensions;
     series: BoxChartSeries;
@@ -36,4 +37,8 @@ export declare class BoxSeriesComponent implements OnChanges {
     getBoxQuantiles(inputData: Array<number | Date>): [number, number, number];
     getLinesCoordinates(seriesName: string, whiskers: [number, number], quartiles: [number, number, number], barWidth: number): [IVector2D, IVector2D, IVector2D, IVector2D];
     updateTooltipSettings(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BoxSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BoxSeriesComponent, "g[ngx-charts-box-series]", never, { "animations": "animations"; "tooltipDisabled": "tooltipDisabled"; "gradient": "gradient"; "tooltipPlacement": "tooltipPlacement"; "tooltipType": "tooltipType"; "dims": "dims"; "series": "series"; "xScale": "xScale"; "yScale": "yScale"; "colors": "colors"; "strokeColor": "strokeColor"; "strokeWidth": "strokeWidth"; "tooltipTemplate": "tooltipTemplate"; "roundEdges": "roundEdges"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
+
+//# sourceMappingURL=box-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..650592e
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,39 @@
+import { EventEmitter, OnChanges, SimpleChanges, TemplateRef } from '@angular/core';
+import { ScaleLinear, ScaleBand } from 'd3-scale';
+import { IBoxModel, BoxChartSeries, DataItem } from '../models/chart-data.model';
+import { IVector2D } from '../models/coordinates.model';
+import { ColorHelper } from '../common/color.helper';
+import { StyleTypes } from '../common/tooltip/style.type';
+import { PlacementTypes } from '../common/tooltip/position';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class BoxSeriesComponent implements OnChanges {
+    dims: ViewDimensions;
+    series: BoxChartSeries;
+    xScale: ScaleBand<string>;
+    yScale: ScaleLinear<number, number>;
+    colors: ColorHelper;
+    animations: boolean;
+    strokeColor: string;
+    strokeWidth: number;
+    tooltipDisabled: boolean;
+    tooltipTemplate: TemplateRef<any>;
+    tooltipPlacement: PlacementTypes;
+    tooltipType: StyleTypes;
+    roundEdges: boolean;
+    gradient: boolean;
+    select: EventEmitter<IBoxModel>;
+    activate: EventEmitter<IBoxModel>;
+    deactivate: EventEmitter<IBoxModel>;
+    box: IBoxModel;
+    counts: DataItem[];
+    quartiles: [number, number, number];
+    whiskers: [number, number];
+    lineCoordinates: [IVector2D, IVector2D, IVector2D, IVector2D];
+    tooltipTitle: string;
+    ngOnChanges(changes: SimpleChanges): void;
+    onClick(data: IBoxModel): void;
+    update(): void;
+    getBoxQuantiles(inputData: Array<number | Date>): [number, number, number];
+    getLinesCoordinates(seriesName: string, whiskers: [number, number], quartiles: [number, number, number], barWidth: number): [IVector2D, IVector2D, IVector2D, IVector2D];
+    updateTooltipSettings(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-series.component.d.ts.map
new file mode 100644
index 0000000..782cabc
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"box-series.component.d.ts","sources":["box-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, SimpleChanges, TemplateRef } from '@angular/core';\nimport { ScaleLinear, ScaleBand } from 'd3-scale';\nimport { IBoxModel, BoxChartSeries, DataItem } from '../models/chart-data.model';\nimport { IVector2D } from '../models/coordinates.model';\nimport { ColorHelper } from '../common/color.helper';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class BoxSeriesComponent implements OnChanges {\n    dims: ViewDimensions;\n    series: BoxChartSeries;\n    xScale: ScaleBand<string>;\n    yScale: ScaleLinear<number, number>;\n    colors: ColorHelper;\n    animations: boolean;\n    strokeColor: string;\n    strokeWidth: number;\n    tooltipDisabled: boolean;\n    tooltipTemplate: TemplateRef<any>;\n    tooltipPlacement: PlacementTypes;\n    tooltipType: StyleTypes;\n    roundEdges: boolean;\n    gradient: boolean;\n    select: EventEmitter<IBoxModel>;\n    activate: EventEmitter<IBoxModel>;\n    deactivate: EventEmitter<IBoxModel>;\n    box: IBoxModel;\n    counts: DataItem[];\n    quartiles: [number, number, number];\n    whiskers: [number, number];\n    lineCoordinates: [IVector2D, IVector2D, IVector2D, IVector2D];\n    tooltipTitle: string;\n    ngOnChanges(changes: SimpleChanges): void;\n    onClick(data: IBoxModel): void;\n    update(): void;\n    getBoxQuantiles(inputData: Array<number | Date>): [number, number, number];\n    getLinesCoordinates(seriesName: string, whiskers: [number, number], quartiles: [number, number, number], barWidth: number): [IVector2D, IVector2D, IVector2D, IVector2D];\n    updateTooltipSettings(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/box-chart/box.component.d.ts
index 35ea9ff..0d812d9 100644
--- a/node_modules/@swimlane/ngx-charts/lib/box-chart/box.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box.component.d.ts
@@ -4,6 +4,7 @@ import { IBoxModel } from '../models/chart-data.model';
 import { IVector2D } from '../models/coordinates.model';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
 import { Gradient } from '../common/types/gradient.interface';
+import * as ɵngcc0 from '@angular/core';
 declare type LineCoordinates = [IVector2D, IVector2D, IVector2D, IVector2D];
 export declare class BoxComponent implements OnChanges {
     protected cd: ChangeDetectorRef;
@@ -68,5 +69,9 @@ export declare class BoxComponent implements OnChanges {
     onMouseEnter(): void;
     onMouseLeave(): void;
     private checkToHideBar;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BoxComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BoxComponent, "g[ngx-charts-box]", never, { "roundEdges": "roundEdges"; "gradient": "gradient"; "offset": "offset"; "isActive": "isActive"; "animations": "animations"; "noBarWhenZero": "noBarWhenZero"; "gradientStops": "gradientStops"; "strokeColor": "strokeColor"; "strokeWidth": "strokeWidth"; "fill": "fill"; "data": "data"; "width": "width"; "height": "height"; "x": "x"; "y": "y"; "lineCoordinates": "lineCoordinates"; "ariaLabel": "ariaLabel"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
 export {};
+
+//# sourceMappingURL=box.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/box-chart/box.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..35ea9ff
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,72 @@
+import { EventEmitter, ElementRef, SimpleChanges, OnChanges, ChangeDetectorRef } from '@angular/core';
+import { BaseType } from 'd3-selection';
+import { IBoxModel } from '../models/chart-data.model';
+import { IVector2D } from '../models/coordinates.model';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+import { Gradient } from '../common/types/gradient.interface';
+declare type LineCoordinates = [IVector2D, IVector2D, IVector2D, IVector2D];
+export declare class BoxComponent implements OnChanges {
+    protected cd: ChangeDetectorRef;
+    strokeColor: string;
+    strokeWidth: number;
+    fill: string;
+    data: IBoxModel;
+    width: number;
+    height: number;
+    x: number;
+    y: number;
+    lineCoordinates: LineCoordinates;
+    roundEdges: boolean;
+    gradient: boolean;
+    gradientStops: Gradient[];
+    offset: number;
+    isActive: boolean;
+    animations: boolean;
+    ariaLabel: string;
+    noBarWhenZero: boolean;
+    select: EventEmitter<IBoxModel>;
+    activate: EventEmitter<IBoxModel>;
+    deactivate: EventEmitter<IBoxModel>;
+    BarOrientation: typeof BarOrientation;
+    nativeElm: any;
+    oldPath: string;
+    boxPath: string;
+    oldLineCoordinates: LineCoordinates;
+    gradientId: string;
+    gradientFill: string;
+    initialized: boolean;
+    hasGradient: boolean;
+    hideBar: boolean;
+    /** Mask Path to cut the line on the box part. */
+    maskLine: string;
+    /** Mask Path Id to keep track of the mask element */
+    maskLineId: string;
+    boxStrokeWidth: number;
+    whiskerStrokeWidth: number;
+    medianLineWidth: number;
+    constructor(element: ElementRef, cd: ChangeDetectorRef);
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    loadAnimation(): void;
+    updatePathEl(): void;
+    updateLineEl(): void;
+    /**
+     * See [D3 Selections](https://www.d3indepth.com/selections/)
+     * @param d The joined data.
+     * @param index The index of the element within the selection
+     * @param node The node element (Line).
+     */
+    lineTween(attr: string, d: any, index: number, node: BaseType[] | ArrayLike<BaseType>): any;
+    pathTween(d1: string, precision: number): () => (t: any) => string;
+    getStartingPath(): string;
+    getPath(): string;
+    getStartingLineCoordinates(): LineCoordinates;
+    getRadius(): number;
+    getGradient(): Gradient[];
+    getStartOpacity(): number;
+    get edges(): boolean[];
+    onMouseEnter(): void;
+    onMouseLeave(): void;
+    private checkToHideBar;
+}
+export {};
diff --git a/node_modules/@swimlane/ngx-charts/lib/box-chart/box.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/box-chart/box.component.d.ts.map
new file mode 100644
index 0000000..0fa7c7b
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/box-chart/box.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"box.component.d.ts","sources":["box.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { EventEmitter, ElementRef, SimpleChanges, OnChanges, ChangeDetectorRef } from '@angular/core';\nimport { BaseType } from 'd3-selection';\nimport { IBoxModel } from '../models/chart-data.model';\nimport { IVector2D } from '../models/coordinates.model';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { Gradient } from '../common/types/gradient.interface';\ndeclare type LineCoordinates = [IVector2D, IVector2D, IVector2D, IVector2D];\nexport declare class BoxComponent implements OnChanges {\n    protected cd: ChangeDetectorRef;\n    strokeColor: string;\n    strokeWidth: number;\n    fill: string;\n    data: IBoxModel;\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n    lineCoordinates: LineCoordinates;\n    roundEdges: boolean;\n    gradient: boolean;\n    gradientStops: Gradient[];\n    offset: number;\n    isActive: boolean;\n    animations: boolean;\n    ariaLabel: string;\n    noBarWhenZero: boolean;\n    select: EventEmitter<IBoxModel>;\n    activate: EventEmitter<IBoxModel>;\n    deactivate: EventEmitter<IBoxModel>;\n    BarOrientation: typeof BarOrientation;\n    nativeElm: any;\n    oldPath: string;\n    boxPath: string;\n    oldLineCoordinates: LineCoordinates;\n    gradientId: string;\n    gradientFill: string;\n    initialized: boolean;\n    hasGradient: boolean;\n    hideBar: boolean;\n    /** Mask Path to cut the line on the box part. */\n    maskLine: string;\n    /** Mask Path Id to keep track of the mask element */\n    maskLineId: string;\n    boxStrokeWidth: number;\n    whiskerStrokeWidth: number;\n    medianLineWidth: number;\n    constructor(element: ElementRef, cd: ChangeDetectorRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    loadAnimation(): void;\n    updatePathEl(): void;\n    updateLineEl(): void;\n    /**\n     * See [D3 Selections](https://www.d3indepth.com/selections/)\n     * @param d The joined data.\n     * @param index The index of the element within the selection\n     * @param node The node element (Line).\n     */\n    lineTween(attr: string, d: any, index: number, node: BaseType[] | ArrayLike<BaseType>): any;\n    pathTween(d1: string, precision: number): () => (t: any) => string;\n    getStartingPath(): string;\n    getPath(): string;\n    getStartingLineCoordinates(): LineCoordinates;\n    getRadius(): number;\n    getGradient(): Gradient[];\n    getStartOpacity(): number;\n    get edges(): boolean[];\n    onMouseEnter(): void;\n    onMouseLeave(): void;\n    private checkToHideBar;\n}\nexport {};\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.d.ts
index 84456e6..44e4779 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.d.ts
@@ -5,6 +5,7 @@ import { BubbleChartSeries } from '../models/chart-data.model';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class BubbleChartComponent extends BaseChartComponent {
     showGridLines: boolean;
     legend: boolean;
@@ -82,4 +83,8 @@ export declare class BubbleChartComponent extends BaseChartComponent {
     onDeactivate(item: any): void;
     deactivateAll(): void;
     trackBy(index: number, item: any): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BubbleChartComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BubbleChartComponent, "ngx-charts-bubble-chart", never, { "showGridLines": "showGridLines"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "xAxis": "xAxis"; "yAxis": "yAxis"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "roundDomains": "roundDomains"; "maxRadius": "maxRadius"; "minRadius": "minRadius"; "schemeType": "schemeType"; "tooltipDisabled": "tooltipDisabled"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "autoScale": "autoScale"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=bubble-chart.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..84456e6
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,85 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { ColorHelper } from '../common/color.helper';
+import { BubbleChartSeries } from '../models/chart-data.model';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class BubbleChartComponent extends BaseChartComponent {
+    showGridLines: boolean;
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: boolean;
+    yAxis: boolean;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    roundDomains: boolean;
+    maxRadius: number;
+    minRadius: number;
+    autoScale: boolean;
+    schemeType: ScaleType;
+    tooltipDisabled: boolean;
+    xScaleMin: number;
+    xScaleMax: number;
+    yScaleMin: number;
+    yScaleMax: number;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    colors: ColorHelper;
+    scaleType: ScaleType;
+    margin: number[];
+    bubblePadding: number[];
+    data: BubbleChartSeries[];
+    legendOptions: LegendOptions;
+    transform: string;
+    clipPath: string;
+    clipPathId: string;
+    seriesDomain: number[];
+    xDomain: number[];
+    yDomain: number[];
+    rDomain: number[];
+    xScaleType: ScaleType;
+    yScaleType: ScaleType;
+    yScale: any;
+    xScale: any;
+    rScale: any;
+    xAxisHeight: number;
+    yAxisWidth: number;
+    activeEntries: any[];
+    update(): void;
+    hideCircles(): void;
+    onClick(data: any, series?: any): void;
+    getBubblePadding(): number[];
+    setScales(): void;
+    getYScale(domain: any, height: number): any;
+    getXScale(domain: any, width: number): any;
+    getRScale(domain: any, range: any): any;
+    getLegendOptions(): LegendOptions;
+    getXDomain(): number[];
+    getYDomain(): number[];
+    getRDomain(): [number, number];
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(item: any): void;
+    onDeactivate(item: any): void;
+    deactivateAll(): void;
+    trackBy(index: number, item: any): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.d.ts.map
new file mode 100644
index 0000000..51eeed6
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bubble-chart.component.d.ts","sources":["bubble-chart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ColorHelper } from '../common/color.helper';\nimport { BubbleChartSeries } from '../models/chart-data.model';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class BubbleChartComponent extends BaseChartComponent {\n    showGridLines: boolean;\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: boolean;\n    yAxis: boolean;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    roundDomains: boolean;\n    maxRadius: number;\n    minRadius: number;\n    autoScale: boolean;\n    schemeType: ScaleType;\n    tooltipDisabled: boolean;\n    xScaleMin: number;\n    xScaleMax: number;\n    yScaleMin: number;\n    yScaleMax: number;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    colors: ColorHelper;\n    scaleType: ScaleType;\n    margin: number[];\n    bubblePadding: number[];\n    data: BubbleChartSeries[];\n    legendOptions: LegendOptions;\n    transform: string;\n    clipPath: string;\n    clipPathId: string;\n    seriesDomain: number[];\n    xDomain: number[];\n    yDomain: number[];\n    rDomain: number[];\n    xScaleType: ScaleType;\n    yScaleType: ScaleType;\n    yScale: any;\n    xScale: any;\n    rScale: any;\n    xAxisHeight: number;\n    yAxisWidth: number;\n    activeEntries: any[];\n    update(): void;\n    hideCircles(): void;\n    onClick(data: any, series?: any): void;\n    getBubblePadding(): number[];\n    setScales(): void;\n    getYScale(domain: any, height: number): any;\n    getXScale(domain: any, width: number): any;\n    getRScale(domain: any, range: any): any;\n    getLegendOptions(): LegendOptions;\n    getXDomain(): number[];\n    getYDomain(): number[];\n    getRDomain(): [number, number];\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(item: any): void;\n    onDeactivate(item: any): void;\n    deactivateAll(): void;\n    trackBy(index: number, item: any): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.d.ts
index 4479d80..3bcc7a8 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.d.ts
@@ -1,2 +1,11 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './bubble-chart.component';
+import * as ɵngcc2 from './bubble-series.component';
+import * as ɵngcc3 from '../common/chart-common.module';
 export declare class BubbleChartModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BubbleChartModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<BubbleChartModule, [typeof ɵngcc1.BubbleChartComponent, typeof ɵngcc2.BubbleSeriesComponent], [typeof ɵngcc3.ChartCommonModule], [typeof ɵngcc1.BubbleChartComponent, typeof ɵngcc2.BubbleSeriesComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<BubbleChartModule>;
 }
+
+//# sourceMappingURL=bubble-chart.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..4479d80
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class BubbleChartModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.d.ts.map
new file mode 100644
index 0000000..e42a579
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-chart.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bubble-chart.module.d.ts","sources":["bubble-chart.module.d.ts"],"names":[],"mappings":";;;;AAAA;;;;AACA","sourcesContent":["export declare class BubbleChartModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.d.ts
index 9691792..d62a52f 100644
--- a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.d.ts
@@ -4,6 +4,7 @@ import { BubbleChartSeries } from '../models/chart-data.model';
 import { PlacementTypes } from '../common/tooltip/position';
 import { StyleTypes } from '../common/tooltip/style.type';
 import { ScaleType } from '../common/types/scale-type.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class BubbleSeriesComponent implements OnChanges {
     data: BubbleChartSeries;
     xScale: any;
@@ -35,4 +36,8 @@ export declare class BubbleSeriesComponent implements OnChanges {
     activateCircle(circle: any): void;
     deactivateCircle(circle: any): void;
     trackBy(index: any, circle: any): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BubbleSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BubbleSeriesComponent, "g[ngx-charts-bubble-series]", never, { "tooltipDisabled": "tooltipDisabled"; "data": "data"; "xScale": "xScale"; "yScale": "yScale"; "rScale": "rScale"; "xScaleType": "xScaleType"; "yScaleType": "yScaleType"; "colors": "colors"; "visibleValue": "visibleValue"; "activeEntries": "activeEntries"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "tooltipTemplate": "tooltipTemplate"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
+
+//# sourceMappingURL=bubble-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..9691792
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,38 @@
+import { SimpleChanges, EventEmitter, OnChanges, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { BubbleChartSeries } from '../models/chart-data.model';
+import { PlacementTypes } from '../common/tooltip/position';
+import { StyleTypes } from '../common/tooltip/style.type';
+import { ScaleType } from '../common/types/scale-type.enum';
+export declare class BubbleSeriesComponent implements OnChanges {
+    data: BubbleChartSeries;
+    xScale: any;
+    yScale: any;
+    rScale: any;
+    xScaleType: ScaleType;
+    yScaleType: ScaleType;
+    colors: ColorHelper;
+    visibleValue: any;
+    activeEntries: any[];
+    xAxisLabel: string;
+    yAxisLabel: string;
+    tooltipDisabled: boolean;
+    tooltipTemplate: TemplateRef<any>;
+    select: EventEmitter<any>;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    areaPath: any;
+    circles: any[];
+    placementTypes: typeof PlacementTypes;
+    styleTypes: typeof StyleTypes;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getCircles(): any[];
+    getTooltipText(circle: any): string;
+    onClick(data: any): void;
+    isActive(entry: any): boolean;
+    isVisible(circle: any): boolean;
+    activateCircle(circle: any): void;
+    deactivateCircle(circle: any): void;
+    trackBy(index: any, circle: any): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.d.ts.map
new file mode 100644
index 0000000..e023aa6
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/bubble-chart/bubble-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bubble-series.component.d.ts","sources":["bubble-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { SimpleChanges, EventEmitter, OnChanges, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { BubbleChartSeries } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { ScaleType } from '../common/types/scale-type.enum';\nexport declare class BubbleSeriesComponent implements OnChanges {\n    data: BubbleChartSeries;\n    xScale: any;\n    yScale: any;\n    rScale: any;\n    xScaleType: ScaleType;\n    yScaleType: ScaleType;\n    colors: ColorHelper;\n    visibleValue: any;\n    activeEntries: any[];\n    xAxisLabel: string;\n    yAxisLabel: string;\n    tooltipDisabled: boolean;\n    tooltipTemplate: TemplateRef<any>;\n    select: EventEmitter<any>;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    areaPath: any;\n    circles: any[];\n    placementTypes: typeof PlacementTypes;\n    styleTypes: typeof StyleTypes;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getCircles(): any[];\n    getTooltipText(circle: any): string;\n    onClick(data: any): void;\n    isActive(entry: any): boolean;\n    isVisible(circle: any): boolean;\n    activateCircle(circle: any): void;\n    deactivateCircle(circle: any): void;\n    trackBy(index: any, circle: any): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/area.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/area.component.d.ts
index 3a7bd7f..24378b1 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/area.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/area.component.d.ts
@@ -2,6 +2,7 @@ import { EventEmitter, ElementRef, OnChanges } from '@angular/core';
 import { AreaChartSeries } from '../models/chart-data.model';
 import { BarOrientation } from './types/bar-orientation.enum';
 import { Gradient } from './types/gradient.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class AreaComponent implements OnChanges {
     data: AreaChartSeries;
     path: string;
@@ -28,4 +29,8 @@ export declare class AreaComponent implements OnChanges {
     loadAnimation(): void;
     updatePathEl(): void;
     getGradient(): Gradient[];
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<AreaComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AreaComponent, "g[ngx-charts-area]", never, { "opacity": "opacity"; "startOpacity": "startOpacity"; "endOpacity": "endOpacity"; "gradient": "gradient"; "animations": "animations"; "data": "data"; "path": "path"; "startingPath": "startingPath"; "fill": "fill"; "stops": "stops"; }, { "select": "select"; }, never, never>;
 }
+
+//# sourceMappingURL=area.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/area.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/area.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..3a7bd7f
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/area.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,31 @@
+import { EventEmitter, ElementRef, OnChanges } from '@angular/core';
+import { AreaChartSeries } from '../models/chart-data.model';
+import { BarOrientation } from './types/bar-orientation.enum';
+import { Gradient } from './types/gradient.interface';
+export declare class AreaComponent implements OnChanges {
+    data: AreaChartSeries;
+    path: string;
+    startingPath: string;
+    fill: string;
+    opacity: number;
+    startOpacity: number;
+    endOpacity: number;
+    gradient: boolean;
+    stops: Gradient[];
+    animations: boolean;
+    select: EventEmitter<any>;
+    element: HTMLElement;
+    gradientId: string;
+    gradientFill: string;
+    areaPath: string;
+    animationsLoaded: boolean;
+    gradientStops: Gradient[];
+    hasGradient: boolean;
+    barOrientation: typeof BarOrientation;
+    constructor(element: ElementRef);
+    ngOnChanges(): void;
+    update(): void;
+    loadAnimation(): void;
+    updatePathEl(): void;
+    getGradient(): Gradient[];
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/area.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/area.component.d.ts.map
new file mode 100644
index 0000000..9039781
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/area.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"area.component.d.ts","sources":["area.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, OnChanges } from '@angular/core';\nimport { AreaChartSeries } from '../models/chart-data.model';\nimport { BarOrientation } from './types/bar-orientation.enum';\nimport { Gradient } from './types/gradient.interface';\nexport declare class AreaComponent implements OnChanges {\n    data: AreaChartSeries;\n    path: string;\n    startingPath: string;\n    fill: string;\n    opacity: number;\n    startOpacity: number;\n    endOpacity: number;\n    gradient: boolean;\n    stops: Gradient[];\n    animations: boolean;\n    select: EventEmitter<any>;\n    element: HTMLElement;\n    gradientId: string;\n    gradientFill: string;\n    areaPath: string;\n    animationsLoaded: boolean;\n    gradientStops: Gradient[];\n    hasGradient: boolean;\n    barOrientation: typeof BarOrientation;\n    constructor(element: ElementRef);\n    ngOnChanges(): void;\n    update(): void;\n    loadAnimation(): void;\n    updatePathEl(): void;\n    getGradient(): Gradient[];\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/axes.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/axes/axes.module.d.ts
index cd5181b..94f608c 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/axes/axes.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/axes.module.d.ts
@@ -1,2 +1,14 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './axis-label.component';
+import * as ɵngcc2 from './x-axis.component';
+import * as ɵngcc3 from './x-axis-ticks.component';
+import * as ɵngcc4 from './y-axis.component';
+import * as ɵngcc5 from './y-axis-ticks.component';
+import * as ɵngcc6 from '@angular/common';
 export declare class AxesModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<AxesModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AxesModule, [typeof ɵngcc1.AxisLabelComponent, typeof ɵngcc2.XAxisComponent, typeof ɵngcc3.XAxisTicksComponent, typeof ɵngcc4.YAxisComponent, typeof ɵngcc5.YAxisTicksComponent], [typeof ɵngcc6.CommonModule], [typeof ɵngcc1.AxisLabelComponent, typeof ɵngcc2.XAxisComponent, typeof ɵngcc3.XAxisTicksComponent, typeof ɵngcc4.YAxisComponent, typeof ɵngcc5.YAxisTicksComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<AxesModule>;
 }
+
+//# sourceMappingURL=axes.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/axes.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/axes/axes.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..cd5181b
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/axes.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class AxesModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/axes.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/axes/axes.module.d.ts.map
new file mode 100644
index 0000000..bf604d7
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/axes.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"axes.module.d.ts","sources":["axes.module.d.ts"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA","sourcesContent":["export declare class AxesModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/axis-label.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/axes/axis-label.component.d.ts
index 855ccc7..5f3072c 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/axes/axis-label.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/axis-label.component.d.ts
@@ -1,5 +1,6 @@
 import { ElementRef, OnChanges, SimpleChanges } from '@angular/core';
 import { Orientation } from '../types/orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class AxisLabelComponent implements OnChanges {
     orient: Orientation;
     label: string;
@@ -17,4 +18,8 @@ export declare class AxisLabelComponent implements OnChanges {
     constructor(element: ElementRef);
     ngOnChanges(changes: SimpleChanges): void;
     update(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<AxisLabelComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AxisLabelComponent, "g[ngx-charts-axis-label]", never, { "orient": "orient"; "label": "label"; "offset": "offset"; "width": "width"; "height": "height"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=axis-label.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/axis-label.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/axes/axis-label.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..855ccc7
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/axis-label.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,20 @@
+import { ElementRef, OnChanges, SimpleChanges } from '@angular/core';
+import { Orientation } from '../types/orientation.enum';
+export declare class AxisLabelComponent implements OnChanges {
+    orient: Orientation;
+    label: string;
+    offset: number;
+    width: number;
+    height: number;
+    x: number;
+    y: number;
+    transform: string;
+    strokeWidth: string;
+    textAnchor: string;
+    element: ElementRef;
+    textHeight: number;
+    margin: number;
+    constructor(element: ElementRef);
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/axis-label.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/axes/axis-label.component.d.ts.map
new file mode 100644
index 0000000..e161f28
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/axis-label.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"axis-label.component.d.ts","sources":["axis-label.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { Orientation } from '../types/orientation.enum';\nexport declare class AxisLabelComponent implements OnChanges {\n    orient: Orientation;\n    label: string;\n    offset: number;\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n    transform: string;\n    strokeWidth: string;\n    textAnchor: string;\n    element: ElementRef;\n    textHeight: number;\n    margin: number;\n    constructor(element: ElementRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.d.ts
index 86b139c..a02ab0e 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.d.ts
@@ -1,6 +1,7 @@
 import { EventEmitter, OnChanges, ElementRef, SimpleChanges, AfterViewInit } from '@angular/core';
 import { Orientation } from '../types/orientation.enum';
 import { TextAnchor } from '../types/text-anchor.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class XAxisTicksComponent implements OnChanges, AfterViewInit {
     private platformId;
     scale: any;
@@ -42,4 +43,8 @@ export declare class XAxisTicksComponent implements OnChanges, AfterViewInit {
     tickTransform(tick: number): string;
     gridLineTransform(): string;
     tickTrim(label: string): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<XAxisTicksComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<XAxisTicksComponent, "g[ngx-charts-x-axis-ticks]", never, { "tickArguments": "tickArguments"; "tickStroke": "tickStroke"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "showGridLines": "showGridLines"; "rotateTicks": "rotateTicks"; "scale": "scale"; "orient": "orient"; "tickValues": "tickValues"; "tickFormatting": "tickFormatting"; "gridLineHeight": "gridLineHeight"; "width": "width"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
 }
+
+//# sourceMappingURL=x-axis-ticks.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..86b139c
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,45 @@
+import { EventEmitter, OnChanges, ElementRef, SimpleChanges, AfterViewInit } from '@angular/core';
+import { Orientation } from '../types/orientation.enum';
+import { TextAnchor } from '../types/text-anchor.enum';
+export declare class XAxisTicksComponent implements OnChanges, AfterViewInit {
+    private platformId;
+    scale: any;
+    orient: Orientation;
+    tickArguments: number[];
+    tickValues: string[] | number[];
+    tickStroke: string;
+    trimTicks: boolean;
+    maxTickLength: number;
+    tickFormatting: any;
+    showGridLines: boolean;
+    gridLineHeight: number;
+    width: number;
+    rotateTicks: boolean;
+    dimensionsChanged: EventEmitter<any>;
+    verticalSpacing: number;
+    rotateLabels: boolean;
+    innerTickSize: number;
+    outerTickSize: number;
+    tickPadding: number;
+    textAnchor: TextAnchor;
+    maxTicksLength: number;
+    maxAllowedLength: number;
+    adjustedScale: any;
+    textTransform: string;
+    ticks: any[];
+    tickFormat: (o: any) => any;
+    height: number;
+    approxHeight: number;
+    ticksElement: ElementRef;
+    constructor(platformId: any);
+    ngOnChanges(changes: SimpleChanges): void;
+    ngAfterViewInit(): void;
+    updateDims(): void;
+    update(): void;
+    getRotationAngle(ticks: any[]): number;
+    getTicks(): any[];
+    getMaxTicks(tickWidth: number): number;
+    tickTransform(tick: number): string;
+    gridLineTransform(): string;
+    tickTrim(label: string): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.d.ts.map
new file mode 100644
index 0000000..d137c49
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis-ticks.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"x-axis-ticks.component.d.ts","sources":["x-axis-ticks.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, ElementRef, SimpleChanges, AfterViewInit } from '@angular/core';\nimport { Orientation } from '../types/orientation.enum';\nimport { TextAnchor } from '../types/text-anchor.enum';\nexport declare class XAxisTicksComponent implements OnChanges, AfterViewInit {\n    private platformId;\n    scale: any;\n    orient: Orientation;\n    tickArguments: number[];\n    tickValues: string[] | number[];\n    tickStroke: string;\n    trimTicks: boolean;\n    maxTickLength: number;\n    tickFormatting: any;\n    showGridLines: boolean;\n    gridLineHeight: number;\n    width: number;\n    rotateTicks: boolean;\n    dimensionsChanged: EventEmitter<any>;\n    verticalSpacing: number;\n    rotateLabels: boolean;\n    innerTickSize: number;\n    outerTickSize: number;\n    tickPadding: number;\n    textAnchor: TextAnchor;\n    maxTicksLength: number;\n    maxAllowedLength: number;\n    adjustedScale: any;\n    textTransform: string;\n    ticks: any[];\n    tickFormat: (o: any) => any;\n    height: number;\n    approxHeight: number;\n    ticksElement: ElementRef;\n    constructor(platformId: any);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    updateDims(): void;\n    update(): void;\n    getRotationAngle(ticks: any[]): number;\n    getTicks(): any[];\n    getMaxTicks(tickWidth: number): number;\n    tickTransform(tick: number): string;\n    gridLineTransform(): string;\n    tickTrim(label: string): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis.component.d.ts
index 0f97c4d..25a5508 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis.component.d.ts
@@ -2,6 +2,7 @@ import { SimpleChanges, EventEmitter, OnChanges } from '@angular/core';
 import { XAxisTicksComponent } from './x-axis-ticks.component';
 import { Orientation } from '../types/orientation.enum';
 import { ViewDimensions } from '../types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class XAxisComponent implements OnChanges {
     xScale: any;
     dims: ViewDimensions;
@@ -33,4 +34,8 @@ export declare class XAxisComponent implements OnChanges {
     emitTicksHeight({ height }: {
         height: any;
     }): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<XAxisComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<XAxisComponent, "g[ngx-charts-x-axis]", never, { "rotateTicks": "rotateTicks"; "showGridLines": "showGridLines"; "xOrient": "xOrient"; "xAxisOffset": "xAxisOffset"; "xScale": "xScale"; "dims": "dims"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "tickFormatting": "tickFormatting"; "showLabel": "showLabel"; "labelText": "labelText"; "ticks": "ticks"; "xAxisTickCount": "xAxisTickCount"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
 }
+
+//# sourceMappingURL=x-axis.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..0f97c4d
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,36 @@
+import { SimpleChanges, EventEmitter, OnChanges } from '@angular/core';
+import { XAxisTicksComponent } from './x-axis-ticks.component';
+import { Orientation } from '../types/orientation.enum';
+import { ViewDimensions } from '../types/view-dimension.interface';
+export declare class XAxisComponent implements OnChanges {
+    xScale: any;
+    dims: ViewDimensions;
+    trimTicks: boolean;
+    rotateTicks: boolean;
+    maxTickLength: number;
+    tickFormatting: any;
+    showGridLines: boolean;
+    showLabel: boolean;
+    labelText: string;
+    ticks: any[];
+    xAxisTickCount: number;
+    xOrient: Orientation;
+    xAxisOffset: number;
+    dimensionsChanged: EventEmitter<any>;
+    xAxisClassName: string;
+    tickArguments: number[];
+    transform: string;
+    labelOffset: number;
+    fill: string;
+    stroke: string;
+    tickStroke: string;
+    strokeWidth: string;
+    padding: number;
+    readonly orientation: typeof Orientation;
+    ticksComponent: XAxisTicksComponent;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    emitTicksHeight({ height }: {
+        height: any;
+    }): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis.component.d.ts.map
new file mode 100644
index 0000000..7a3569e
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/x-axis.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"x-axis.component.d.ts","sources":["x-axis.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { SimpleChanges, EventEmitter, OnChanges } from '@angular/core';\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { Orientation } from '../types/orientation.enum';\nimport { ViewDimensions } from '../types/view-dimension.interface';\nexport declare class XAxisComponent implements OnChanges {\n    xScale: any;\n    dims: ViewDimensions;\n    trimTicks: boolean;\n    rotateTicks: boolean;\n    maxTickLength: number;\n    tickFormatting: any;\n    showGridLines: boolean;\n    showLabel: boolean;\n    labelText: string;\n    ticks: any[];\n    xAxisTickCount: number;\n    xOrient: Orientation;\n    xAxisOffset: number;\n    dimensionsChanged: EventEmitter<any>;\n    xAxisClassName: string;\n    tickArguments: number[];\n    transform: string;\n    labelOffset: number;\n    fill: string;\n    stroke: string;\n    tickStroke: string;\n    strokeWidth: string;\n    padding: number;\n    readonly orientation: typeof Orientation;\n    ticksComponent: XAxisTicksComponent;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    emitTicksHeight({ height }: {\n        height: any;\n    }): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.d.ts
index c36a86d..1951351 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.d.ts
@@ -1,6 +1,7 @@
 import { OnChanges, ElementRef, EventEmitter, AfterViewInit, SimpleChanges } from '@angular/core';
 import { Orientation } from '../types/orientation.enum';
 import { TextAnchor } from '../types/text-anchor.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class YAxisTicksComponent implements OnChanges, AfterViewInit {
     private platformId;
     scale: any;
@@ -53,4 +54,8 @@ export declare class YAxisTicksComponent implements OnChanges, AfterViewInit {
     gridLineTransform(): string;
     tickTrim(label: string): string;
     getApproximateAxisWidth(): number;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<YAxisTicksComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<YAxisTicksComponent, "g[ngx-charts-y-axis-ticks]", never, { "tickArguments": "tickArguments"; "tickStroke": "tickStroke"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "showGridLines": "showGridLines"; "showRefLabels": "showRefLabels"; "showRefLines": "showRefLines"; "scale": "scale"; "orient": "orient"; "tickValues": "tickValues"; "tickFormatting": "tickFormatting"; "gridLineWidth": "gridLineWidth"; "height": "height"; "referenceLines": "referenceLines"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
 }
+
+//# sourceMappingURL=y-axis-ticks.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..c36a86d
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,56 @@
+import { OnChanges, ElementRef, EventEmitter, AfterViewInit, SimpleChanges } from '@angular/core';
+import { Orientation } from '../types/orientation.enum';
+import { TextAnchor } from '../types/text-anchor.enum';
+export declare class YAxisTicksComponent implements OnChanges, AfterViewInit {
+    private platformId;
+    scale: any;
+    orient: Orientation;
+    tickArguments: number[];
+    tickValues: string[] | number[];
+    tickStroke: string;
+    trimTicks: boolean;
+    maxTickLength: number;
+    tickFormatting: any;
+    showGridLines: boolean;
+    gridLineWidth: number;
+    height: number;
+    referenceLines: any;
+    showRefLabels: boolean;
+    showRefLines: boolean;
+    dimensionsChanged: EventEmitter<any>;
+    innerTickSize: number;
+    tickPadding: number;
+    tickSpacing: number;
+    verticalSpacing: number;
+    textAnchor: TextAnchor;
+    dy: string;
+    x1: number;
+    x2: number;
+    y1: number;
+    y2: number;
+    adjustedScale: any;
+    transform: (o: any) => string;
+    tickFormat: (o: any) => string;
+    ticks: any[];
+    width: number;
+    outerTickSize: number;
+    rotateLabels: boolean;
+    refMax: number;
+    refMin: number;
+    referenceLineLength: number;
+    referenceAreaPath: string;
+    readonly Orientation: typeof Orientation;
+    ticksElement: ElementRef;
+    constructor(platformId: any);
+    ngOnChanges(changes: SimpleChanges): void;
+    ngAfterViewInit(): void;
+    updateDims(): void;
+    update(): void;
+    setReferencelines(): void;
+    getTicks(): any[];
+    getMaxTicks(tickHeight: number): number;
+    tickTransform(tick: number): string;
+    gridLineTransform(): string;
+    tickTrim(label: string): string;
+    getApproximateAxisWidth(): number;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.d.ts.map
new file mode 100644
index 0000000..1523bad
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis-ticks.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"y-axis-ticks.component.d.ts","sources":["y-axis-ticks.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, ElementRef, EventEmitter, AfterViewInit, SimpleChanges } from '@angular/core';\nimport { Orientation } from '../types/orientation.enum';\nimport { TextAnchor } from '../types/text-anchor.enum';\nexport declare class YAxisTicksComponent implements OnChanges, AfterViewInit {\n    private platformId;\n    scale: any;\n    orient: Orientation;\n    tickArguments: number[];\n    tickValues: string[] | number[];\n    tickStroke: string;\n    trimTicks: boolean;\n    maxTickLength: number;\n    tickFormatting: any;\n    showGridLines: boolean;\n    gridLineWidth: number;\n    height: number;\n    referenceLines: any;\n    showRefLabels: boolean;\n    showRefLines: boolean;\n    dimensionsChanged: EventEmitter<any>;\n    innerTickSize: number;\n    tickPadding: number;\n    tickSpacing: number;\n    verticalSpacing: number;\n    textAnchor: TextAnchor;\n    dy: string;\n    x1: number;\n    x2: number;\n    y1: number;\n    y2: number;\n    adjustedScale: any;\n    transform: (o: any) => string;\n    tickFormat: (o: any) => string;\n    ticks: any[];\n    width: number;\n    outerTickSize: number;\n    rotateLabels: boolean;\n    refMax: number;\n    refMin: number;\n    referenceLineLength: number;\n    referenceAreaPath: string;\n    readonly Orientation: typeof Orientation;\n    ticksElement: ElementRef;\n    constructor(platformId: any);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    updateDims(): void;\n    update(): void;\n    setReferencelines(): void;\n    getTicks(): any[];\n    getMaxTicks(tickHeight: number): number;\n    tickTransform(tick: number): string;\n    gridLineTransform(): string;\n    tickTrim(label: string): string;\n    getApproximateAxisWidth(): number;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis.component.d.ts
index fbbb061..05185a1 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis.component.d.ts
@@ -2,6 +2,7 @@ import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
 import { YAxisTicksComponent } from './y-axis-ticks.component';
 import { Orientation } from '../types/orientation.enum';
 import { ViewDimensions } from '../types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class YAxisComponent implements OnChanges {
     yScale: any;
     dims: ViewDimensions;
@@ -35,4 +36,8 @@ export declare class YAxisComponent implements OnChanges {
     emitTicksWidth({ width }: {
         width: any;
     }): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<YAxisComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<YAxisComponent, "g[ngx-charts-y-axis]", never, { "showGridLines": "showGridLines"; "yOrient": "yOrient"; "yAxisOffset": "yAxisOffset"; "yScale": "yScale"; "dims": "dims"; "trimTicks": "trimTicks"; "maxTickLength": "maxTickLength"; "tickFormatting": "tickFormatting"; "ticks": "ticks"; "showLabel": "showLabel"; "labelText": "labelText"; "yAxisTickCount": "yAxisTickCount"; "referenceLines": "referenceLines"; "showRefLines": "showRefLines"; "showRefLabels": "showRefLabels"; }, { "dimensionsChanged": "dimensionsChanged"; }, never, never>;
 }
+
+//# sourceMappingURL=y-axis.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..fbbb061
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,38 @@
+import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
+import { YAxisTicksComponent } from './y-axis-ticks.component';
+import { Orientation } from '../types/orientation.enum';
+import { ViewDimensions } from '../types/view-dimension.interface';
+export declare class YAxisComponent implements OnChanges {
+    yScale: any;
+    dims: ViewDimensions;
+    trimTicks: boolean;
+    maxTickLength: number;
+    tickFormatting: any;
+    ticks: any[];
+    showGridLines: boolean;
+    showLabel: boolean;
+    labelText: string;
+    yAxisTickCount: any;
+    yOrient: Orientation;
+    referenceLines: any;
+    showRefLines: boolean;
+    showRefLabels: boolean;
+    yAxisOffset: number;
+    dimensionsChanged: EventEmitter<any>;
+    yAxisClassName: string;
+    tickArguments: number[];
+    offset: number;
+    transform: string;
+    labelOffset: number;
+    fill: string;
+    stroke: string;
+    tickStroke: string;
+    strokeWidth: number;
+    padding: number;
+    ticksComponent: YAxisTicksComponent;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    emitTicksWidth({ width }: {
+        width: any;
+    }): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis.component.d.ts.map
new file mode 100644
index 0000000..524c6c6
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/axes/y-axis.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"y-axis.component.d.ts","sources":["y-axis.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { Orientation } from '../types/orientation.enum';\nimport { ViewDimensions } from '../types/view-dimension.interface';\nexport declare class YAxisComponent implements OnChanges {\n    yScale: any;\n    dims: ViewDimensions;\n    trimTicks: boolean;\n    maxTickLength: number;\n    tickFormatting: any;\n    ticks: any[];\n    showGridLines: boolean;\n    showLabel: boolean;\n    labelText: string;\n    yAxisTickCount: any;\n    yOrient: Orientation;\n    referenceLines: any;\n    showRefLines: boolean;\n    showRefLabels: boolean;\n    yAxisOffset: number;\n    dimensionsChanged: EventEmitter<any>;\n    yAxisClassName: string;\n    tickArguments: number[];\n    offset: number;\n    transform: string;\n    labelOffset: number;\n    fill: string;\n    stroke: string;\n    tickStroke: string;\n    strokeWidth: number;\n    padding: number;\n    ticksComponent: YAxisTicksComponent;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    emitTicksWidth({ width }: {\n        width: any;\n    }): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/base-chart.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/base-chart.component.d.ts
index d55b036..6159471 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/base-chart.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/base-chart.component.d.ts
@@ -3,6 +3,7 @@ import { VisibilityObserver } from '../utils/visibility-observer';
 import { Color } from '../utils/color-sets';
 import { ScaleType } from './types/scale-type.enum';
 import { ViewDimensions } from './types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {
     protected chartElement: ElementRef;
     protected zone: NgZone;
@@ -39,4 +40,8 @@ export declare class BaseChartComponent implements OnChanges, AfterViewInit, OnD
      * @memberOf BaseChart
      */
     private cloneData;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseChartComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BaseChartComponent, "base-chart", never, { "scheme": "scheme"; "schemeType": "schemeType"; "animations": "animations"; "results": "results"; "view": "view"; "customColors": "customColors"; }, { "select": "select"; }, never, never>;
 }
+
+//# sourceMappingURL=base-chart.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/base-chart.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/base-chart.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..d55b036
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/base-chart.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,42 @@
+import { ElementRef, NgZone, ChangeDetectorRef, EventEmitter, AfterViewInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';
+import { VisibilityObserver } from '../utils/visibility-observer';
+import { Color } from '../utils/color-sets';
+import { ScaleType } from './types/scale-type.enum';
+import { ViewDimensions } from './types/view-dimension.interface';
+export declare class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {
+    protected chartElement: ElementRef;
+    protected zone: NgZone;
+    protected cd: ChangeDetectorRef;
+    platformId: any;
+    results: any;
+    view: [number, number];
+    scheme: string | Color;
+    schemeType: ScaleType;
+    customColors: any;
+    animations: boolean;
+    select: EventEmitter<any>;
+    width: number;
+    height: number;
+    resizeSubscription: any;
+    visibilityObserver: VisibilityObserver;
+    constructor(chartElement: ElementRef, zone: NgZone, cd: ChangeDetectorRef, platformId: any);
+    ngOnInit(): void;
+    ngAfterViewInit(): void;
+    ngOnDestroy(): void;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getContainerDims(): ViewDimensions;
+    /**
+     * Converts all date objects that appear as name
+     * into formatted date strings
+     */
+    formatDates(): void;
+    protected unbindEvents(): void;
+    private bindWindowResizeEvent;
+    /**
+     * Clones the data into a new object
+     *
+     * @memberOf BaseChart
+     */
+    private cloneData;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/base-chart.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/base-chart.component.d.ts.map
new file mode 100644
index 0000000..2eb6493
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/base-chart.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"base-chart.component.d.ts","sources":["base-chart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, NgZone, ChangeDetectorRef, EventEmitter, AfterViewInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\nimport { VisibilityObserver } from '../utils/visibility-observer';\nimport { Color } from '../utils/color-sets';\nimport { ScaleType } from './types/scale-type.enum';\nimport { ViewDimensions } from './types/view-dimension.interface';\nexport declare class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\n    protected chartElement: ElementRef;\n    protected zone: NgZone;\n    protected cd: ChangeDetectorRef;\n    platformId: any;\n    results: any;\n    view: [number, number];\n    scheme: string | Color;\n    schemeType: ScaleType;\n    customColors: any;\n    animations: boolean;\n    select: EventEmitter<any>;\n    width: number;\n    height: number;\n    resizeSubscription: any;\n    visibilityObserver: VisibilityObserver;\n    constructor(chartElement: ElementRef, zone: NgZone, cd: ChangeDetectorRef, platformId: any);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getContainerDims(): ViewDimensions;\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n    formatDates(): void;\n    protected unbindEvents(): void;\n    private bindWindowResizeEvent;\n    /**\n     * Clones the data into a new object\n     *\n     * @memberOf BaseChart\n     */\n    private cloneData;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/chart-common.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/chart-common.module.d.ts
index b971ff0..a8f71d7 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/chart-common.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/chart-common.module.d.ts
@@ -1,2 +1,28 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './area.component';
+import * as ɵngcc2 from './base-chart.component';
+import * as ɵngcc3 from './count/count.directive';
+import * as ɵngcc4 from './tooltip-area.component';
+import * as ɵngcc5 from './charts/chart.component';
+import * as ɵngcc6 from './legend/legend.component';
+import * as ɵngcc7 from './legend/legend-entry.component';
+import * as ɵngcc8 from './legend/scale-legend.component';
+import * as ɵngcc9 from './circle.component';
+import * as ɵngcc10 from './circle-series.component';
+import * as ɵngcc11 from './grid-panel.component';
+import * as ɵngcc12 from './grid-panel-series.component';
+import * as ɵngcc13 from './svg-linear-gradient.component';
+import * as ɵngcc14 from './svg-radial-gradient.component';
+import * as ɵngcc15 from './timeline/timeline.component';
+import * as ɵngcc16 from './legend/advanced-legend.component';
+import * as ɵngcc17 from '../utils/visibility-observer';
+import * as ɵngcc18 from '@angular/common';
+import * as ɵngcc19 from './axes/axes.module';
+import * as ɵngcc20 from './tooltip/tooltip.module';
 export declare class ChartCommonModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChartCommonModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<ChartCommonModule, [typeof ɵngcc1.AreaComponent, typeof ɵngcc2.BaseChartComponent, typeof ɵngcc3.CountUpDirective, typeof ɵngcc4.TooltipArea, typeof ɵngcc5.ChartComponent, typeof ɵngcc6.LegendComponent, typeof ɵngcc7.LegendEntryComponent, typeof ɵngcc8.ScaleLegendComponent, typeof ɵngcc9.CircleComponent, typeof ɵngcc10.CircleSeriesComponent, typeof ɵngcc11.GridPanelComponent, typeof ɵngcc12.GridPanelSeriesComponent, typeof ɵngcc13.SvgLinearGradientComponent, typeof ɵngcc14.SvgRadialGradientComponent, typeof ɵngcc15.Timeline, typeof ɵngcc16.AdvancedLegendComponent, typeof ɵngcc17.VisibilityObserver], [typeof ɵngcc18.CommonModule, typeof ɵngcc19.AxesModule, typeof ɵngcc20.TooltipModule], [typeof ɵngcc18.CommonModule, typeof ɵngcc19.AxesModule, typeof ɵngcc20.TooltipModule, typeof ɵngcc1.AreaComponent, typeof ɵngcc2.BaseChartComponent, typeof ɵngcc3.CountUpDirective, typeof ɵngcc4.TooltipArea, typeof ɵngcc5.ChartComponent, typeof ɵngcc6.LegendComponent, typeof ɵngcc7.LegendEntryComponent, typeof ɵngcc8.ScaleLegendComponent, typeof ɵngcc9.CircleComponent, typeof ɵngcc10.CircleSeriesComponent, typeof ɵngcc11.GridPanelComponent, typeof ɵngcc12.GridPanelSeriesComponent, typeof ɵngcc13.SvgLinearGradientComponent, typeof ɵngcc14.SvgRadialGradientComponent, typeof ɵngcc15.Timeline, typeof ɵngcc16.AdvancedLegendComponent, typeof ɵngcc17.VisibilityObserver]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<ChartCommonModule>;
 }
+
+//# sourceMappingURL=chart-common.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/chart-common.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/chart-common.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..b971ff0
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/chart-common.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class ChartCommonModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/chart-common.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/chart-common.module.d.ts.map
new file mode 100644
index 0000000..f7b8fde
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/chart-common.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"chart-common.module.d.ts","sources":["chart-common.module.d.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA","sourcesContent":["export declare class ChartCommonModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/charts/chart.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/charts/chart.component.d.ts
index f866a90..0ccc479 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/charts/chart.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/charts/chart.component.d.ts
@@ -1,5 +1,6 @@
 import { OnChanges, EventEmitter, SimpleChanges } from '@angular/core';
 import { LegendOptions, LegendType, LegendPosition } from '../types/legend.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class ChartComponent implements OnChanges {
     view: [number, number];
     showLegend: boolean;
@@ -22,4 +23,8 @@ export declare class ChartComponent implements OnChanges {
     ngOnChanges(changes: SimpleChanges): void;
     update(): void;
     getLegendType(): LegendType;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChartComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ChartComponent, "ngx-charts-chart", never, { "showLegend": "showLegend"; "animations": "animations"; "legendType": "legendType"; "view": "view"; "legendOptions": "legendOptions"; "activeEntries": "activeEntries"; }, { "legendLabelClick": "legendLabelClick"; "legendLabelActivate": "legendLabelActivate"; "legendLabelDeactivate": "legendLabelDeactivate"; }, never, ["*"]>;
 }
+
+//# sourceMappingURL=chart.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/charts/chart.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/charts/chart.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..f866a90
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/charts/chart.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,25 @@
+import { OnChanges, EventEmitter, SimpleChanges } from '@angular/core';
+import { LegendOptions, LegendType, LegendPosition } from '../types/legend.model';
+export declare class ChartComponent implements OnChanges {
+    view: [number, number];
+    showLegend: boolean;
+    legendOptions: LegendOptions;
+    legendType: LegendType;
+    activeEntries: any[];
+    animations: boolean;
+    legendLabelClick: EventEmitter<string>;
+    legendLabelActivate: EventEmitter<{
+        name: string;
+    }>;
+    legendLabelDeactivate: EventEmitter<{
+        name: string;
+    }>;
+    chartWidth: number;
+    title: string;
+    legendWidth: number;
+    readonly LegendPosition: typeof LegendPosition;
+    readonly LegendType: typeof LegendType;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getLegendType(): LegendType;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/charts/chart.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/charts/chart.component.d.ts.map
new file mode 100644
index 0000000..0b16b8a
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/charts/chart.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"chart.component.d.ts","sources":["chart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, EventEmitter, SimpleChanges } from '@angular/core';\nimport { LegendOptions, LegendType, LegendPosition } from '../types/legend.model';\nexport declare class ChartComponent implements OnChanges {\n    view: [number, number];\n    showLegend: boolean;\n    legendOptions: LegendOptions;\n    legendType: LegendType;\n    activeEntries: any[];\n    animations: boolean;\n    legendLabelClick: EventEmitter<string>;\n    legendLabelActivate: EventEmitter<{\n        name: string;\n    }>;\n    legendLabelDeactivate: EventEmitter<{\n        name: string;\n    }>;\n    chartWidth: number;\n    title: string;\n    legendWidth: number;\n    readonly LegendPosition: typeof LegendPosition;\n    readonly LegendType: typeof LegendType;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getLegendType(): LegendType;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/circle-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/circle-series.component.d.ts
index 03bc032..2c87021 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/circle-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/circle-series.component.d.ts
@@ -6,6 +6,7 @@ import { StyleTypes } from './tooltip/style.type';
 import { BarOrientation } from './types/bar-orientation.enum';
 import { Gradient } from './types/gradient.interface';
 import { ScaleType } from './types/scale-type.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare enum SeriesType {
     Standard = "standard",
     Stacked = "stacked"
@@ -71,4 +72,8 @@ export declare class CircleSeriesComponent implements OnChanges, OnInit {
     isActive(entry: any): boolean;
     activateCircle(): void;
     deactivateCircle(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<CircleSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CircleSeriesComponent, "g[ngx-charts-circle-series]", never, { "type": "type"; "tooltipDisabled": "tooltipDisabled"; "data": "data"; "xScale": "xScale"; "yScale": "yScale"; "colors": "colors"; "scaleType": "scaleType"; "visibleValue": "visibleValue"; "activeEntries": "activeEntries"; "tooltipTemplate": "tooltipTemplate"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
+
+//# sourceMappingURL=circle-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/circle-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/circle-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..03bc032
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/circle-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,74 @@
+import { EventEmitter, OnChanges, OnInit, TemplateRef } from '@angular/core';
+import { ColorHelper } from './color.helper';
+import { DataItem, Series, StringOrNumberOrDate } from '../models/chart-data.model';
+import { PlacementTypes } from './tooltip/position';
+import { StyleTypes } from './tooltip/style.type';
+import { BarOrientation } from './types/bar-orientation.enum';
+import { Gradient } from './types/gradient.interface';
+import { ScaleType } from './types/scale-type.enum';
+export declare enum SeriesType {
+    Standard = "standard",
+    Stacked = "stacked"
+}
+export interface Circle {
+    classNames: string[];
+    value: string | number;
+    label: string;
+    data: DataItem;
+    cx: number;
+    cy: number;
+    radius: number;
+    height: number;
+    tooltipLabel: string;
+    color: string;
+    opacity: number;
+    seriesName: string;
+    gradientStops: Gradient[];
+    min: number;
+    max: number;
+}
+export declare class CircleSeriesComponent implements OnChanges, OnInit {
+    data: Series;
+    type: SeriesType;
+    xScale: any;
+    yScale: any;
+    colors: ColorHelper;
+    scaleType: ScaleType;
+    visibleValue: boolean;
+    activeEntries: any[];
+    tooltipDisabled: boolean;
+    tooltipTemplate: TemplateRef<any>;
+    select: EventEmitter<DataItem>;
+    activate: EventEmitter<{
+        name: StringOrNumberOrDate;
+    }>;
+    deactivate: EventEmitter<{
+        name: StringOrNumberOrDate;
+    }>;
+    areaPath: any;
+    circle: Circle;
+    barVisible: boolean;
+    gradientId: string;
+    gradientFill: string;
+    barOrientation: typeof BarOrientation;
+    placementTypes: typeof PlacementTypes;
+    styleTypes: typeof StyleTypes;
+    ngOnInit(): void;
+    ngOnChanges(): void;
+    update(): void;
+    getActiveCircle(): Circle;
+    mapDataPointToCircle(d: any, i: number): Circle;
+    getTooltipText({ tooltipLabel, value, seriesName, min, max }: {
+        tooltipLabel: string;
+        value: any;
+        seriesName: string;
+        min: number;
+        max: number;
+    }): string;
+    getTooltipMinMaxText(min: number, max: number): string;
+    getGradientStops(color: string): Gradient[];
+    onClick(data: DataItem): void;
+    isActive(entry: any): boolean;
+    activateCircle(): void;
+    deactivateCircle(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/circle-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/circle-series.component.d.ts.map
new file mode 100644
index 0000000..3d8e64c
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/circle-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"circle-series.component.d.ts","sources":["circle-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, OnInit, TemplateRef } from '@angular/core';\nimport { ColorHelper } from './color.helper';\nimport { DataItem, Series, StringOrNumberOrDate } from '../models/chart-data.model';\nimport { PlacementTypes } from './tooltip/position';\nimport { StyleTypes } from './tooltip/style.type';\nimport { BarOrientation } from './types/bar-orientation.enum';\nimport { Gradient } from './types/gradient.interface';\nimport { ScaleType } from './types/scale-type.enum';\nexport declare enum SeriesType {\n    Standard = \"standard\",\n    Stacked = \"stacked\"\n}\nexport interface Circle {\n    classNames: string[];\n    value: string | number;\n    label: string;\n    data: DataItem;\n    cx: number;\n    cy: number;\n    radius: number;\n    height: number;\n    tooltipLabel: string;\n    color: string;\n    opacity: number;\n    seriesName: string;\n    gradientStops: Gradient[];\n    min: number;\n    max: number;\n}\nexport declare class CircleSeriesComponent implements OnChanges, OnInit {\n    data: Series;\n    type: SeriesType;\n    xScale: any;\n    yScale: any;\n    colors: ColorHelper;\n    scaleType: ScaleType;\n    visibleValue: boolean;\n    activeEntries: any[];\n    tooltipDisabled: boolean;\n    tooltipTemplate: TemplateRef<any>;\n    select: EventEmitter<DataItem>;\n    activate: EventEmitter<{\n        name: StringOrNumberOrDate;\n    }>;\n    deactivate: EventEmitter<{\n        name: StringOrNumberOrDate;\n    }>;\n    areaPath: any;\n    circle: Circle;\n    barVisible: boolean;\n    gradientId: string;\n    gradientFill: string;\n    barOrientation: typeof BarOrientation;\n    placementTypes: typeof PlacementTypes;\n    styleTypes: typeof StyleTypes;\n    ngOnInit(): void;\n    ngOnChanges(): void;\n    update(): void;\n    getActiveCircle(): Circle;\n    mapDataPointToCircle(d: any, i: number): Circle;\n    getTooltipText({ tooltipLabel, value, seriesName, min, max }: {\n        tooltipLabel: string;\n        value: any;\n        seriesName: string;\n        min: number;\n        max: number;\n    }): string;\n    getTooltipMinMaxText(min: number, max: number): string;\n    getGradientStops(color: string): Gradient[];\n    onClick(data: DataItem): void;\n    isActive(entry: any): boolean;\n    activateCircle(): void;\n    deactivateCircle(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/circle.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/circle.component.d.ts
index 38dd915..0ab9451 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/circle.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/circle.component.d.ts
@@ -1,4 +1,5 @@
 import { SimpleChanges, EventEmitter, OnChanges } from '@angular/core';
+import * as ɵngcc0 from '@angular/core';
 export declare class CircleComponent implements OnChanges {
     cx: number;
     cy: number;
@@ -16,4 +17,8 @@ export declare class CircleComponent implements OnChanges {
     onMouseEnter(): void;
     onMouseLeave(): void;
     ngOnChanges(changes: SimpleChanges): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<CircleComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CircleComponent, "g[ngx-charts-circle]", never, { "classNames": "classNames"; "cx": "cx"; "cy": "cy"; "r": "r"; "fill": "fill"; "stroke": "stroke"; "data": "data"; "circleOpacity": "circleOpacity"; "pointerEvents": "pointerEvents"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
+
+//# sourceMappingURL=circle.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/circle.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/circle.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..38dd915
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/circle.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,19 @@
+import { SimpleChanges, EventEmitter, OnChanges } from '@angular/core';
+export declare class CircleComponent implements OnChanges {
+    cx: number;
+    cy: number;
+    r: number;
+    fill: string;
+    stroke: string;
+    data: number | string;
+    classNames: string[] | string;
+    circleOpacity: number;
+    pointerEvents: string;
+    select: EventEmitter<number | string>;
+    activate: EventEmitter<number | string>;
+    deactivate: EventEmitter<number | string>;
+    onClick(): void;
+    onMouseEnter(): void;
+    onMouseLeave(): void;
+    ngOnChanges(changes: SimpleChanges): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/circle.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/circle.component.d.ts.map
new file mode 100644
index 0000000..c226bd6
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/circle.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"circle.component.d.ts","sources":["circle.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { SimpleChanges, EventEmitter, OnChanges } from '@angular/core';\nexport declare class CircleComponent implements OnChanges {\n    cx: number;\n    cy: number;\n    r: number;\n    fill: string;\n    stroke: string;\n    data: number | string;\n    classNames: string[] | string;\n    circleOpacity: number;\n    pointerEvents: string;\n    select: EventEmitter<number | string>;\n    activate: EventEmitter<number | string>;\n    deactivate: EventEmitter<number | string>;\n    onClick(): void;\n    onMouseEnter(): void;\n    onMouseLeave(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/count/count.directive.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/count/count.directive.d.ts
index 8020711..98dba7d 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/count/count.directive.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/count/count.directive.d.ts
@@ -8,6 +8,7 @@ import { EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular
  *
  * @export
  */
+import * as ɵngcc0 from '@angular/core';
 export declare class CountUpDirective implements OnDestroy {
     private cd;
     countDuration: number;
@@ -32,4 +33,8 @@ export declare class CountUpDirective implements OnDestroy {
     constructor(cd: ChangeDetectorRef, element: ElementRef);
     ngOnDestroy(): void;
     start(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<CountUpDirective, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CountUpDirective, "[ngx-charts-count-up]", never, { "countDuration": "countDuration"; "countPrefix": "countPrefix"; "countSuffix": "countSuffix"; "countDecimals": "countDecimals"; "countTo": "countTo"; "countFrom": "countFrom"; "valueFormatting": "valueFormatting"; }, { "countChange": "countChange"; "countFinish": "countFinish"; }, never, never>;
 }
+
+//# sourceMappingURL=count.directive.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/count/count.directive.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/count/count.directive.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..8020711
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/count/count.directive.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,35 @@
+import { EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';
+/**
+ * Count up component
+ *
+ * Loosely inspired by:
+ *  - https://github.com/izupet/angular2-counto
+ *  - https://inorganik.github.io/countUp.js/
+ *
+ * @export
+ */
+export declare class CountUpDirective implements OnDestroy {
+    private cd;
+    countDuration: number;
+    countPrefix: string;
+    countSuffix: string;
+    valueFormatting: any;
+    set countDecimals(val: number);
+    get countDecimals(): number;
+    set countTo(val: any);
+    get countTo(): any;
+    set countFrom(val: any);
+    get countFrom(): any;
+    countChange: EventEmitter<any>;
+    countFinish: EventEmitter<any>;
+    nativeElement: any;
+    value: any;
+    formattedValue: string;
+    private animationReq;
+    private _countDecimals;
+    private _countTo;
+    private _countFrom;
+    constructor(cd: ChangeDetectorRef, element: ElementRef);
+    ngOnDestroy(): void;
+    start(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/count/count.directive.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/count/count.directive.d.ts.map
new file mode 100644
index 0000000..bbf0bad
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/count/count.directive.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"count.directive.d.ts","sources":["count.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\nexport declare class CountUpDirective implements OnDestroy {\n    private cd;\n    countDuration: number;\n    countPrefix: string;\n    countSuffix: string;\n    valueFormatting: any;\n    set countDecimals(val: number);\n    get countDecimals(): number;\n    set countTo(val: any);\n    get countTo(): any;\n    set countFrom(val: any);\n    get countFrom(): any;\n    countChange: EventEmitter<any>;\n    countFinish: EventEmitter<any>;\n    nativeElement: any;\n    value: any;\n    formattedValue: string;\n    private animationReq;\n    private _countDecimals;\n    private _countTo;\n    private _countFrom;\n    constructor(cd: ChangeDetectorRef, element: ElementRef);\n    ngOnDestroy(): void;\n    start(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/grid-panel-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel-series.component.d.ts
index 773940e..26c8d23 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/grid-panel-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel-series.component.d.ts
@@ -1,6 +1,7 @@
 import { SimpleChanges, OnChanges } from '@angular/core';
 import { BarOrientation } from './types/bar-orientation.enum';
 import { ViewDimensions } from './types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 interface GridPanel {
     class: ClassEnum;
     height: number;
@@ -23,5 +24,9 @@ export declare class GridPanelSeriesComponent implements OnChanges {
     ngOnChanges(changes: SimpleChanges): void;
     update(): void;
     getGridPanels(): GridPanel[];
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridPanelSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GridPanelSeriesComponent, "g[ngx-charts-grid-panel-series]", never, { "data": "data"; "dims": "dims"; "xScale": "xScale"; "yScale": "yScale"; "orient": "orient"; }, {}, never, never>;
 }
 export {};
+
+//# sourceMappingURL=grid-panel-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/grid-panel-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..773940e
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,27 @@
+import { SimpleChanges, OnChanges } from '@angular/core';
+import { BarOrientation } from './types/bar-orientation.enum';
+import { ViewDimensions } from './types/view-dimension.interface';
+interface GridPanel {
+    class: ClassEnum;
+    height: number;
+    name: string;
+    width: number;
+    x: number;
+    y: number;
+}
+declare enum ClassEnum {
+    Odd = "odd",
+    Even = "even"
+}
+export declare class GridPanelSeriesComponent implements OnChanges {
+    gridPanels: GridPanel[];
+    data: any[];
+    dims: ViewDimensions;
+    xScale: any;
+    yScale: any;
+    orient: BarOrientation;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getGridPanels(): GridPanel[];
+}
+export {};
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/grid-panel-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel-series.component.d.ts.map
new file mode 100644
index 0000000..70915f7
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"grid-panel-series.component.d.ts","sources":["grid-panel-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { SimpleChanges, OnChanges } from '@angular/core';\nimport { BarOrientation } from './types/bar-orientation.enum';\nimport { ViewDimensions } from './types/view-dimension.interface';\ninterface GridPanel {\n    class: ClassEnum;\n    height: number;\n    name: string;\n    width: number;\n    x: number;\n    y: number;\n}\ndeclare enum ClassEnum {\n    Odd = \"odd\",\n    Even = \"even\"\n}\nexport declare class GridPanelSeriesComponent implements OnChanges {\n    gridPanels: GridPanel[];\n    data: any[];\n    dims: ViewDimensions;\n    xScale: any;\n    yScale: any;\n    orient: BarOrientation;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getGridPanels(): GridPanel[];\n}\nexport {};\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/grid-panel.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel.component.d.ts
index bcb0600..88fae90 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/grid-panel.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel.component.d.ts
@@ -1,6 +1,11 @@
+import * as ɵngcc0 from '@angular/core';
 export declare class GridPanelComponent {
     width: number;
     height: number;
     x: number;
     y: number;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridPanelComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GridPanelComponent, "g[ngx-charts-grid-panel]", never, { "width": "width"; "height": "height"; "x": "x"; "y": "y"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=grid-panel.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/grid-panel.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..bcb0600
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,6 @@
+export declare class GridPanelComponent {
+    width: number;
+    height: number;
+    x: number;
+    y: number;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/grid-panel.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel.component.d.ts.map
new file mode 100644
index 0000000..d08cc9b
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/grid-panel.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"grid-panel.component.d.ts","sources":["grid-panel.component.d.ts"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["export declare class GridPanelComponent {\n    width: number;\n    height: number;\n    x: number;\n    y: number;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.d.ts
index 005d21e..d49bee0 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.d.ts
@@ -1,6 +1,7 @@
 import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
 import { DataItem, StringOrNumberOrDate } from '../../models/chart-data.model';
 import { ColorHelper } from '../color.helper';
+import * as ɵngcc0 from '@angular/core';
 export interface AdvancedLegendItem {
     value: StringOrNumberOrDate;
     _value: StringOrNumberOrDate;
@@ -32,4 +33,8 @@ export declare class AdvancedLegendComponent implements OnChanges {
     update(): void;
     getLegendItems(): AdvancedLegendItem[];
     trackBy(index: number, item: AdvancedLegendItem): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<AdvancedLegendComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AdvancedLegendComponent, "ngx-charts-advanced-legend", never, { "label": "label"; "animations": "animations"; "labelFormatting": "labelFormatting"; "percentageFormatting": "percentageFormatting"; "width": "width"; "data": "data"; "colors": "colors"; "valueFormatting": "valueFormatting"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
+
+//# sourceMappingURL=advanced-legend.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..005d21e
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,35 @@
+import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
+import { DataItem, StringOrNumberOrDate } from '../../models/chart-data.model';
+import { ColorHelper } from '../color.helper';
+export interface AdvancedLegendItem {
+    value: StringOrNumberOrDate;
+    _value: StringOrNumberOrDate;
+    color: string;
+    data: DataItem;
+    label: string;
+    displayLabel: string;
+    originalLabel: string;
+    percentage: string;
+}
+export declare class AdvancedLegendComponent implements OnChanges {
+    width: number;
+    data: DataItem[];
+    colors: ColorHelper;
+    label: string;
+    animations: boolean;
+    select: EventEmitter<DataItem>;
+    activate: EventEmitter<DataItem>;
+    deactivate: EventEmitter<DataItem>;
+    legendItems: AdvancedLegendItem[];
+    total: number;
+    roundedTotal: number;
+    valueFormatting: (value: StringOrNumberOrDate) => any;
+    labelFormatting: (value: string) => string;
+    percentageFormatting: (value: number) => number;
+    defaultValueFormatting: (value: StringOrNumberOrDate) => string;
+    ngOnChanges(changes: SimpleChanges): void;
+    getTotal(): number;
+    update(): void;
+    getLegendItems(): AdvancedLegendItem[];
+    trackBy(index: number, item: AdvancedLegendItem): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.d.ts.map
new file mode 100644
index 0000000..fdef085
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/advanced-legend.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"advanced-legend.component.d.ts","sources":["advanced-legend.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { DataItem, StringOrNumberOrDate } from '../../models/chart-data.model';\nimport { ColorHelper } from '../color.helper';\nexport interface AdvancedLegendItem {\n    value: StringOrNumberOrDate;\n    _value: StringOrNumberOrDate;\n    color: string;\n    data: DataItem;\n    label: string;\n    displayLabel: string;\n    originalLabel: string;\n    percentage: string;\n}\nexport declare class AdvancedLegendComponent implements OnChanges {\n    width: number;\n    data: DataItem[];\n    colors: ColorHelper;\n    label: string;\n    animations: boolean;\n    select: EventEmitter<DataItem>;\n    activate: EventEmitter<DataItem>;\n    deactivate: EventEmitter<DataItem>;\n    legendItems: AdvancedLegendItem[];\n    total: number;\n    roundedTotal: number;\n    valueFormatting: (value: StringOrNumberOrDate) => any;\n    labelFormatting: (value: string) => string;\n    percentageFormatting: (value: number) => number;\n    defaultValueFormatting: (value: StringOrNumberOrDate) => string;\n    ngOnChanges(changes: SimpleChanges): void;\n    getTotal(): number;\n    update(): void;\n    getLegendItems(): AdvancedLegendItem[];\n    trackBy(index: number, item: AdvancedLegendItem): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/legend-entry.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend-entry.component.d.ts
index 6ea43ed..e9aedb2 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/legend/legend-entry.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend-entry.component.d.ts
@@ -1,4 +1,5 @@
 import { EventEmitter } from '@angular/core';
+import * as ɵngcc0 from '@angular/core';
 export declare class LegendEntryComponent {
     color: string;
     label: string;
@@ -15,4 +16,8 @@ export declare class LegendEntryComponent {
     get trimmedLabel(): string;
     onMouseEnter(): void;
     onMouseLeave(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<LegendEntryComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LegendEntryComponent, "ngx-charts-legend-entry", never, { "isActive": "isActive"; "color": "color"; "label": "label"; "formattedLabel": "formattedLabel"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; "toggle": "toggle"; }, never, never>;
 }
+
+//# sourceMappingURL=legend-entry.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/legend-entry.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend-entry.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..6ea43ed
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend-entry.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,18 @@
+import { EventEmitter } from '@angular/core';
+export declare class LegendEntryComponent {
+    color: string;
+    label: string;
+    formattedLabel: string;
+    isActive: boolean;
+    select: EventEmitter<string>;
+    activate: EventEmitter<{
+        name: string;
+    }>;
+    deactivate: EventEmitter<{
+        name: string;
+    }>;
+    toggle: EventEmitter<string>;
+    get trimmedLabel(): string;
+    onMouseEnter(): void;
+    onMouseLeave(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/legend-entry.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend-entry.component.d.ts.map
new file mode 100644
index 0000000..1cf8c1e
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend-entry.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"legend-entry.component.d.ts","sources":["legend-entry.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\nexport declare class LegendEntryComponent {\n    color: string;\n    label: string;\n    formattedLabel: string;\n    isActive: boolean;\n    select: EventEmitter<string>;\n    activate: EventEmitter<{\n        name: string;\n    }>;\n    deactivate: EventEmitter<{\n        name: string;\n    }>;\n    toggle: EventEmitter<string>;\n    get trimmedLabel(): string;\n    onMouseEnter(): void;\n    onMouseLeave(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/legend.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend.component.d.ts
index d2d8c59..83af8f8 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/legend/legend.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend.component.d.ts
@@ -1,5 +1,6 @@
 import { EventEmitter, SimpleChanges, OnChanges, ChangeDetectorRef } from '@angular/core';
 import { ColorHelper } from '../color.helper';
+import * as ɵngcc0 from '@angular/core';
 export interface LegendEntry {
     color: string;
     formattedLabel: string;
@@ -34,4 +35,8 @@ export declare class LegendComponent implements OnChanges {
         name: string;
     }): void;
     trackBy(index: number, item: LegendEntry): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<LegendComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LegendComponent, "ngx-charts-legend", never, { "horizontal": "horizontal"; "data": "data"; "title": "title"; "colors": "colors"; "height": "height"; "width": "width"; "activeEntries": "activeEntries"; }, { "labelClick": "labelClick"; "labelActivate": "labelActivate"; "labelDeactivate": "labelDeactivate"; }, never, never>;
 }
+
+//# sourceMappingURL=legend.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/legend.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..d2d8c59
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,37 @@
+import { EventEmitter, SimpleChanges, OnChanges, ChangeDetectorRef } from '@angular/core';
+import { ColorHelper } from '../color.helper';
+export interface LegendEntry {
+    color: string;
+    formattedLabel: string;
+    label: string;
+}
+export declare class LegendComponent implements OnChanges {
+    private cd;
+    data: string[];
+    title: string;
+    colors: ColorHelper;
+    height: number;
+    width: number;
+    activeEntries: any;
+    horizontal: boolean;
+    labelClick: EventEmitter<string>;
+    labelActivate: EventEmitter<{
+        name: string;
+    }>;
+    labelDeactivate: EventEmitter<{
+        name: string;
+    }>;
+    legendEntries: LegendEntry[];
+    constructor(cd: ChangeDetectorRef);
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getLegendEntries(): LegendEntry[];
+    isActive(entry: LegendEntry): boolean;
+    activate(item: {
+        name: string;
+    }): void;
+    deactivate(item: {
+        name: string;
+    }): void;
+    trackBy(index: number, item: LegendEntry): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/legend.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend.component.d.ts.map
new file mode 100644
index 0000000..cc1580c
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/legend.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"legend.component.d.ts","sources":["legend.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, SimpleChanges, OnChanges, ChangeDetectorRef } from '@angular/core';\nimport { ColorHelper } from '../color.helper';\nexport interface LegendEntry {\n    color: string;\n    formattedLabel: string;\n    label: string;\n}\nexport declare class LegendComponent implements OnChanges {\n    private cd;\n    data: string[];\n    title: string;\n    colors: ColorHelper;\n    height: number;\n    width: number;\n    activeEntries: any;\n    horizontal: boolean;\n    labelClick: EventEmitter<string>;\n    labelActivate: EventEmitter<{\n        name: string;\n    }>;\n    labelDeactivate: EventEmitter<{\n        name: string;\n    }>;\n    legendEntries: LegendEntry[];\n    constructor(cd: ChangeDetectorRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getLegendEntries(): LegendEntry[];\n    isActive(entry: LegendEntry): boolean;\n    activate(item: {\n        name: string;\n    }): void;\n    deactivate(item: {\n        name: string;\n    }): void;\n    trackBy(index: number, item: LegendEntry): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/scale-legend.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/legend/scale-legend.component.d.ts
index 2508f47..c0cc4fa 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/legend/scale-legend.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/scale-legend.component.d.ts
@@ -1,4 +1,5 @@
 import { OnChanges, SimpleChanges } from '@angular/core';
+import * as ɵngcc0 from '@angular/core';
 export declare class ScaleLegendComponent implements OnChanges {
     valueRange: number[];
     colors: any;
@@ -13,4 +14,8 @@ export declare class ScaleLegendComponent implements OnChanges {
      * @param splits array of splits on a scale of (0, 1)
      */
     gradientString(colors: string[], splits: number[]): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<ScaleLegendComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ScaleLegendComponent, "ngx-charts-scale-legend", never, { "horizontal": "horizontal"; "valueRange": "valueRange"; "colors": "colors"; "height": "height"; "width": "width"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=scale-legend.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/scale-legend.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/legend/scale-legend.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..2508f47
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/scale-legend.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,16 @@
+import { OnChanges, SimpleChanges } from '@angular/core';
+export declare class ScaleLegendComponent implements OnChanges {
+    valueRange: number[];
+    colors: any;
+    height: number;
+    width: number;
+    horizontal: boolean;
+    gradient: string;
+    ngOnChanges(changes: SimpleChanges): void;
+    /**
+     * Generates the string used in the gradient stylesheet properties
+     * @param colors array of colors
+     * @param splits array of splits on a scale of (0, 1)
+     */
+    gradientString(colors: string[], splits: number[]): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/legend/scale-legend.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/legend/scale-legend.component.d.ts.map
new file mode 100644
index 0000000..d9c0dae
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/legend/scale-legend.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"scale-legend.component.d.ts","sources":["scale-legend.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, SimpleChanges } from '@angular/core';\nexport declare class ScaleLegendComponent implements OnChanges {\n    valueRange: number[];\n    colors: any;\n    height: number;\n    width: number;\n    horizontal: boolean;\n    gradient: string;\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Generates the string used in the gradient stylesheet properties\n     * @param colors array of colors\n     * @param splits array of splits on a scale of (0, 1)\n     */\n    gradientString(colors: string[], splits: number[]): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.d.ts
index 772bdc8..368ed26 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.d.ts
@@ -1,6 +1,7 @@
 import { OnChanges, SimpleChanges } from '@angular/core';
 import { BarOrientation } from './types/bar-orientation.enum';
 import { Gradient } from './types/gradient.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class SvgLinearGradientComponent implements OnChanges {
     orientation: BarOrientation;
     name: string;
@@ -10,4 +11,8 @@ export declare class SvgLinearGradientComponent implements OnChanges {
     y1: string;
     y2: string;
     ngOnChanges(changes: SimpleChanges): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<SvgLinearGradientComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SvgLinearGradientComponent, "g[ngx-charts-svg-linear-gradient]", never, { "orientation": "orientation"; "name": "name"; "stops": "stops"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=svg-linear-gradient.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..772bdc8
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,13 @@
+import { OnChanges, SimpleChanges } from '@angular/core';
+import { BarOrientation } from './types/bar-orientation.enum';
+import { Gradient } from './types/gradient.interface';
+export declare class SvgLinearGradientComponent implements OnChanges {
+    orientation: BarOrientation;
+    name: string;
+    stops: Gradient[];
+    x1: string;
+    x2: string;
+    y1: string;
+    y2: string;
+    ngOnChanges(changes: SimpleChanges): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.d.ts.map
new file mode 100644
index 0000000..ae517f2
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/svg-linear-gradient.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"svg-linear-gradient.component.d.ts","sources":["svg-linear-gradient.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, SimpleChanges } from '@angular/core';\nimport { BarOrientation } from './types/bar-orientation.enum';\nimport { Gradient } from './types/gradient.interface';\nexport declare class SvgLinearGradientComponent implements OnChanges {\n    orientation: BarOrientation;\n    name: string;\n    stops: Gradient[];\n    x1: string;\n    x2: string;\n    y1: string;\n    y2: string;\n    ngOnChanges(changes: SimpleChanges): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.d.ts
index a7ec0b9..d6cd58e 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.d.ts
@@ -1,5 +1,6 @@
 import { OnChanges, SimpleChanges } from '@angular/core';
 import { Gradient } from './types/gradient.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class SvgRadialGradientComponent implements OnChanges {
     color: string;
     name: string;
@@ -13,4 +14,8 @@ export declare class SvgRadialGradientComponent implements OnChanges {
     private stopsInput;
     private stopsDefault;
     ngOnChanges(changes: SimpleChanges): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<SvgRadialGradientComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SvgRadialGradientComponent, "g[ngx-charts-svg-radial-gradient]", never, { "endOpacity": "endOpacity"; "cx": "cx"; "cy": "cy"; "stops": "stops"; "color": "color"; "name": "name"; "startOpacity": "startOpacity"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=svg-radial-gradient.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..a7ec0b9
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,16 @@
+import { OnChanges, SimpleChanges } from '@angular/core';
+import { Gradient } from './types/gradient.interface';
+export declare class SvgRadialGradientComponent implements OnChanges {
+    color: string;
+    name: string;
+    startOpacity: number;
+    endOpacity: number;
+    cx: number;
+    cy: number;
+    get stops(): Gradient[];
+    set stops(value: Gradient[]);
+    r: string;
+    private stopsInput;
+    private stopsDefault;
+    ngOnChanges(changes: SimpleChanges): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.d.ts.map
new file mode 100644
index 0000000..7a314bf
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/svg-radial-gradient.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"svg-radial-gradient.component.d.ts","sources":["svg-radial-gradient.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, SimpleChanges } from '@angular/core';\nimport { Gradient } from './types/gradient.interface';\nexport declare class SvgRadialGradientComponent implements OnChanges {\n    color: string;\n    name: string;\n    startOpacity: number;\n    endOpacity: number;\n    cx: number;\n    cy: number;\n    get stops(): Gradient[];\n    set stops(value: Gradient[]);\n    r: string;\n    private stopsInput;\n    private stopsDefault;\n    ngOnChanges(changes: SimpleChanges): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/timeline/timeline.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/timeline/timeline.component.d.ts
index a0d4623..15c4598 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/timeline/timeline.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/timeline/timeline.component.d.ts
@@ -1,6 +1,7 @@
 import { EventEmitter, ElementRef, OnChanges, ChangeDetectorRef, SimpleChanges } from '@angular/core';
 import { ScaleType } from '../types/scale-type.enum';
 import { ViewDimensions } from '../types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class Timeline implements OnChanges {
     private cd;
     view: [number, number];
@@ -30,4 +31,8 @@ export declare class Timeline implements OnChanges {
     addBrush(): void;
     updateBrush(): void;
     getDims(): ViewDimensions;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<Timeline, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Timeline, "g[ngx-charts-timeline]", never, { "height": "height"; "view": "view"; "results": "results"; "scheme": "scheme"; "customColors": "customColors"; "legend": "legend"; "autoScale": "autoScale"; "scaleType": "scaleType"; }, { "select": "select"; "onDomainChange": "onDomainChange"; }, never, ["*"]>;
 }
+
+//# sourceMappingURL=timeline.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/timeline/timeline.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/timeline/timeline.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..a0d4623
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/timeline/timeline.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,33 @@
+import { EventEmitter, ElementRef, OnChanges, ChangeDetectorRef, SimpleChanges } from '@angular/core';
+import { ScaleType } from '../types/scale-type.enum';
+import { ViewDimensions } from '../types/view-dimension.interface';
+export declare class Timeline implements OnChanges {
+    private cd;
+    view: [number, number];
+    results: any;
+    scheme: any;
+    customColors: any;
+    legend: boolean;
+    autoScale: boolean;
+    scaleType: ScaleType;
+    height: number;
+    select: EventEmitter<any>;
+    onDomainChange: EventEmitter<any>;
+    element: HTMLElement;
+    dims: ViewDimensions;
+    xDomain: any[];
+    xScale: any;
+    brush: any;
+    transform: string;
+    initialized: boolean;
+    filterId: string;
+    filter: string;
+    constructor(element: ElementRef, cd: ChangeDetectorRef);
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getXDomain(): any[];
+    getXScale(): any;
+    addBrush(): void;
+    updateBrush(): void;
+    getDims(): ViewDimensions;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/timeline/timeline.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/timeline/timeline.component.d.ts.map
new file mode 100644
index 0000000..ddad9f1
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/timeline/timeline.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"timeline.component.d.ts","sources":["timeline.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, OnChanges, ChangeDetectorRef, SimpleChanges } from '@angular/core';\nimport { ScaleType } from '../types/scale-type.enum';\nimport { ViewDimensions } from '../types/view-dimension.interface';\nexport declare class Timeline implements OnChanges {\n    private cd;\n    view: [number, number];\n    results: any;\n    scheme: any;\n    customColors: any;\n    legend: boolean;\n    autoScale: boolean;\n    scaleType: ScaleType;\n    height: number;\n    select: EventEmitter<any>;\n    onDomainChange: EventEmitter<any>;\n    element: HTMLElement;\n    dims: ViewDimensions;\n    xDomain: any[];\n    xScale: any;\n    brush: any;\n    transform: string;\n    initialized: boolean;\n    filterId: string;\n    filter: string;\n    constructor(element: ElementRef, cd: ChangeDetectorRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getXDomain(): any[];\n    getXScale(): any;\n    addBrush(): void;\n    updateBrush(): void;\n    getDims(): ViewDimensions;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip-area.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/tooltip-area.component.d.ts
index 659eea1..d217738 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/tooltip-area.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip-area.component.d.ts
@@ -3,6 +3,7 @@ import { ColorHelper } from '../common/color.helper';
 import { PlacementTypes } from './tooltip/position';
 import { StyleTypes } from './tooltip/style.type';
 import { ViewDimensions } from './types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export interface Tooltip {
     color: string;
     d0: number;
@@ -41,4 +42,8 @@ export declare class TooltipArea {
     showTooltip(): void;
     hideTooltip(): void;
     getToolTipText(tooltipItem: Tooltip): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<TooltipArea, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TooltipArea, "g[ngx-charts-tooltip-area]", never, { "showPercentage": "showPercentage"; "tooltipDisabled": "tooltipDisabled"; "dims": "dims"; "xSet": "xSet"; "xScale": "xScale"; "yScale": "yScale"; "results": "results"; "colors": "colors"; "tooltipTemplate": "tooltipTemplate"; }, { "hover": "hover"; }, never, never>;
 }
+
+//# sourceMappingURL=tooltip-area.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip-area.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/tooltip-area.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..659eea1
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip-area.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,44 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { PlacementTypes } from './tooltip/position';
+import { StyleTypes } from './tooltip/style.type';
+import { ViewDimensions } from './types/view-dimension.interface';
+export interface Tooltip {
+    color: string;
+    d0: number;
+    d1: number;
+    max: number;
+    min: number;
+    name: any;
+    series: any;
+    value: any;
+}
+export declare class TooltipArea {
+    private platformId;
+    anchorOpacity: number;
+    anchorPos: number;
+    anchorValues: Tooltip[];
+    lastAnchorPos: number;
+    placementTypes: typeof PlacementTypes;
+    styleTypes: typeof StyleTypes;
+    dims: ViewDimensions;
+    xSet: any[];
+    xScale: any;
+    yScale: any;
+    results: any[];
+    colors: ColorHelper;
+    showPercentage: boolean;
+    tooltipDisabled: boolean;
+    tooltipTemplate: TemplateRef<any>;
+    hover: EventEmitter<{
+        value: any;
+    }>;
+    tooltipAnchor: any;
+    constructor(platformId: any);
+    getValues(xVal: any): Tooltip[];
+    mouseMove(event: any): void;
+    findClosestPointIndex(xPos: number): number;
+    showTooltip(): void;
+    hideTooltip(): void;
+    getToolTipText(tooltipItem: Tooltip): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip-area.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/tooltip-area.component.d.ts.map
new file mode 100644
index 0000000..cc8df1b
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip-area.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tooltip-area.component.d.ts","sources":["tooltip-area.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { PlacementTypes } from './tooltip/position';\nimport { StyleTypes } from './tooltip/style.type';\nimport { ViewDimensions } from './types/view-dimension.interface';\nexport interface Tooltip {\n    color: string;\n    d0: number;\n    d1: number;\n    max: number;\n    min: number;\n    name: any;\n    series: any;\n    value: any;\n}\nexport declare class TooltipArea {\n    private platformId;\n    anchorOpacity: number;\n    anchorPos: number;\n    anchorValues: Tooltip[];\n    lastAnchorPos: number;\n    placementTypes: typeof PlacementTypes;\n    styleTypes: typeof StyleTypes;\n    dims: ViewDimensions;\n    xSet: any[];\n    xScale: any;\n    yScale: any;\n    results: any[];\n    colors: ColorHelper;\n    showPercentage: boolean;\n    tooltipDisabled: boolean;\n    tooltipTemplate: TemplateRef<any>;\n    hover: EventEmitter<{\n        value: any;\n    }>;\n    tooltipAnchor: any;\n    constructor(platformId: any);\n    getValues(xVal: any): Tooltip[];\n    mouseMove(event: any): void;\n    findClosestPointIndex(xPos: number): number;\n    showTooltip(): void;\n    hideTooltip(): void;\n    getToolTipText(tooltipItem: Tooltip): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/injection.service.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/injection.service.d.ts
index 184b27f..d2d3c7a 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/injection.service.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/injection.service.d.ts
@@ -6,6 +6,7 @@ import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injector, ViewC
  *
  * @export
  */
+import * as ɵngcc0 from '@angular/core';
 export declare class InjectionService {
     private applicationRef;
     private componentFactoryResolver;
@@ -68,4 +69,8 @@ export declare class InjectionService {
      * @memberOf InjectionService
      */
     appendComponent<T>(componentClass: Type<T>, bindings?: any, location?: any): ComponentRef<any>;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<InjectionService, never>;
+    static ɵprov: ɵngcc0.ɵɵInjectableDef<InjectionService>;
 }
+
+//# sourceMappingURL=injection.service.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/injection.service.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/injection.service.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..184b27f
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/injection.service.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,71 @@
+import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injector, ViewContainerRef, Type } from '@angular/core';
+/**
+ * Injection service is a helper to append components
+ * dynamically to a known location in the DOM, most
+ * noteably for dialogs/tooltips appending to body.
+ *
+ * @export
+ */
+export declare class InjectionService {
+    private applicationRef;
+    private componentFactoryResolver;
+    private injector;
+    static globalRootViewContainer: ViewContainerRef;
+    /**
+     * Sets a default global root view container. This is useful for
+     * things like ngUpgrade that doesn't have a ApplicationRef root.
+     *
+     * @param container
+     */
+    static setGlobalRootViewContainer(container: ViewContainerRef): void;
+    private _container;
+    constructor(applicationRef: ApplicationRef, componentFactoryResolver: ComponentFactoryResolver, injector: Injector);
+    /**
+     * Gets the root view container to inject the component to.
+     *
+     * @memberOf InjectionService
+     */
+    getRootViewContainer(): ViewContainerRef | ComponentRef<any>;
+    /**
+     * Overrides the default root view container. This is useful for
+     * things like ngUpgrade that doesn't have a ApplicationRef root.
+     *
+     * @param container
+     *
+     * @memberOf InjectionService
+     */
+    setRootViewContainer(container: ViewContainerRef): void;
+    /**
+     * Gets the html element for a component ref.
+     *
+     * @param componentRef
+     *
+     * @memberOf InjectionService
+     */
+    getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement;
+    /**
+     * Gets the root component container html element.
+     *
+     * @memberOf InjectionService
+     */
+    getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement;
+    /**
+     * Projects the bindings onto the component
+     *
+     * @param component
+     * @param options
+     *
+     * @memberOf InjectionService
+     */
+    projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any>;
+    /**
+     * Appends a component to a adjacent location
+     *
+     * @param componentClass
+     * @param [options={}]
+     * @param [location]
+     *
+     * @memberOf InjectionService
+     */
+    appendComponent<T>(componentClass: Type<T>, bindings?: any, location?: any): ComponentRef<any>;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/injection.service.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/injection.service.d.ts.map
new file mode 100644
index 0000000..41547f1
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/injection.service.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"injection.service.d.ts","sources":["injection.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injector, ViewContainerRef, Type } from '@angular/core';\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\nexport declare class InjectionService {\n    private applicationRef;\n    private componentFactoryResolver;\n    private injector;\n    static globalRootViewContainer: ViewContainerRef;\n    /**\n     * Sets a default global root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     */\n    static setGlobalRootViewContainer(container: ViewContainerRef): void;\n    private _container;\n    constructor(applicationRef: ApplicationRef, componentFactoryResolver: ComponentFactoryResolver, injector: Injector);\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainer(): ViewContainerRef | ComponentRef<any>;\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     *\n     * @memberOf InjectionService\n     */\n    setRootViewContainer(container: ViewContainerRef): void;\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param componentRef\n     *\n     * @memberOf InjectionService\n     */\n    getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement;\n    /**\n     * Gets the root component container html element.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement;\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param component\n     * @param options\n     *\n     * @memberOf InjectionService\n     */\n    projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any>;\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @param componentClass\n     * @param [options={}]\n     * @param [location]\n     *\n     * @memberOf InjectionService\n     */\n    appendComponent<T>(componentClass: Type<T>, bindings?: any, location?: any): ComponentRef<any>;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.d.ts
index 41b2f6f..7547a9f 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.d.ts
@@ -1,6 +1,7 @@
 import { ElementRef, AfterViewInit, Renderer2, TemplateRef } from '@angular/core';
 import { PlacementTypes } from './position';
 import { StyleTypes } from './style.type';
+import * as ɵngcc0 from '@angular/core';
 export declare class TooltipContentComponent implements AfterViewInit {
     element: ElementRef;
     private renderer;
@@ -24,4 +25,8 @@ export declare class TooltipContentComponent implements AfterViewInit {
     positionCaret(hostDim: DOMRect, elmDim: DOMRect): void;
     checkFlip(hostDim: DOMRect, elmDim: DOMRect): void;
     onWindowResize(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<TooltipContentComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TooltipContentComponent, "ngx-tooltip-content", never, { "placement": "placement"; "host": "host"; "showCaret": "showCaret"; "type": "type"; "alignment": "alignment"; "spacing": "spacing"; "cssClass": "cssClass"; "title": "title"; "template": "template"; "context": "context"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=tooltip.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..41b2f6f
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,27 @@
+import { ElementRef, AfterViewInit, Renderer2, TemplateRef } from '@angular/core';
+import { PlacementTypes } from './position';
+import { StyleTypes } from './style.type';
+export declare class TooltipContentComponent implements AfterViewInit {
+    element: ElementRef;
+    private renderer;
+    private platformId;
+    host: ElementRef;
+    showCaret: boolean;
+    type: StyleTypes;
+    placement: PlacementTypes;
+    alignment: PlacementTypes;
+    spacing: number;
+    cssClass: string;
+    title: string;
+    template: TemplateRef<any>;
+    context: any;
+    caretElm: ElementRef;
+    get cssClasses(): string;
+    constructor(element: ElementRef, renderer: Renderer2, platformId: any);
+    ngAfterViewInit(): void;
+    position(): void;
+    positionContent(nativeElm: HTMLElement, hostDim: DOMRect, elmDim: DOMRect): void;
+    positionCaret(hostDim: DOMRect, elmDim: DOMRect): void;
+    checkFlip(hostDim: DOMRect, elmDim: DOMRect): void;
+    onWindowResize(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.d.ts.map
new file mode 100644
index 0000000..abbdd26
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tooltip.component.d.ts","sources":["tooltip.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, AfterViewInit, Renderer2, TemplateRef } from '@angular/core';\nimport { PlacementTypes } from './position';\nimport { StyleTypes } from './style.type';\nexport declare class TooltipContentComponent implements AfterViewInit {\n    element: ElementRef;\n    private renderer;\n    private platformId;\n    host: ElementRef;\n    showCaret: boolean;\n    type: StyleTypes;\n    placement: PlacementTypes;\n    alignment: PlacementTypes;\n    spacing: number;\n    cssClass: string;\n    title: string;\n    template: TemplateRef<any>;\n    context: any;\n    caretElm: ElementRef;\n    get cssClasses(): string;\n    constructor(element: ElementRef, renderer: Renderer2, platformId: any);\n    ngAfterViewInit(): void;\n    position(): void;\n    positionContent(nativeElm: HTMLElement, hostDim: DOMRect, elmDim: DOMRect): void;\n    positionCaret(hostDim: DOMRect, elmDim: DOMRect): void;\n    checkFlip(hostDim: DOMRect, elmDim: DOMRect): void;\n    onWindowResize(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.d.ts
index 60eff47..24846f0 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.d.ts
@@ -3,6 +3,7 @@ import { PlacementTypes } from './position';
 import { StyleTypes } from './style.type';
 import { ShowTypes } from './show.type';
 import { TooltipService } from './tooltip.service';
+import * as ɵngcc0 from '@angular/core';
 export declare class TooltipDirective implements OnDestroy {
     private tooltipService;
     private viewContainerRef;
@@ -44,4 +45,8 @@ export declare class TooltipDirective implements OnDestroy {
     addHideListeners(tooltip: HTMLElement): void;
     hideTooltip(immediate?: boolean): void;
     private createBoundOptions;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<TooltipDirective, never>;
+    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TooltipDirective, "[ngx-tooltip]", never, { "tooltipCssClass": "tooltipCssClass"; "tooltipAppendToBody": "tooltipAppendToBody"; "tooltipSpacing": "tooltipSpacing"; "tooltipDisabled": "tooltipDisabled"; "tooltipShowCaret": "tooltipShowCaret"; "tooltipPlacement": "tooltipPlacement"; "tooltipAlignment": "tooltipAlignment"; "tooltipType": "tooltipType"; "tooltipCloseOnClickOutside": "tooltipCloseOnClickOutside"; "tooltipCloseOnMouseLeave": "tooltipCloseOnMouseLeave"; "tooltipHideTimeout": "tooltipHideTimeout"; "tooltipShowTimeout": "tooltipShowTimeout"; "tooltipShowEvent": "tooltipShowEvent"; "tooltipImmediateExit": "tooltipImmediateExit"; "tooltipTitle": "tooltipTitle"; "tooltipTemplate": "tooltipTemplate"; "tooltipContext": "tooltipContext"; }, { "show": "show"; "hide": "hide"; }, never>;
 }
+
+//# sourceMappingURL=tooltip.directive.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..60eff47
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,47 @@
+import { EventEmitter, ViewContainerRef, Renderer2, OnDestroy, TemplateRef } from '@angular/core';
+import { PlacementTypes } from './position';
+import { StyleTypes } from './style.type';
+import { ShowTypes } from './show.type';
+import { TooltipService } from './tooltip.service';
+export declare class TooltipDirective implements OnDestroy {
+    private tooltipService;
+    private viewContainerRef;
+    private renderer;
+    tooltipCssClass: string;
+    tooltipTitle?: string;
+    tooltipAppendToBody: boolean;
+    tooltipSpacing: number;
+    tooltipDisabled: boolean;
+    tooltipShowCaret: boolean;
+    tooltipPlacement: PlacementTypes;
+    tooltipAlignment: PlacementTypes;
+    tooltipType: StyleTypes;
+    tooltipCloseOnClickOutside: boolean;
+    tooltipCloseOnMouseLeave: boolean;
+    tooltipHideTimeout: number;
+    tooltipShowTimeout: number;
+    tooltipTemplate: TemplateRef<any>;
+    tooltipShowEvent: ShowTypes;
+    tooltipContext: any;
+    tooltipImmediateExit: boolean;
+    show: EventEmitter<boolean>;
+    hide: EventEmitter<boolean>;
+    private get listensForFocus();
+    private get listensForHover();
+    private component;
+    private timeout;
+    private mouseLeaveContentEvent;
+    private mouseEnterContentEvent;
+    private documentClickEvent;
+    constructor(tooltipService: TooltipService, viewContainerRef: ViewContainerRef, renderer: Renderer2);
+    ngOnDestroy(): void;
+    onFocus(): void;
+    onBlur(): void;
+    onMouseEnter(): void;
+    onMouseLeave(target: any): void;
+    onMouseClick(): void;
+    showTooltip(immediate?: boolean): void;
+    addHideListeners(tooltip: HTMLElement): void;
+    hideTooltip(immediate?: boolean): void;
+    private createBoundOptions;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.d.ts.map
new file mode 100644
index 0000000..f4acf0d
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.directive.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tooltip.directive.d.ts","sources":["tooltip.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ViewContainerRef, Renderer2, OnDestroy, TemplateRef } from '@angular/core';\nimport { PlacementTypes } from './position';\nimport { StyleTypes } from './style.type';\nimport { ShowTypes } from './show.type';\nimport { TooltipService } from './tooltip.service';\nexport declare class TooltipDirective implements OnDestroy {\n    private tooltipService;\n    private viewContainerRef;\n    private renderer;\n    tooltipCssClass: string;\n    tooltipTitle?: string;\n    tooltipAppendToBody: boolean;\n    tooltipSpacing: number;\n    tooltipDisabled: boolean;\n    tooltipShowCaret: boolean;\n    tooltipPlacement: PlacementTypes;\n    tooltipAlignment: PlacementTypes;\n    tooltipType: StyleTypes;\n    tooltipCloseOnClickOutside: boolean;\n    tooltipCloseOnMouseLeave: boolean;\n    tooltipHideTimeout: number;\n    tooltipShowTimeout: number;\n    tooltipTemplate: TemplateRef<any>;\n    tooltipShowEvent: ShowTypes;\n    tooltipContext: any;\n    tooltipImmediateExit: boolean;\n    show: EventEmitter<boolean>;\n    hide: EventEmitter<boolean>;\n    private get listensForFocus();\n    private get listensForHover();\n    private component;\n    private timeout;\n    private mouseLeaveContentEvent;\n    private mouseEnterContentEvent;\n    private documentClickEvent;\n    constructor(tooltipService: TooltipService, viewContainerRef: ViewContainerRef, renderer: Renderer2);\n    ngOnDestroy(): void;\n    onFocus(): void;\n    onBlur(): void;\n    onMouseEnter(): void;\n    onMouseLeave(target: any): void;\n    onMouseClick(): void;\n    showTooltip(immediate?: boolean): void;\n    addHideListeners(tooltip: HTMLElement): void;\n    hideTooltip(immediate?: boolean): void;\n    private createBoundOptions;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.d.ts
index ff80775..a4b681f 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.d.ts
@@ -1,2 +1,11 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './tooltip.component';
+import * as ɵngcc2 from './tooltip.directive';
+import * as ɵngcc3 from '@angular/common';
 export declare class TooltipModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<TooltipModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TooltipModule, [typeof ɵngcc1.TooltipContentComponent, typeof ɵngcc2.TooltipDirective], [typeof ɵngcc3.CommonModule], [typeof ɵngcc1.TooltipContentComponent, typeof ɵngcc2.TooltipDirective]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<TooltipModule>;
 }
+
+//# sourceMappingURL=tooltip.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..ff80775
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class TooltipModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.d.ts.map
new file mode 100644
index 0000000..e2bf4e1
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tooltip.module.d.ts","sources":["tooltip.module.d.ts"],"names":[],"mappings":";;;;AAAA;;;;AACA","sourcesContent":["export declare class TooltipModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.d.ts b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.d.ts
index d8722d7..490ff6b 100644
--- a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.d.ts
@@ -1,7 +1,12 @@
 import { InjectionService } from './injection.service';
 import { TooltipContentComponent } from './tooltip.component';
 import { InjectionRegisteryService } from './injection-registery.service';
+import * as ɵngcc0 from '@angular/core';
 export declare class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {
     type: any;
     constructor(injectionService: InjectionService);
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<TooltipService, never>;
+    static ɵprov: ɵngcc0.ɵɵInjectableDef<TooltipService>;
 }
+
+//# sourceMappingURL=tooltip.service.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..d8722d7
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,7 @@
+import { InjectionService } from './injection.service';
+import { TooltipContentComponent } from './tooltip.component';
+import { InjectionRegisteryService } from './injection-registery.service';
+export declare class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {
+    type: any;
+    constructor(injectionService: InjectionService);
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.d.ts.map
new file mode 100644
index 0000000..d566639
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/common/tooltip/tooltip.service.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tooltip.service.d.ts","sources":["tooltip.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;;;AACA","sourcesContent":["import { InjectionService } from './injection.service';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { InjectionRegisteryService } from './injection-registery.service';\nexport declare class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\n    type: any;\n    constructor(injectionService: InjectionService);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-arc.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-arc.component.d.ts
index 6b76da4..0b3747f 100644
--- a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-arc.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-arc.component.d.ts
@@ -3,6 +3,7 @@ import { ColorHelper } from '../common/color.helper';
 import { DataItem } from '../models/chart-data.model';
 import { PlacementTypes } from '../common/tooltip/position';
 import { StyleTypes } from '../common/tooltip/style.type';
+import * as ɵngcc0 from '@angular/core';
 export interface ArcItem {
     data: DataItem;
     endAngle: number;
@@ -25,4 +26,8 @@ export declare class GaugeArcComponent {
     placementTypes: typeof PlacementTypes;
     styleTypes: typeof StyleTypes;
     tooltipText(arc: ArcItem): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<GaugeArcComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GaugeArcComponent, "g[ngx-charts-gauge-arc]", never, { "isActive": "isActive"; "tooltipDisabled": "tooltipDisabled"; "animations": "animations"; "backgroundArc": "backgroundArc"; "valueArc": "valueArc"; "cornerRadius": "cornerRadius"; "colors": "colors"; "valueFormatting": "valueFormatting"; "tooltipTemplate": "tooltipTemplate"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
+
+//# sourceMappingURL=gauge-arc.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-arc.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-arc.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..6b76da4
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-arc.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,28 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { DataItem } from '../models/chart-data.model';
+import { PlacementTypes } from '../common/tooltip/position';
+import { StyleTypes } from '../common/tooltip/style.type';
+export interface ArcItem {
+    data: DataItem;
+    endAngle: number;
+    innerRadius: number;
+    outerRadius: number;
+}
+export declare class GaugeArcComponent {
+    backgroundArc: ArcItem;
+    valueArc: ArcItem;
+    cornerRadius: number;
+    colors: ColorHelper;
+    isActive: boolean;
+    tooltipDisabled: boolean;
+    valueFormatting: (value: any) => string;
+    tooltipTemplate: TemplateRef<any>;
+    animations: boolean;
+    select: EventEmitter<any>;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    placementTypes: typeof PlacementTypes;
+    styleTypes: typeof StyleTypes;
+    tooltipText(arc: ArcItem): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-arc.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-arc.component.d.ts.map
new file mode 100644
index 0000000..09b6924
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-arc.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gauge-arc.component.d.ts","sources":["gauge-arc.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nexport interface ArcItem {\n    data: DataItem;\n    endAngle: number;\n    innerRadius: number;\n    outerRadius: number;\n}\nexport declare class GaugeArcComponent {\n    backgroundArc: ArcItem;\n    valueArc: ArcItem;\n    cornerRadius: number;\n    colors: ColorHelper;\n    isActive: boolean;\n    tooltipDisabled: boolean;\n    valueFormatting: (value: any) => string;\n    tooltipTemplate: TemplateRef<any>;\n    animations: boolean;\n    select: EventEmitter<any>;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    placementTypes: typeof PlacementTypes;\n    styleTypes: typeof StyleTypes;\n    tooltipText(arc: ArcItem): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-axis.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-axis.component.d.ts
index a4b2a67..3755150 100644
--- a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-axis.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-axis.component.d.ts
@@ -1,5 +1,6 @@
 import { OnChanges, SimpleChanges } from '@angular/core';
 import { TextAnchor } from '../common/types/text-anchor.enum';
+import * as ɵngcc0 from '@angular/core';
 interface Big {
     line: string;
     text: string;
@@ -30,5 +31,9 @@ export declare class GaugeAxisComponent implements OnChanges {
     getTicks(): Ticks;
     getTextAnchor(angle: number): TextAnchor;
     getTickPath(startDistance: number, tickLength: number, angle: number): any;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<GaugeAxisComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GaugeAxisComponent, "g[ngx-charts-gauge-axis]", never, { "bigSegments": "bigSegments"; "smallSegments": "smallSegments"; "min": "min"; "max": "max"; "angleSpan": "angleSpan"; "startAngle": "startAngle"; "radius": "radius"; "valueScale": "valueScale"; "tickFormatting": "tickFormatting"; }, {}, never, never>;
 }
 export {};
+
+//# sourceMappingURL=gauge-axis.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-axis.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-axis.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..a4b2a67
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-axis.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,34 @@
+import { OnChanges, SimpleChanges } from '@angular/core';
+import { TextAnchor } from '../common/types/text-anchor.enum';
+interface Big {
+    line: string;
+    text: string;
+    textAnchor: string;
+    textTransform: string;
+}
+interface Ticks {
+    big: Big[];
+    small: Array<{
+        line: string;
+    }>;
+}
+export declare class GaugeAxisComponent implements OnChanges {
+    bigSegments: number;
+    smallSegments: number;
+    min: number;
+    max: number;
+    angleSpan: number;
+    startAngle: number;
+    radius: number;
+    valueScale: any;
+    tickFormatting: any;
+    ticks: Ticks;
+    rotationAngle: number;
+    rotate: string;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getTicks(): Ticks;
+    getTextAnchor(angle: number): TextAnchor;
+    getTickPath(startDistance: number, tickLength: number, angle: number): any;
+}
+export {};
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-axis.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-axis.component.d.ts.map
new file mode 100644
index 0000000..a884d91
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge-axis.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gauge-axis.component.d.ts","sources":["gauge-axis.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { OnChanges, SimpleChanges } from '@angular/core';\nimport { TextAnchor } from '../common/types/text-anchor.enum';\ninterface Big {\n    line: string;\n    text: string;\n    textAnchor: string;\n    textTransform: string;\n}\ninterface Ticks {\n    big: Big[];\n    small: Array<{\n        line: string;\n    }>;\n}\nexport declare class GaugeAxisComponent implements OnChanges {\n    bigSegments: number;\n    smallSegments: number;\n    min: number;\n    max: number;\n    angleSpan: number;\n    startAngle: number;\n    radius: number;\n    valueScale: any;\n    tickFormatting: any;\n    ticks: Ticks;\n    rotationAngle: number;\n    rotate: string;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getTicks(): Ticks;\n    getTextAnchor(angle: number): TextAnchor;\n    getTickPath(startDistance: number, tickLength: number, angle: number): any;\n}\nexport {};\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.component.d.ts
index 2fc6aea..9f0fa45 100644
--- a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.component.d.ts
@@ -4,6 +4,7 @@ import { ColorHelper } from '../common/color.helper';
 import { ArcItem } from './gauge-arc.component';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 interface Arcs {
     backgroundArc: ArcItem;
     valueArc: ArcItem;
@@ -62,5 +63,9 @@ export declare class GaugeComponent extends BaseChartComponent implements AfterV
     onDeactivate(item: any): void;
     isActive(entry: any): boolean;
     trackBy(index: number, item: Arcs): any;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<GaugeComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GaugeComponent, "ngx-charts-gauge", never, { "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "min": "min"; "max": "max"; "bigSegments": "bigSegments"; "smallSegments": "smallSegments"; "showAxis": "showAxis"; "startAngle": "startAngle"; "angleSpan": "angleSpan"; "activeEntries": "activeEntries"; "tooltipDisabled": "tooltipDisabled"; "showText": "showText"; "margin": "margin"; "textValue": "textValue"; "units": "units"; "results": "results"; "axisTickFormatting": "axisTickFormatting"; "valueFormatting": "valueFormatting"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
 export {};
+
+//# sourceMappingURL=gauge.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..2fc6aea
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,66 @@
+import { ElementRef, AfterViewInit, EventEmitter, TemplateRef } from '@angular/core';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { ColorHelper } from '../common/color.helper';
+import { ArcItem } from './gauge-arc.component';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+interface Arcs {
+    backgroundArc: ArcItem;
+    valueArc: ArcItem;
+}
+export declare class GaugeComponent extends BaseChartComponent implements AfterViewInit {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    min: number;
+    max: number;
+    textValue: string;
+    units: string;
+    bigSegments: number;
+    smallSegments: number;
+    results: any[];
+    showAxis: boolean;
+    startAngle: number;
+    angleSpan: number;
+    activeEntries: any[];
+    axisTickFormatting: any;
+    tooltipDisabled: boolean;
+    valueFormatting: (value: any) => string;
+    showText: boolean;
+    margin: number[];
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    textEl: ElementRef;
+    dims: ViewDimensions;
+    domain: any[];
+    valueDomain: [number, number];
+    valueScale: any;
+    colors: ColorHelper;
+    transform: string;
+    outerRadius: number;
+    textRadius: number;
+    resizeScale: number;
+    rotation: string;
+    textTransform: string;
+    cornerRadius: number;
+    arcs: Arcs[];
+    displayValue: string;
+    legendOptions: LegendOptions;
+    ngAfterViewInit(): void;
+    update(): void;
+    getArcs(): any[];
+    getDomain(): string[];
+    getValueDomain(): [number, number];
+    getValueScale(): any;
+    getDisplayValue(): string;
+    scaleText(repeat?: boolean): void;
+    onClick(data: any): void;
+    getLegendOptions(): LegendOptions;
+    setColors(): void;
+    onActivate(item: any): void;
+    onDeactivate(item: any): void;
+    isActive(entry: any): boolean;
+    trackBy(index: number, item: Arcs): any;
+}
+export {};
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.component.d.ts.map
new file mode 100644
index 0000000..7e666be
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gauge.component.d.ts","sources":["gauge.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { ElementRef, AfterViewInit, EventEmitter, TemplateRef } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ColorHelper } from '../common/color.helper';\nimport { ArcItem } from './gauge-arc.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\ninterface Arcs {\n    backgroundArc: ArcItem;\n    valueArc: ArcItem;\n}\nexport declare class GaugeComponent extends BaseChartComponent implements AfterViewInit {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    min: number;\n    max: number;\n    textValue: string;\n    units: string;\n    bigSegments: number;\n    smallSegments: number;\n    results: any[];\n    showAxis: boolean;\n    startAngle: number;\n    angleSpan: number;\n    activeEntries: any[];\n    axisTickFormatting: any;\n    tooltipDisabled: boolean;\n    valueFormatting: (value: any) => string;\n    showText: boolean;\n    margin: number[];\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    textEl: ElementRef;\n    dims: ViewDimensions;\n    domain: any[];\n    valueDomain: [number, number];\n    valueScale: any;\n    colors: ColorHelper;\n    transform: string;\n    outerRadius: number;\n    textRadius: number;\n    resizeScale: number;\n    rotation: string;\n    textTransform: string;\n    cornerRadius: number;\n    arcs: Arcs[];\n    displayValue: string;\n    legendOptions: LegendOptions;\n    ngAfterViewInit(): void;\n    update(): void;\n    getArcs(): any[];\n    getDomain(): string[];\n    getValueDomain(): [number, number];\n    getValueScale(): any;\n    getDisplayValue(): string;\n    scaleText(repeat?: boolean): void;\n    onClick(data: any): void;\n    getLegendOptions(): LegendOptions;\n    setColors(): void;\n    onActivate(item: any): void;\n    onDeactivate(item: any): void;\n    isActive(entry: any): boolean;\n    trackBy(index: number, item: Arcs): any;\n}\nexport {};\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.module.d.ts
index 5f1160d..3aaddbb 100644
--- a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.module.d.ts
@@ -1,2 +1,15 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './linear-gauge.component';
+import * as ɵngcc2 from './gauge.component';
+import * as ɵngcc3 from './gauge-arc.component';
+import * as ɵngcc4 from './gauge-axis.component';
+import * as ɵngcc5 from '../common/chart-common.module';
+import * as ɵngcc6 from '../pie-chart/pie-chart.module';
+import * as ɵngcc7 from '../bar-chart/bar-chart.module';
 export declare class GaugeModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<GaugeModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<GaugeModule, [typeof ɵngcc1.LinearGaugeComponent, typeof ɵngcc2.GaugeComponent, typeof ɵngcc3.GaugeArcComponent, typeof ɵngcc4.GaugeAxisComponent], [typeof ɵngcc5.ChartCommonModule, typeof ɵngcc6.PieChartModule, typeof ɵngcc7.BarChartModule], [typeof ɵngcc1.LinearGaugeComponent, typeof ɵngcc2.GaugeComponent, typeof ɵngcc3.GaugeArcComponent, typeof ɵngcc4.GaugeAxisComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<GaugeModule>;
 }
+
+//# sourceMappingURL=gauge.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..5f1160d
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class GaugeModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.module.d.ts.map
new file mode 100644
index 0000000..08806af
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/gauge.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gauge.module.d.ts","sources":["gauge.module.d.ts"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA","sourcesContent":["export declare class GaugeModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/linear-gauge.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/gauge/linear-gauge.component.d.ts
index 604d1cd..8d8ab9e 100644
--- a/node_modules/@swimlane/ngx-charts/lib/gauge/linear-gauge.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/linear-gauge.component.d.ts
@@ -3,6 +3,7 @@ import { BaseChartComponent } from '../common/base-chart.component';
 import { ColorHelper } from '../common/color.helper';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 declare enum ElementType {
     Value = "value",
     Units = "units"
@@ -41,5 +42,9 @@ export declare class LinearGaugeComponent extends BaseChartComponent implements
     scaleTextSSR(element: any): void;
     onClick(): void;
     setColors(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<LinearGaugeComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LinearGaugeComponent, "ngx-charts-linear-gauge", never, { "min": "min"; "max": "max"; "value": "value"; "units": "units"; "previousValue": "previousValue"; "valueFormatting": "valueFormatting"; }, {}, never, never>;
 }
 export {};
+
+//# sourceMappingURL=linear-gauge.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/linear-gauge.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/gauge/linear-gauge.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..604d1cd
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/linear-gauge.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,45 @@
+import { ElementRef, AfterViewInit } from '@angular/core';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { ColorHelper } from '../common/color.helper';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+declare enum ElementType {
+    Value = "value",
+    Units = "units"
+}
+export declare class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {
+    min: number;
+    max: number;
+    value: number;
+    units: string;
+    previousValue: number;
+    valueFormatting: any;
+    valueTextEl: ElementRef;
+    unitsTextEl: ElementRef;
+    dims: ViewDimensions;
+    valueDomain: [number, number];
+    valueScale: any;
+    colors: ColorHelper;
+    transform: string;
+    margin: number[];
+    transformLine: string;
+    valueResizeScale: number;
+    unitsResizeScale: number;
+    valueTextTransform: string;
+    valueTranslate: string;
+    unitsTextTransform: string;
+    unitsTranslate: string;
+    displayValue: string;
+    hasPreviousValue: boolean;
+    barOrientation: typeof BarOrientation;
+    ngAfterViewInit(): void;
+    update(): void;
+    getValueDomain(): [number, number];
+    getValueScale(): any;
+    getDisplayValue(): string;
+    scaleText(element: ElementType, repeat?: boolean): void;
+    scaleTextSSR(element: any): void;
+    onClick(): void;
+    setColors(): void;
+}
+export {};
diff --git a/node_modules/@swimlane/ngx-charts/lib/gauge/linear-gauge.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/gauge/linear-gauge.component.d.ts.map
new file mode 100644
index 0000000..9c22996
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/gauge/linear-gauge.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"linear-gauge.component.d.ts","sources":["linear-gauge.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { ElementRef, AfterViewInit } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ColorHelper } from '../common/color.helper';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\ndeclare enum ElementType {\n    Value = \"value\",\n    Units = \"units\"\n}\nexport declare class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\n    min: number;\n    max: number;\n    value: number;\n    units: string;\n    previousValue: number;\n    valueFormatting: any;\n    valueTextEl: ElementRef;\n    unitsTextEl: ElementRef;\n    dims: ViewDimensions;\n    valueDomain: [number, number];\n    valueScale: any;\n    colors: ColorHelper;\n    transform: string;\n    margin: number[];\n    transformLine: string;\n    valueResizeScale: number;\n    unitsResizeScale: number;\n    valueTextTransform: string;\n    valueTranslate: string;\n    unitsTextTransform: string;\n    unitsTranslate: string;\n    displayValue: string;\n    hasPreviousValue: boolean;\n    barOrientation: typeof BarOrientation;\n    ngAfterViewInit(): void;\n    update(): void;\n    getValueDomain(): [number, number];\n    getValueScale(): any;\n    getDisplayValue(): string;\n    scaleText(element: ElementType, repeat?: boolean): void;\n    scaleTextSSR(element: any): void;\n    onClick(): void;\n    setColors(): void;\n}\nexport {};\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.d.ts
index 366e93d..ae6d239 100644
--- a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.d.ts
@@ -2,6 +2,7 @@ import { SimpleChanges, EventEmitter, OnChanges, OnInit, TemplateRef } from '@an
 import { DataItem, Series } from '../models/chart-data.model';
 import { PlacementTypes } from '../common/tooltip/position';
 import { StyleTypes } from '../common/tooltip/style.type';
+import * as ɵngcc0 from '@angular/core';
 interface Cell {
     cell: DataItem;
     data: number;
@@ -41,5 +42,9 @@ export declare class HeatCellSeriesComponent implements OnChanges, OnInit {
     }): string;
     trackBy(index: number, item: any): string;
     onClick(data: any): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<HeatCellSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HeatCellSeriesComponent, "g[ngx-charts-heat-map-cell-series]", never, { "tooltipDisabled": "tooltipDisabled"; "animations": "animations"; "tooltipText": "tooltipText"; "data": "data"; "colors": "colors"; "xScale": "xScale"; "yScale": "yScale"; "gradient": "gradient"; "tooltipTemplate": "tooltipTemplate"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
 export {};
+
+//# sourceMappingURL=heat-map-cell-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..366e93d
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,45 @@
+import { SimpleChanges, EventEmitter, OnChanges, OnInit, TemplateRef } from '@angular/core';
+import { DataItem, Series } from '../models/chart-data.model';
+import { PlacementTypes } from '../common/tooltip/position';
+import { StyleTypes } from '../common/tooltip/style.type';
+interface Cell {
+    cell: DataItem;
+    data: number;
+    fill: string;
+    height: number;
+    label: string;
+    row: Series;
+    series: string;
+    width: number;
+    x: number;
+    y: number;
+}
+export declare class HeatCellSeriesComponent implements OnChanges, OnInit {
+    data: any;
+    colors: any;
+    xScale: any;
+    yScale: any;
+    gradient: boolean;
+    tooltipDisabled: boolean;
+    tooltipText: any;
+    tooltipTemplate: TemplateRef<any>;
+    animations: boolean;
+    select: EventEmitter<DataItem>;
+    activate: EventEmitter<DataItem>;
+    deactivate: EventEmitter<DataItem>;
+    cells: Cell[];
+    placementTypes: typeof PlacementTypes;
+    styleTypes: typeof StyleTypes;
+    ngOnInit(): void;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getCells(): Cell[];
+    getTooltipText({ label, data, series }: {
+        label: string;
+        data: number;
+        series: string;
+    }): string;
+    trackBy(index: number, item: any): string;
+    onClick(data: any): void;
+}
+export {};
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.d.ts.map
new file mode 100644
index 0000000..da37502
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"heat-map-cell-series.component.d.ts","sources":["heat-map-cell-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { SimpleChanges, EventEmitter, OnChanges, OnInit, TemplateRef } from '@angular/core';\nimport { DataItem, Series } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\ninterface Cell {\n    cell: DataItem;\n    data: number;\n    fill: string;\n    height: number;\n    label: string;\n    row: Series;\n    series: string;\n    width: number;\n    x: number;\n    y: number;\n}\nexport declare class HeatCellSeriesComponent implements OnChanges, OnInit {\n    data: any;\n    colors: any;\n    xScale: any;\n    yScale: any;\n    gradient: boolean;\n    tooltipDisabled: boolean;\n    tooltipText: any;\n    tooltipTemplate: TemplateRef<any>;\n    animations: boolean;\n    select: EventEmitter<DataItem>;\n    activate: EventEmitter<DataItem>;\n    deactivate: EventEmitter<DataItem>;\n    cells: Cell[];\n    placementTypes: typeof PlacementTypes;\n    styleTypes: typeof StyleTypes;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getCells(): Cell[];\n    getTooltipText({ label, data, series }: {\n        label: string;\n        data: number;\n        series: string;\n    }): string;\n    trackBy(index: number, item: any): string;\n    onClick(data: any): void;\n}\nexport {};\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.d.ts
index 5223efc..4cfc266 100644
--- a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.d.ts
@@ -1,6 +1,7 @@
 import { EventEmitter, SimpleChanges, ElementRef, OnChanges } from '@angular/core';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
 import { Gradient } from '../common/types/gradient.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class HeatMapCellComponent implements OnChanges {
     fill: string;
     x: number;
@@ -28,4 +29,8 @@ export declare class HeatMapCellComponent implements OnChanges {
     onClick(): void;
     onMouseEnter(): void;
     onMouseLeave(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<HeatMapCellComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HeatMapCellComponent, "g[ngx-charts-heat-map-cell]", never, { "gradient": "gradient"; "animations": "animations"; "fill": "fill"; "x": "x"; "y": "y"; "width": "width"; "height": "height"; "data": "data"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
+
+//# sourceMappingURL=heat-map-cell.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..5223efc
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,31 @@
+import { EventEmitter, SimpleChanges, ElementRef, OnChanges } from '@angular/core';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+import { Gradient } from '../common/types/gradient.interface';
+export declare class HeatMapCellComponent implements OnChanges {
+    fill: string;
+    x: number;
+    y: number;
+    width: number;
+    height: number;
+    data: number;
+    gradient: boolean;
+    animations: boolean;
+    select: EventEmitter<number>;
+    activate: EventEmitter<number>;
+    deactivate: EventEmitter<number>;
+    element: HTMLElement;
+    transform: string;
+    startOpacity: number;
+    gradientId: string;
+    gradientUrl: string;
+    gradientStops: Gradient[];
+    barOrientation: typeof BarOrientation;
+    constructor(element: ElementRef);
+    ngOnChanges(changes: SimpleChanges): void;
+    getGradientStops(): Gradient[];
+    loadAnimation(): void;
+    animateToCurrentForm(): void;
+    onClick(): void;
+    onMouseEnter(): void;
+    onMouseLeave(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.d.ts.map
new file mode 100644
index 0000000..7941319
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map-cell.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"heat-map-cell.component.d.ts","sources":["heat-map-cell.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, SimpleChanges, ElementRef, OnChanges } from '@angular/core';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { Gradient } from '../common/types/gradient.interface';\nexport declare class HeatMapCellComponent implements OnChanges {\n    fill: string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    data: number;\n    gradient: boolean;\n    animations: boolean;\n    select: EventEmitter<number>;\n    activate: EventEmitter<number>;\n    deactivate: EventEmitter<number>;\n    element: HTMLElement;\n    transform: string;\n    startOpacity: number;\n    gradientId: string;\n    gradientUrl: string;\n    gradientStops: Gradient[];\n    barOrientation: typeof BarOrientation;\n    constructor(element: ElementRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    getGradientStops(): Gradient[];\n    loadAnimation(): void;\n    animateToCurrentForm(): void;\n    onClick(): void;\n    onMouseEnter(): void;\n    onMouseLeave(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.component.d.ts
index 8df75b6..0b16e71 100644
--- a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.component.d.ts
@@ -4,6 +4,7 @@ import { ColorHelper } from '../common/color.helper';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
 import { ScaleType } from '../common/types/scale-type.enum';
+import * as ɵngcc0 from '@angular/core';
 interface RectItem {
     fill: string;
     height: number;
@@ -85,5 +86,9 @@ export declare class HeatMapComponent extends BaseChartComponent {
     }): void;
     onActivate(event: any, group: any, fromLegend?: boolean): void;
     onDeactivate(event: any, group: any, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<HeatMapComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HeatMapComponent, "ngx-charts-heat-map", never, { "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "innerPadding": "innerPadding"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "tooltipDisabled": "tooltipDisabled"; "activeEntries": "activeEntries"; "legend": "legend"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "gradient": "gradient"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "tooltipText": "tooltipText"; "min": "min"; "max": "max"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
 export {};
+
+//# sourceMappingURL=heat-map.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..8df75b6
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,89 @@
+import { TemplateRef, EventEmitter } from '@angular/core';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { ColorHelper } from '../common/color.helper';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+import { ScaleType } from '../common/types/scale-type.enum';
+interface RectItem {
+    fill: string;
+    height: number;
+    rx: number;
+    width: number;
+    x: number;
+    y: number;
+}
+export declare class HeatMapComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: boolean;
+    yAxis: boolean;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    gradient: boolean;
+    innerPadding: number | number[] | string | string[];
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    tooltipDisabled: boolean;
+    tooltipText: any;
+    min: number;
+    max: number;
+    activeEntries: any[];
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    xDomain: string[];
+    yDomain: string[];
+    valueDomain: any[];
+    xScale: any;
+    yScale: any;
+    colors: ColorHelper;
+    colorScale: any;
+    transform: string;
+    rects: RectItem[];
+    margin: number[];
+    xAxisHeight: number;
+    yAxisWidth: number;
+    legendOptions: LegendOptions;
+    scaleType: ScaleType;
+    update(): void;
+    getXDomain(): string[];
+    getYDomain(): string[];
+    getValueDomain(): any[];
+    /**
+     * Converts the input to gap paddingInner in fraction
+     * Supports the following inputs:
+     *    Numbers: 8
+     *    Strings: "8", "8px", "8%"
+     *    Arrays: [8,2], "8,2", "[8,2]"
+     *    Mixed: [8,"2%"], ["8px","2%"], "8,2%", "[8,2%]"
+     *
+     * @memberOf HeatMapComponent
+     */
+    getDimension(value: string | number | Array<string | number>, index: number, N: number, L: number): number;
+    getXScale(): any;
+    getYScale(): any;
+    getRects(): RectItem[];
+    onClick(data: any): void;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(event: any, group: any, fromLegend?: boolean): void;
+    onDeactivate(event: any, group: any, fromLegend?: boolean): void;
+}
+export {};
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.component.d.ts.map
new file mode 100644
index 0000000..8d1e230
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"heat-map.component.d.ts","sources":["heat-map.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { TemplateRef, EventEmitter } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ColorHelper } from '../common/color.helper';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { ScaleType } from '../common/types/scale-type.enum';\ninterface RectItem {\n    fill: string;\n    height: number;\n    rx: number;\n    width: number;\n    x: number;\n    y: number;\n}\nexport declare class HeatMapComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: boolean;\n    yAxis: boolean;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    gradient: boolean;\n    innerPadding: number | number[] | string | string[];\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    tooltipDisabled: boolean;\n    tooltipText: any;\n    min: number;\n    max: number;\n    activeEntries: any[];\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    xDomain: string[];\n    yDomain: string[];\n    valueDomain: any[];\n    xScale: any;\n    yScale: any;\n    colors: ColorHelper;\n    colorScale: any;\n    transform: string;\n    rects: RectItem[];\n    margin: number[];\n    xAxisHeight: number;\n    yAxisWidth: number;\n    legendOptions: LegendOptions;\n    scaleType: ScaleType;\n    update(): void;\n    getXDomain(): string[];\n    getYDomain(): string[];\n    getValueDomain(): any[];\n    /**\n     * Converts the input to gap paddingInner in fraction\n     * Supports the following inputs:\n     *    Numbers: 8\n     *    Strings: \"8\", \"8px\", \"8%\"\n     *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n     *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n     *\n     * @memberOf HeatMapComponent\n     */\n    getDimension(value: string | number | Array<string | number>, index: number, N: number, L: number): number;\n    getXScale(): any;\n    getYScale(): any;\n    getRects(): RectItem[];\n    onClick(data: any): void;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(event: any, group: any, fromLegend?: boolean): void;\n    onDeactivate(event: any, group: any, fromLegend?: boolean): void;\n}\nexport {};\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.module.d.ts
index 17a012d..d215999 100644
--- a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.module.d.ts
@@ -1,2 +1,12 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './heat-map-cell.component';
+import * as ɵngcc2 from './heat-map-cell-series.component';
+import * as ɵngcc3 from './heat-map.component';
+import * as ɵngcc4 from '../common/chart-common.module';
 export declare class HeatMapModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<HeatMapModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<HeatMapModule, [typeof ɵngcc1.HeatMapCellComponent, typeof ɵngcc2.HeatCellSeriesComponent, typeof ɵngcc3.HeatMapComponent], [typeof ɵngcc4.ChartCommonModule], [typeof ɵngcc1.HeatMapCellComponent, typeof ɵngcc2.HeatCellSeriesComponent, typeof ɵngcc3.HeatMapComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<HeatMapModule>;
 }
+
+//# sourceMappingURL=heat-map.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..17a012d
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class HeatMapModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.module.d.ts.map
new file mode 100644
index 0000000..2049818
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/heat-map/heat-map.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"heat-map.module.d.ts","sources":["heat-map.module.d.ts"],"names":[],"mappings":";;;;;AAAA;;;;AACA","sourcesContent":["export declare class HeatMapModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.component.d.ts
index 3191765..2b30c1e 100644
--- a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.component.d.ts
@@ -4,6 +4,7 @@ import { BaseChartComponent } from '../common/base-chart.component';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class LineChartComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -94,4 +95,8 @@ export declare class LineChartComponent extends BaseChartComponent {
     onActivate(item: any): void;
     onDeactivate(item: any): void;
     deactivateAll(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<LineChartComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LineChartComponent, "ngx-charts-line-chart", never, { "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "showGridLines": "showGridLines"; "curve": "curve"; "activeEntries": "activeEntries"; "trimXAxisTicks": "trimXAxisTicks"; "trimYAxisTicks": "trimYAxisTicks"; "rotateXAxisTicks": "rotateXAxisTicks"; "maxXAxisTickLength": "maxXAxisTickLength"; "maxYAxisTickLength": "maxYAxisTickLength"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "showRefLines": "showRefLines"; "showRefLabels": "showRefLabels"; "legend": "legend"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "autoScale": "autoScale"; "timeline": "timeline"; "gradient": "gradient"; "schemeType": "schemeType"; "rangeFillOpacity": "rangeFillOpacity"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; "xAxisTicks": "xAxisTicks"; "yAxisTicks": "yAxisTicks"; "referenceLines": "referenceLines"; "xScaleMin": "xScaleMin"; "xScaleMax": "xScaleMax"; "yScaleMin": "yScaleMin"; "yScaleMax": "yScaleMax"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate", "seriesTooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=line-chart.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..3191765
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,97 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class LineChartComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: boolean;
+    yAxis: boolean;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    autoScale: boolean;
+    timeline: boolean;
+    gradient: boolean;
+    showGridLines: boolean;
+    curve: any;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    rangeFillOpacity: number;
+    trimXAxisTicks: boolean;
+    trimYAxisTicks: boolean;
+    rotateXAxisTicks: boolean;
+    maxXAxisTickLength: number;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: any;
+    yAxisTickFormatting: any;
+    xAxisTicks: any[];
+    yAxisTicks: any[];
+    roundDomains: boolean;
+    tooltipDisabled: boolean;
+    showRefLines: boolean;
+    referenceLines: any;
+    showRefLabels: boolean;
+    xScaleMin: number;
+    xScaleMax: number;
+    yScaleMin: number;
+    yScaleMax: number;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    seriesTooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    xSet: any;
+    xDomain: any;
+    yDomain: [number, number];
+    seriesDomain: any;
+    yScale: any;
+    xScale: any;
+    colors: ColorHelper;
+    scaleType: ScaleType;
+    transform: string;
+    clipPath: string;
+    clipPathId: string;
+    areaPath: any;
+    margin: number[];
+    hoveredVertical: any;
+    xAxisHeight: number;
+    yAxisWidth: number;
+    filteredDomain: any;
+    legendOptions: any;
+    hasRange: boolean;
+    timelineWidth: any;
+    timelineHeight: number;
+    timelineXScale: any;
+    timelineYScale: any;
+    timelineXDomain: any;
+    timelineTransform: any;
+    timelinePadding: number;
+    update(): void;
+    updateTimeline(): void;
+    getXDomain(): any[];
+    getYDomain(): [number, number];
+    getSeriesDomain(): string[];
+    getXScale(domain: any, width: number): any;
+    getYScale(domain: any, height: number): any;
+    updateDomain(domain: any): void;
+    updateHoveredVertical(item: any): void;
+    hideCircles(): void;
+    onClick(data: any): void;
+    trackBy(index: number, item: any): string;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(item: any): void;
+    onDeactivate(item: any): void;
+    deactivateAll(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.component.d.ts.map
new file mode 100644
index 0000000..5307d42
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"line-chart.component.d.ts","sources":["line-chart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class LineChartComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: boolean;\n    yAxis: boolean;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    autoScale: boolean;\n    timeline: boolean;\n    gradient: boolean;\n    showGridLines: boolean;\n    curve: any;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    rangeFillOpacity: number;\n    trimXAxisTicks: boolean;\n    trimYAxisTicks: boolean;\n    rotateXAxisTicks: boolean;\n    maxXAxisTickLength: number;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: any;\n    yAxisTickFormatting: any;\n    xAxisTicks: any[];\n    yAxisTicks: any[];\n    roundDomains: boolean;\n    tooltipDisabled: boolean;\n    showRefLines: boolean;\n    referenceLines: any;\n    showRefLabels: boolean;\n    xScaleMin: number;\n    xScaleMax: number;\n    yScaleMin: number;\n    yScaleMax: number;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    seriesTooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    xSet: any;\n    xDomain: any;\n    yDomain: [number, number];\n    seriesDomain: any;\n    yScale: any;\n    xScale: any;\n    colors: ColorHelper;\n    scaleType: ScaleType;\n    transform: string;\n    clipPath: string;\n    clipPathId: string;\n    areaPath: any;\n    margin: number[];\n    hoveredVertical: any;\n    xAxisHeight: number;\n    yAxisWidth: number;\n    filteredDomain: any;\n    legendOptions: any;\n    hasRange: boolean;\n    timelineWidth: any;\n    timelineHeight: number;\n    timelineXScale: any;\n    timelineYScale: any;\n    timelineXDomain: any;\n    timelineTransform: any;\n    timelinePadding: number;\n    update(): void;\n    updateTimeline(): void;\n    getXDomain(): any[];\n    getYDomain(): [number, number];\n    getSeriesDomain(): string[];\n    getXScale(domain: any, width: number): any;\n    getYScale(domain: any, height: number): any;\n    updateDomain(domain: any): void;\n    updateHoveredVertical(item: any): void;\n    hideCircles(): void;\n    onClick(data: any): void;\n    trackBy(index: number, item: any): string;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(item: any): void;\n    onDeactivate(item: any): void;\n    deactivateAll(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.module.d.ts
index 5d9fb58..825c658 100644
--- a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.module.d.ts
@@ -1,2 +1,12 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './line.component';
+import * as ɵngcc2 from './line-chart.component';
+import * as ɵngcc3 from './line-series.component';
+import * as ɵngcc4 from '../common/chart-common.module';
 export declare class LineChartModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<LineChartModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<LineChartModule, [typeof ɵngcc1.LineComponent, typeof ɵngcc2.LineChartComponent, typeof ɵngcc3.LineSeriesComponent], [typeof ɵngcc4.ChartCommonModule], [typeof ɵngcc1.LineComponent, typeof ɵngcc2.LineChartComponent, typeof ɵngcc3.LineSeriesComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<LineChartModule>;
 }
+
+//# sourceMappingURL=line-chart.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..5d9fb58
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class LineChartModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.module.d.ts.map
new file mode 100644
index 0000000..0918571
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-chart.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"line-chart.module.d.ts","sources":["line-chart.module.d.ts"],"names":[],"mappings":";;;;;AAAA;;;;AACA","sourcesContent":["export declare class LineChartModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-series.component.d.ts
index 27b0ee9..5b80ee5 100644
--- a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-series.component.d.ts
@@ -4,6 +4,7 @@ import { Series } from '../models/chart-data.model';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { Gradient } from '../common/types/gradient.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class LineSeriesComponent implements OnChanges {
     data: Series;
     xScale: any;
@@ -34,4 +35,8 @@ export declare class LineSeriesComponent implements OnChanges {
     updateGradients(): void;
     isActive(entry: any): boolean;
     isInactive(entry: any): boolean;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<LineSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LineSeriesComponent, "g[ngx-charts-line-series]", never, { "animations": "animations"; "data": "data"; "xScale": "xScale"; "yScale": "yScale"; "colors": "colors"; "scaleType": "scaleType"; "curve": "curve"; "activeEntries": "activeEntries"; "rangeFillOpacity": "rangeFillOpacity"; "hasRange": "hasRange"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=line-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..27b0ee9
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,37 @@
+import { OnChanges, SimpleChanges } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { Series } from '../models/chart-data.model';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { Gradient } from '../common/types/gradient.interface';
+export declare class LineSeriesComponent implements OnChanges {
+    data: Series;
+    xScale: any;
+    yScale: any;
+    colors: ColorHelper;
+    scaleType: ScaleType;
+    curve: any;
+    activeEntries: any[];
+    rangeFillOpacity: number;
+    hasRange: boolean;
+    animations: boolean;
+    path: string;
+    outerPath: string;
+    areaPath: string;
+    gradientId: string;
+    gradientUrl: string;
+    hasGradient: boolean;
+    gradientStops: Gradient[];
+    areaGradientStops: Gradient[];
+    stroke: string;
+    barOrientation: typeof BarOrientation;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getLineGenerator(): any;
+    getRangeGenerator(): any;
+    getAreaGenerator(): any;
+    sortData(data: any): any;
+    updateGradients(): void;
+    isActive(entry: any): boolean;
+    isInactive(entry: any): boolean;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-series.component.d.ts.map
new file mode 100644
index 0000000..b626747
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"line-series.component.d.ts","sources":["line-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, SimpleChanges } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { Series } from '../models/chart-data.model';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { Gradient } from '../common/types/gradient.interface';\nexport declare class LineSeriesComponent implements OnChanges {\n    data: Series;\n    xScale: any;\n    yScale: any;\n    colors: ColorHelper;\n    scaleType: ScaleType;\n    curve: any;\n    activeEntries: any[];\n    rangeFillOpacity: number;\n    hasRange: boolean;\n    animations: boolean;\n    path: string;\n    outerPath: string;\n    areaPath: string;\n    gradientId: string;\n    gradientUrl: string;\n    hasGradient: boolean;\n    gradientStops: Gradient[];\n    areaGradientStops: Gradient[];\n    stroke: string;\n    barOrientation: typeof BarOrientation;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getLineGenerator(): any;\n    getRangeGenerator(): any;\n    getAreaGenerator(): any;\n    sortData(data: any): any;\n    updateGradients(): void;\n    isActive(entry: any): boolean;\n    isInactive(entry: any): boolean;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/line-chart/line.component.d.ts
index 24fa229..70ae96f 100644
--- a/node_modules/@swimlane/ngx-charts/lib/line-chart/line.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line.component.d.ts
@@ -1,5 +1,6 @@
 import { OnChanges, ElementRef, SimpleChanges } from '@angular/core';
 import { Series } from '../models/chart-data.model';
+import * as ɵngcc0 from '@angular/core';
 export declare class LineComponent implements OnChanges {
     private element;
     path: string;
@@ -12,4 +13,8 @@ export declare class LineComponent implements OnChanges {
     constructor(element: ElementRef);
     ngOnChanges(changes: SimpleChanges): void;
     updatePathEl(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<LineComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<LineComponent, "g[ngx-charts-line]", never, { "fill": "fill"; "animations": "animations"; "path": "path"; "stroke": "stroke"; "data": "data"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=line.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/line-chart/line.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..24fa229
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,15 @@
+import { OnChanges, ElementRef, SimpleChanges } from '@angular/core';
+import { Series } from '../models/chart-data.model';
+export declare class LineComponent implements OnChanges {
+    private element;
+    path: string;
+    stroke: string;
+    data: Series;
+    fill: string;
+    animations: boolean;
+    initialized: boolean;
+    initialPath: string;
+    constructor(element: ElementRef);
+    ngOnChanges(changes: SimpleChanges): void;
+    updatePathEl(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/line-chart/line.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/line-chart/line.component.d.ts.map
new file mode 100644
index 0000000..d91eba2
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/line-chart/line.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"line.component.d.ts","sources":["line.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, ElementRef, SimpleChanges } from '@angular/core';\nimport { Series } from '../models/chart-data.model';\nexport declare class LineComponent implements OnChanges {\n    private element;\n    path: string;\n    stroke: string;\n    data: Series;\n    fill: string;\n    animations: boolean;\n    initialized: boolean;\n    initialPath: string;\n    constructor(element: ElementRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    updatePathEl(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/ngx-charts.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/ngx-charts.module.d.ts
index 76acebb..3192973 100644
--- a/node_modules/@swimlane/ngx-charts/lib/ngx-charts.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/ngx-charts.module.d.ts
@@ -1,3 +1,21 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './common/chart-common.module';
+import * as ɵngcc2 from './area-chart/area-chart.module';
+import * as ɵngcc3 from './bar-chart/bar-chart.module';
+import * as ɵngcc4 from './box-chart/box-chart.module';
+import * as ɵngcc5 from './bubble-chart/bubble-chart.module';
+import * as ɵngcc6 from './heat-map/heat-map.module';
+import * as ɵngcc7 from './line-chart/line-chart.module';
+import * as ɵngcc8 from './polar-chart/polar-chart.module';
+import * as ɵngcc9 from './number-card/number-card.module';
+import * as ɵngcc10 from './pie-chart/pie-chart.module';
+import * as ɵngcc11 from './tree-map/tree-map.module';
+import * as ɵngcc12 from './gauge/gauge.module';
 export declare class NgxChartsModule {
     constructor();
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxChartsModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<NgxChartsModule, never, never, [typeof ɵngcc1.ChartCommonModule, typeof ɵngcc2.AreaChartModule, typeof ɵngcc3.BarChartModule, typeof ɵngcc4.BoxChartModule, typeof ɵngcc5.BubbleChartModule, typeof ɵngcc6.HeatMapModule, typeof ɵngcc7.LineChartModule, typeof ɵngcc8.PolarChartModule, typeof ɵngcc9.NumberCardModule, typeof ɵngcc10.PieChartModule, typeof ɵngcc11.TreeMapModule, typeof ɵngcc12.GaugeModule]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<NgxChartsModule>;
 }
+
+//# sourceMappingURL=ngx-charts.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/ngx-charts.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/ngx-charts.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..76acebb
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/ngx-charts.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,3 @@
+export declare class NgxChartsModule {
+    constructor();
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/ngx-charts.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/ngx-charts.module.d.ts.map
new file mode 100644
index 0000000..30c0e04
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/ngx-charts.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ngx-charts.module.d.ts","sources":["ngx-charts.module.d.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;AACA;;;;AACA","sourcesContent":["export declare class NgxChartsModule {\n    constructor();\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/card-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/number-card/card-series.component.d.ts
index 54d728a..7c94ef3 100644
--- a/node_modules/@swimlane/ngx-charts/lib/number-card/card-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/card-series.component.d.ts
@@ -2,6 +2,7 @@ import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
 import { GridItem } from '../common/grid-layout.helper';
 import { ColorHelper } from '../common/color.helper';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export interface CardModel extends GridItem {
     color: string;
     tooltipText: string;
@@ -30,4 +31,8 @@ export declare class CardSeriesComponent implements OnChanges {
     getCards(): CardModel[];
     trackBy(index: any, card: any): string;
     onClick(data: any): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<CardSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CardSeriesComponent, "g[ngx-charts-card-series]", never, { "innerPadding": "innerPadding"; "emptyColor": "emptyColor"; "animations": "animations"; "data": "data"; "dims": "dims"; "colors": "colors"; "cardColor": "cardColor"; "bandColor": "bandColor"; "textColor": "textColor"; "valueFormatting": "valueFormatting"; "labelFormatting": "labelFormatting"; }, { "select": "select"; }, never, never>;
 }
+
+//# sourceMappingURL=card-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/card-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/number-card/card-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..54d728a
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/card-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,33 @@
+import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
+import { GridItem } from '../common/grid-layout.helper';
+import { ColorHelper } from '../common/color.helper';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export interface CardModel extends GridItem {
+    color: string;
+    tooltipText: string;
+    textColor: string;
+    bandColor: string;
+    label: string;
+}
+export declare class CardSeriesComponent implements OnChanges {
+    data: CardModel[];
+    dims: ViewDimensions;
+    colors: ColorHelper;
+    innerPadding: number;
+    cardColor: string;
+    bandColor: string;
+    emptyColor: string;
+    textColor: string;
+    valueFormatting: any;
+    labelFormatting: any;
+    animations: boolean;
+    select: EventEmitter<any>;
+    cards: CardModel[];
+    emptySlots: any[];
+    medianSize: number;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getCards(): CardModel[];
+    trackBy(index: any, card: any): string;
+    onClick(data: any): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/card-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/number-card/card-series.component.d.ts.map
new file mode 100644
index 0000000..d5bc638
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/card-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"card-series.component.d.ts","sources":["card-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { GridItem } from '../common/grid-layout.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport interface CardModel extends GridItem {\n    color: string;\n    tooltipText: string;\n    textColor: string;\n    bandColor: string;\n    label: string;\n}\nexport declare class CardSeriesComponent implements OnChanges {\n    data: CardModel[];\n    dims: ViewDimensions;\n    colors: ColorHelper;\n    innerPadding: number;\n    cardColor: string;\n    bandColor: string;\n    emptyColor: string;\n    textColor: string;\n    valueFormatting: any;\n    labelFormatting: any;\n    animations: boolean;\n    select: EventEmitter<any>;\n    cards: CardModel[];\n    emptySlots: any[];\n    medianSize: number;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getCards(): CardModel[];\n    trackBy(index: any, card: any): string;\n    onClick(data: any): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/card.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/number-card/card.component.d.ts
index 1799059..610c2c8 100644
--- a/node_modules/@swimlane/ngx-charts/lib/number-card/card.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/card.component.d.ts
@@ -1,5 +1,6 @@
 import { EventEmitter, ElementRef, SimpleChanges, OnChanges, ChangeDetectorRef, NgZone, OnDestroy } from '@angular/core';
 import { GridData } from '../common/grid-layout.helper';
+import * as ɵngcc0 from '@angular/core';
 export declare class CardComponent implements OnChanges, OnDestroy {
     private cd;
     private zone;
@@ -46,4 +47,8 @@ export declare class CardComponent implements OnChanges, OnDestroy {
     scaleTextSSR(): void;
     setPadding(): void;
     onClick(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<CardComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CardComponent, "g[ngx-charts-card]", never, { "animations": "animations"; "label": "label"; "color": "color"; "bandColor": "bandColor"; "textColor": "textColor"; "x": "x"; "y": "y"; "width": "width"; "height": "height"; "data": "data"; "medianSize": "medianSize"; "valueFormatting": "valueFormatting"; "labelFormatting": "labelFormatting"; }, { "select": "select"; }, never, never>;
 }
+
+//# sourceMappingURL=card.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/card.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/number-card/card.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..1799059
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/card.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,49 @@
+import { EventEmitter, ElementRef, SimpleChanges, OnChanges, ChangeDetectorRef, NgZone, OnDestroy } from '@angular/core';
+import { GridData } from '../common/grid-layout.helper';
+export declare class CardComponent implements OnChanges, OnDestroy {
+    private cd;
+    private zone;
+    private platformId;
+    color: string;
+    bandColor: string;
+    textColor: string;
+    x: number;
+    y: number;
+    width: number;
+    height: number;
+    label: string;
+    data: GridData;
+    medianSize: number;
+    valueFormatting: any;
+    labelFormatting: any;
+    animations: boolean;
+    select: EventEmitter<any>;
+    textEl: ElementRef;
+    element: HTMLElement;
+    value: string;
+    transform: string;
+    formattedLabel: string;
+    cardWidth: number;
+    cardHeight: number;
+    textWidth: number;
+    textFontSize: number;
+    textTransform: string;
+    initialized: boolean;
+    animationReq: number;
+    bandHeight: number;
+    transformBand: string;
+    textPadding: number[];
+    labelFontSize: number;
+    bandPath: string;
+    constructor(element: ElementRef, cd: ChangeDetectorRef, zone: NgZone, platformId: any);
+    ngOnChanges(changes: SimpleChanges): void;
+    ngOnInit(): void;
+    ngOnDestroy(): void;
+    update(): void;
+    paddedValue(value: string): string;
+    startCount(): void;
+    scaleText(): void;
+    scaleTextSSR(): void;
+    setPadding(): void;
+    onClick(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/card.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/number-card/card.component.d.ts.map
new file mode 100644
index 0000000..fa987d7
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/card.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"card.component.d.ts","sources":["card.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, SimpleChanges, OnChanges, ChangeDetectorRef, NgZone, OnDestroy } from '@angular/core';\nimport { GridData } from '../common/grid-layout.helper';\nexport declare class CardComponent implements OnChanges, OnDestroy {\n    private cd;\n    private zone;\n    private platformId;\n    color: string;\n    bandColor: string;\n    textColor: string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    label: string;\n    data: GridData;\n    medianSize: number;\n    valueFormatting: any;\n    labelFormatting: any;\n    animations: boolean;\n    select: EventEmitter<any>;\n    textEl: ElementRef;\n    element: HTMLElement;\n    value: string;\n    transform: string;\n    formattedLabel: string;\n    cardWidth: number;\n    cardHeight: number;\n    textWidth: number;\n    textFontSize: number;\n    textTransform: string;\n    initialized: boolean;\n    animationReq: number;\n    bandHeight: number;\n    transformBand: string;\n    textPadding: number[];\n    labelFontSize: number;\n    bandPath: string;\n    constructor(element: ElementRef, cd: ChangeDetectorRef, zone: NgZone, platformId: any);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    update(): void;\n    paddedValue(value: string): string;\n    startCount(): void;\n    scaleText(): void;\n    scaleTextSSR(): void;\n    setPadding(): void;\n    onClick(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.component.d.ts
index 2bfdda7..591f3b8 100644
--- a/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.component.d.ts
@@ -2,6 +2,7 @@ import { BaseChartComponent } from '../common/base-chart.component';
 import { ColorHelper } from '../common/color.helper';
 import { CardModel } from './card-series.component';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class NumberCardComponent extends BaseChartComponent {
     cardColor: string;
     bandColor: string;
@@ -22,4 +23,8 @@ export declare class NumberCardComponent extends BaseChartComponent {
     getDomain(): string[];
     onClick(data: any): void;
     setColors(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<NumberCardComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NumberCardComponent, "ngx-charts-number-card", never, { "emptyColor": "emptyColor"; "innerPadding": "innerPadding"; "cardColor": "cardColor"; "bandColor": "bandColor"; "textColor": "textColor"; "valueFormatting": "valueFormatting"; "labelFormatting": "labelFormatting"; "designatedTotal": "designatedTotal"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=number-card.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..2bfdda7
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,25 @@
+import { BaseChartComponent } from '../common/base-chart.component';
+import { ColorHelper } from '../common/color.helper';
+import { CardModel } from './card-series.component';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class NumberCardComponent extends BaseChartComponent {
+    cardColor: string;
+    bandColor: string;
+    emptyColor: string;
+    innerPadding: number;
+    textColor: string;
+    valueFormatting: any;
+    labelFormatting: any;
+    designatedTotal: number;
+    dims: ViewDimensions;
+    data: CardModel[];
+    colors: ColorHelper;
+    transform: string;
+    domain: any[];
+    margin: number[];
+    get clickable(): boolean;
+    update(): void;
+    getDomain(): string[];
+    onClick(data: any): void;
+    setColors(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.component.d.ts.map
new file mode 100644
index 0000000..108fd18
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"number-card.component.d.ts","sources":["number-card.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { BaseChartComponent } from '../common/base-chart.component';\nimport { ColorHelper } from '../common/color.helper';\nimport { CardModel } from './card-series.component';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class NumberCardComponent extends BaseChartComponent {\n    cardColor: string;\n    bandColor: string;\n    emptyColor: string;\n    innerPadding: number;\n    textColor: string;\n    valueFormatting: any;\n    labelFormatting: any;\n    designatedTotal: number;\n    dims: ViewDimensions;\n    data: CardModel[];\n    colors: ColorHelper;\n    transform: string;\n    domain: any[];\n    margin: number[];\n    get clickable(): boolean;\n    update(): void;\n    getDomain(): string[];\n    onClick(data: any): void;\n    setColors(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.module.d.ts
index d013505..3b3cb62 100644
--- a/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.module.d.ts
@@ -1,2 +1,12 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './card.component';
+import * as ɵngcc2 from './card-series.component';
+import * as ɵngcc3 from './number-card.component';
+import * as ɵngcc4 from '../common/chart-common.module';
 export declare class NumberCardModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<NumberCardModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<NumberCardModule, [typeof ɵngcc1.CardComponent, typeof ɵngcc2.CardSeriesComponent, typeof ɵngcc3.NumberCardComponent], [typeof ɵngcc4.ChartCommonModule], [typeof ɵngcc1.CardComponent, typeof ɵngcc2.CardSeriesComponent, typeof ɵngcc3.NumberCardComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<NumberCardModule>;
 }
+
+//# sourceMappingURL=number-card.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..d013505
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class NumberCardModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.module.d.ts.map
new file mode 100644
index 0000000..f6f9858
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/number-card/number-card.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"number-card.module.d.ts","sources":["number-card.module.d.ts"],"names":[],"mappings":";;;;;AAAA;;;;AACA","sourcesContent":["export declare class NumberCardModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.d.ts
index cb955a1..aa5cccd 100644
--- a/node_modules/@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.d.ts
@@ -3,6 +3,7 @@ import { ColorHelper } from '../common/color.helper';
 import { BaseChartComponent } from '../common/base-chart.component';
 import { DataItem } from '../models/chart-data.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class AdvancedPieChartComponent extends BaseChartComponent {
     gradient: boolean;
     activeEntries: any[];
@@ -29,4 +30,8 @@ export declare class AdvancedPieChartComponent extends BaseChartComponent {
     setColors(): void;
     onActivate(item: any, fromLegend?: boolean): void;
     onDeactivate(item: any, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<AdvancedPieChartComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AdvancedPieChartComponent, "ngx-charts-advanced-pie-chart", never, { "activeEntries": "activeEntries"; "tooltipDisabled": "tooltipDisabled"; "label": "label"; "gradient": "gradient"; "tooltipText": "tooltipText"; "valueFormatting": "valueFormatting"; "nameFormatting": "nameFormatting"; "percentageFormatting": "percentageFormatting"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=advanced-pie-chart.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..cb955a1
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,32 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { DataItem } from '../models/chart-data.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class AdvancedPieChartComponent extends BaseChartComponent {
+    gradient: boolean;
+    activeEntries: any[];
+    tooltipDisabled: boolean;
+    tooltipText: any;
+    label: string;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    domain: string[];
+    outerRadius: number;
+    innerRadius: number;
+    transform: string;
+    colors: ColorHelper;
+    legendWidth: number;
+    margin: number[];
+    valueFormatting: (value: number) => any;
+    nameFormatting: (value: string) => any;
+    percentageFormatting: (value: number) => any;
+    update(): void;
+    getDomain(): string[];
+    onClick(data: DataItem): void;
+    setColors(): void;
+    onActivate(item: any, fromLegend?: boolean): void;
+    onDeactivate(item: any, fromLegend?: boolean): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.d.ts.map
new file mode 100644
index 0000000..d6a523f
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/advanced-pie-chart.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"advanced-pie-chart.component.d.ts","sources":["advanced-pie-chart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class AdvancedPieChartComponent extends BaseChartComponent {\n    gradient: boolean;\n    activeEntries: any[];\n    tooltipDisabled: boolean;\n    tooltipText: any;\n    label: string;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    domain: string[];\n    outerRadius: number;\n    innerRadius: number;\n    transform: string;\n    colors: ColorHelper;\n    legendWidth: number;\n    margin: number[];\n    valueFormatting: (value: number) => any;\n    nameFormatting: (value: string) => any;\n    percentageFormatting: (value: number) => any;\n    update(): void;\n    getDomain(): string[];\n    onClick(data: DataItem): void;\n    setColors(): void;\n    onActivate(item: any, fromLegend?: boolean): void;\n    onDeactivate(item: any, fromLegend?: boolean): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.d.ts
index b1b58f0..8f51f1d 100644
--- a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.d.ts
@@ -1,6 +1,7 @@
 import { EventEmitter, ElementRef, SimpleChanges, OnChanges } from '@angular/core';
 import { DataItem } from '../models/chart-data.model';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class PieArcComponent implements OnChanges {
     fill: string;
     startAngle: number;
@@ -38,4 +39,8 @@ export declare class PieArcComponent implements OnChanges {
     updateAnimation(): void;
     onClick(): void;
     onDblClick(event: MouseEvent): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<PieArcComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PieArcComponent, "g[ngx-charts-pie-arc]", never, { "startAngle": "startAngle"; "endAngle": "endAngle"; "cornerRadius": "cornerRadius"; "explodeSlices": "explodeSlices"; "gradient": "gradient"; "animate": "animate"; "pointerEvents": "pointerEvents"; "isActive": "isActive"; "fill": "fill"; "innerRadius": "innerRadius"; "outerRadius": "outerRadius"; "value": "value"; "max": "max"; "data": "data"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; "dblclick": "dblclick"; }, never, never>;
 }
+
+//# sourceMappingURL=pie-arc.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..b1b58f0
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,41 @@
+import { EventEmitter, ElementRef, SimpleChanges, OnChanges } from '@angular/core';
+import { DataItem } from '../models/chart-data.model';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+export declare class PieArcComponent implements OnChanges {
+    fill: string;
+    startAngle: number;
+    endAngle: number;
+    innerRadius: number;
+    outerRadius: number;
+    cornerRadius: number;
+    value: number;
+    max: number;
+    data: DataItem;
+    explodeSlices: boolean;
+    gradient: boolean;
+    animate: boolean;
+    pointerEvents: boolean;
+    isActive: boolean;
+    select: EventEmitter<any>;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    dblclick: EventEmitter<any>;
+    barOrientation: typeof BarOrientation;
+    element: HTMLElement;
+    path: any;
+    startOpacity: number;
+    radialGradientId: string;
+    gradientFill: string;
+    initialized: boolean;
+    private _timeout;
+    constructor(element: ElementRef);
+    ngOnChanges(changes: SimpleChanges): void;
+    getGradient(): string;
+    getPointerEvents(): string;
+    update(): void;
+    calculateArc(): any;
+    loadAnimation(): void;
+    updateAnimation(): void;
+    onClick(): void;
+    onDblClick(event: MouseEvent): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.d.ts.map
new file mode 100644
index 0000000..f5353f3
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-arc.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"pie-arc.component.d.ts","sources":["pie-arc.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, SimpleChanges, OnChanges } from '@angular/core';\nimport { DataItem } from '../models/chart-data.model';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nexport declare class PieArcComponent implements OnChanges {\n    fill: string;\n    startAngle: number;\n    endAngle: number;\n    innerRadius: number;\n    outerRadius: number;\n    cornerRadius: number;\n    value: number;\n    max: number;\n    data: DataItem;\n    explodeSlices: boolean;\n    gradient: boolean;\n    animate: boolean;\n    pointerEvents: boolean;\n    isActive: boolean;\n    select: EventEmitter<any>;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    dblclick: EventEmitter<any>;\n    barOrientation: typeof BarOrientation;\n    element: HTMLElement;\n    path: any;\n    startOpacity: number;\n    radialGradientId: string;\n    gradientFill: string;\n    initialized: boolean;\n    private _timeout;\n    constructor(element: ElementRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    getGradient(): string;\n    getPointerEvents(): string;\n    update(): void;\n    calculateArc(): any;\n    loadAnimation(): void;\n    updateAnimation(): void;\n    onClick(): void;\n    onDblClick(event: MouseEvent): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.d.ts
index 556bdf9..8e9c9d3 100644
--- a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.d.ts
@@ -4,6 +4,7 @@ import { BaseChartComponent } from '../common/base-chart.component';
 import { DataItem } from '../models/chart-data.model';
 import { LegendOptions, LegendPosition } from '../common/types/legend.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class PieChartComponent extends BaseChartComponent {
     labels: boolean;
     legend: boolean;
@@ -41,4 +42,8 @@ export declare class PieChartComponent extends BaseChartComponent {
     onActivate(item: any, fromLegend?: boolean): void;
     onDeactivate(item: any, fromLegend?: boolean): void;
     private hasNoOptionalMarginsSet;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<PieChartComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PieChartComponent, "ngx-charts-pie-chart", never, { "labels": "labels"; "legend": "legend"; "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "explodeSlices": "explodeSlices"; "doughnut": "doughnut"; "arcWidth": "arcWidth"; "activeEntries": "activeEntries"; "tooltipDisabled": "tooltipDisabled"; "trimLabels": "trimLabels"; "maxLabelLength": "maxLabelLength"; "margins": "margins"; "gradient": "gradient"; "labelFormatting": "labelFormatting"; "tooltipText": "tooltipText"; }, { "dblclick": "dblclick"; "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=pie-chart.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..556bdf9
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,44 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { DataItem } from '../models/chart-data.model';
+import { LegendOptions, LegendPosition } from '../common/types/legend.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class PieChartComponent extends BaseChartComponent {
+    labels: boolean;
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    explodeSlices: boolean;
+    doughnut: boolean;
+    arcWidth: number;
+    gradient: boolean;
+    activeEntries: any[];
+    tooltipDisabled: boolean;
+    labelFormatting: any;
+    trimLabels: boolean;
+    maxLabelLength: number;
+    tooltipText: any;
+    dblclick: EventEmitter<any>;
+    margins: number[];
+    select: EventEmitter<any>;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    translation: string;
+    outerRadius: number;
+    innerRadius: number;
+    data: DataItem[];
+    colors: ColorHelper;
+    domain: string[];
+    dims: ViewDimensions;
+    legendOptions: LegendOptions;
+    update(): void;
+    getDomain(): string[];
+    onClick(data: DataItem | string): void;
+    setColors(): void;
+    getLegendOptions(): LegendOptions;
+    onActivate(item: any, fromLegend?: boolean): void;
+    onDeactivate(item: any, fromLegend?: boolean): void;
+    private hasNoOptionalMarginsSet;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.d.ts.map
new file mode 100644
index 0000000..f07fd89
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"pie-chart.component.d.ts","sources":["pie-chart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\nimport { LegendOptions, LegendPosition } from '../common/types/legend.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class PieChartComponent extends BaseChartComponent {\n    labels: boolean;\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    explodeSlices: boolean;\n    doughnut: boolean;\n    arcWidth: number;\n    gradient: boolean;\n    activeEntries: any[];\n    tooltipDisabled: boolean;\n    labelFormatting: any;\n    trimLabels: boolean;\n    maxLabelLength: number;\n    tooltipText: any;\n    dblclick: EventEmitter<any>;\n    margins: number[];\n    select: EventEmitter<any>;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    translation: string;\n    outerRadius: number;\n    innerRadius: number;\n    data: DataItem[];\n    colors: ColorHelper;\n    domain: string[];\n    dims: ViewDimensions;\n    legendOptions: LegendOptions;\n    update(): void;\n    getDomain(): string[];\n    onClick(data: DataItem | string): void;\n    setColors(): void;\n    getLegendOptions(): LegendOptions;\n    onActivate(item: any, fromLegend?: boolean): void;\n    onDeactivate(item: any, fromLegend?: boolean): void;\n    private hasNoOptionalMarginsSet;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.d.ts
index 8b05f7e..ddc4b06 100644
--- a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.d.ts
@@ -1,2 +1,16 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './advanced-pie-chart.component';
+import * as ɵngcc2 from './pie-label.component';
+import * as ɵngcc3 from './pie-arc.component';
+import * as ɵngcc4 from './pie-chart.component';
+import * as ɵngcc5 from './pie-grid.component';
+import * as ɵngcc6 from './pie-grid-series.component';
+import * as ɵngcc7 from './pie-series.component';
+import * as ɵngcc8 from '../common/chart-common.module';
 export declare class PieChartModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<PieChartModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<PieChartModule, [typeof ɵngcc1.AdvancedPieChartComponent, typeof ɵngcc2.PieLabelComponent, typeof ɵngcc3.PieArcComponent, typeof ɵngcc4.PieChartComponent, typeof ɵngcc5.PieGridComponent, typeof ɵngcc6.PieGridSeriesComponent, typeof ɵngcc7.PieSeriesComponent], [typeof ɵngcc8.ChartCommonModule], [typeof ɵngcc1.AdvancedPieChartComponent, typeof ɵngcc2.PieLabelComponent, typeof ɵngcc3.PieArcComponent, typeof ɵngcc4.PieChartComponent, typeof ɵngcc5.PieGridComponent, typeof ɵngcc6.PieGridSeriesComponent, typeof ɵngcc7.PieSeriesComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<PieChartModule>;
 }
+
+//# sourceMappingURL=pie-chart.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..8b05f7e
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class PieChartModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.d.ts.map
new file mode 100644
index 0000000..ec16a3f
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-chart.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"pie-chart.module.d.ts","sources":["pie-chart.module.d.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA","sourcesContent":["export declare class PieChartModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.d.ts
index b304e1c..55ffe3c 100644
--- a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.d.ts
@@ -1,6 +1,7 @@
 import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
 import { PieGridDataItem } from '../models/chart-data.model';
 import { PieGridData } from './pie-grid.component';
+import * as ɵngcc0 from '@angular/core';
 export interface PieArc {
     animate: boolean;
     class: string;
@@ -30,4 +31,8 @@ export declare class PieGridSeriesComponent implements OnChanges {
     trackBy(index: any, item: any): string;
     label(arc: any): string;
     color(arc: any): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<PieGridSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PieGridSeriesComponent, "g[ngx-charts-pie-grid-series]", never, { "innerRadius": "innerRadius"; "outerRadius": "outerRadius"; "animations": "animations"; "colors": "colors"; "data": "data"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
+
+//# sourceMappingURL=pie-grid-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..b304e1c
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,33 @@
+import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
+import { PieGridDataItem } from '../models/chart-data.model';
+import { PieGridData } from './pie-grid.component';
+export interface PieArc {
+    animate: boolean;
+    class: string;
+    data: PieGridDataItem;
+    endAngle: number;
+    fill: string;
+    pointerEvents: boolean;
+    startAngle: number;
+}
+export declare class PieGridSeriesComponent implements OnChanges {
+    colors: any;
+    data: PieGridData[];
+    innerRadius: number;
+    outerRadius: number;
+    animations: boolean;
+    select: EventEmitter<any>;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    element: HTMLElement;
+    layout: any;
+    arcs: PieArc[];
+    constructor(element: ElementRef);
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getArcs(): PieArc[];
+    onClick(data: any): void;
+    trackBy(index: any, item: any): string;
+    label(arc: any): string;
+    color(arc: any): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.d.ts.map
new file mode 100644
index 0000000..0435ce9
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"pie-grid-series.component.d.ts","sources":["pie-grid-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { PieGridDataItem } from '../models/chart-data.model';\nimport { PieGridData } from './pie-grid.component';\nexport interface PieArc {\n    animate: boolean;\n    class: string;\n    data: PieGridDataItem;\n    endAngle: number;\n    fill: string;\n    pointerEvents: boolean;\n    startAngle: number;\n}\nexport declare class PieGridSeriesComponent implements OnChanges {\n    colors: any;\n    data: PieGridData[];\n    innerRadius: number;\n    outerRadius: number;\n    animations: boolean;\n    select: EventEmitter<any>;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    element: HTMLElement;\n    layout: any;\n    arcs: PieArc[];\n    constructor(element: ElementRef);\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getArcs(): PieArc[];\n    onClick(data: any): void;\n    trackBy(index: any, item: any): string;\n    label(arc: any): string;\n    color(arc: any): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.d.ts
index 39cd219..4b6de37 100644
--- a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.d.ts
@@ -5,6 +5,7 @@ import { DataItem, PieGridDataItem } from '../models/chart-data.model';
 import { PlacementTypes } from '../common/tooltip/position';
 import { StyleTypes } from '../common/tooltip/style.type';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export interface PieGridData {
     data: PieGridDataItem;
     height: number;
@@ -42,4 +43,8 @@ export declare class PieGridComponent extends BaseChartComponent {
     setColors(): void;
     onActivate(item: any, fromLegend?: boolean): void;
     onDeactivate(item: any, fromLegend?: boolean): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<PieGridComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PieGridComponent, "ngx-charts-pie-grid", never, { "tooltipDisabled": "tooltipDisabled"; "label": "label"; "minWidth": "minWidth"; "activeEntries": "activeEntries"; "tooltipText": "tooltipText"; "designatedTotal": "designatedTotal"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=pie-grid.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..39cd219
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,45 @@
+import { TemplateRef, EventEmitter } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { DataItem, PieGridDataItem } from '../models/chart-data.model';
+import { PlacementTypes } from '../common/tooltip/position';
+import { StyleTypes } from '../common/tooltip/style.type';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export interface PieGridData {
+    data: PieGridDataItem;
+    height: number;
+    width: number;
+    x: number;
+    y: number;
+}
+export declare class PieGridComponent extends BaseChartComponent {
+    designatedTotal: number;
+    tooltipDisabled: boolean;
+    tooltipText: (o: any) => any;
+    label: string;
+    minWidth: number;
+    activeEntries: any[];
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    dims: ViewDimensions;
+    data: PieGridData[];
+    transform: string;
+    series: any[];
+    domain: string[];
+    colorScale: ColorHelper;
+    margin: number[];
+    placementTypes: typeof PlacementTypes;
+    styleTypes: typeof StyleTypes;
+    tooltipTemplate: TemplateRef<any>;
+    update(): void;
+    defaultTooltipText({ data }: {
+        data: any;
+    }): string;
+    getDomain(): string[];
+    getSeries(): any[];
+    getTotal(): any;
+    onClick(data: DataItem): void;
+    setColors(): void;
+    onActivate(item: any, fromLegend?: boolean): void;
+    onDeactivate(item: any, fromLegend?: boolean): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.d.ts.map
new file mode 100644
index 0000000..0fae505
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-grid.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"pie-grid.component.d.ts","sources":["pie-grid.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TemplateRef, EventEmitter } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem, PieGridDataItem } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport interface PieGridData {\n    data: PieGridDataItem;\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n}\nexport declare class PieGridComponent extends BaseChartComponent {\n    designatedTotal: number;\n    tooltipDisabled: boolean;\n    tooltipText: (o: any) => any;\n    label: string;\n    minWidth: number;\n    activeEntries: any[];\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    dims: ViewDimensions;\n    data: PieGridData[];\n    transform: string;\n    series: any[];\n    domain: string[];\n    colorScale: ColorHelper;\n    margin: number[];\n    placementTypes: typeof PlacementTypes;\n    styleTypes: typeof StyleTypes;\n    tooltipTemplate: TemplateRef<any>;\n    update(): void;\n    defaultTooltipText({ data }: {\n        data: any;\n    }): string;\n    getDomain(): string[];\n    getSeries(): any[];\n    getTotal(): any;\n    onClick(data: DataItem): void;\n    setColors(): void;\n    onActivate(item: any, fromLegend?: boolean): void;\n    onDeactivate(item: any, fromLegend?: boolean): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-label.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-label.component.d.ts
index 5123a18..4f2bc0d 100644
--- a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-label.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-label.component.d.ts
@@ -2,6 +2,7 @@ import { OnChanges, SimpleChanges } from '@angular/core';
 import { DefaultArcObject } from 'd3-shape';
 import { TextAnchor } from '../common/types/text-anchor.enum';
 import { DataItem } from '../models/chart-data.model';
+import * as ɵngcc0 from '@angular/core';
 export interface PieData extends DefaultArcObject {
     data: DataItem;
     index: number;
@@ -33,4 +34,8 @@ export declare class PieLabelComponent implements OnChanges {
     get textY(): number;
     textAnchor(): TextAnchor;
     midAngle(d: any): number;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<PieLabelComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PieLabelComponent, "g[ngx-charts-pie-label]", never, { "animations": "animations"; "labelTrim": "labelTrim"; "labelTrimSize": "labelTrimSize"; "data": "data"; "radius": "radius"; "label": "label"; "color": "color"; "max": "max"; "value": "value"; "explodeSlices": "explodeSlices"; }, {}, never, never>;
 }
+
+//# sourceMappingURL=pie-label.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-label.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-label.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..5123a18
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-label.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,36 @@
+import { OnChanges, SimpleChanges } from '@angular/core';
+import { DefaultArcObject } from 'd3-shape';
+import { TextAnchor } from '../common/types/text-anchor.enum';
+import { DataItem } from '../models/chart-data.model';
+export interface PieData extends DefaultArcObject {
+    data: DataItem;
+    index: number;
+    pos: [number, number];
+    value: number;
+}
+export declare class PieLabelComponent implements OnChanges {
+    platformId: any;
+    data: PieData;
+    radius: number;
+    label: string;
+    color: string;
+    max: number;
+    value: number;
+    explodeSlices: boolean;
+    animations: boolean;
+    labelTrim: boolean;
+    labelTrimSize: number;
+    trimLabel: (label: string, max?: number) => string;
+    line: string;
+    styleTransform: string;
+    attrTransform: string;
+    textTransition: string;
+    constructor(platformId: any);
+    ngOnChanges(changes: SimpleChanges): void;
+    setTransforms(): void;
+    update(): void;
+    get textX(): number;
+    get textY(): number;
+    textAnchor(): TextAnchor;
+    midAngle(d: any): number;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-label.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-label.component.d.ts.map
new file mode 100644
index 0000000..5375a06
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-label.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"pie-label.component.d.ts","sources":["pie-label.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, SimpleChanges } from '@angular/core';\nimport { DefaultArcObject } from 'd3-shape';\nimport { TextAnchor } from '../common/types/text-anchor.enum';\nimport { DataItem } from '../models/chart-data.model';\nexport interface PieData extends DefaultArcObject {\n    data: DataItem;\n    index: number;\n    pos: [number, number];\n    value: number;\n}\nexport declare class PieLabelComponent implements OnChanges {\n    platformId: any;\n    data: PieData;\n    radius: number;\n    label: string;\n    color: string;\n    max: number;\n    value: number;\n    explodeSlices: boolean;\n    animations: boolean;\n    labelTrim: boolean;\n    labelTrimSize: number;\n    trimLabel: (label: string, max?: number) => string;\n    line: string;\n    styleTransform: string;\n    attrTransform: string;\n    textTransition: string;\n    constructor(platformId: any);\n    ngOnChanges(changes: SimpleChanges): void;\n    setTransforms(): void;\n    update(): void;\n    get textX(): number;\n    get textY(): number;\n    textAnchor(): TextAnchor;\n    midAngle(d: any): number;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-series.component.d.ts
index 128242d..5e18fd0 100644
--- a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-series.component.d.ts
@@ -5,6 +5,7 @@ import { PieData } from './pie-label.component';
 import { PlacementTypes } from '../common/tooltip/position';
 import { StyleTypes } from '../common/tooltip/style.type';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class PieSeriesComponent implements OnChanges {
     colors: ColorHelper;
     series: DataItem[];
@@ -44,4 +45,8 @@ export declare class PieSeriesComponent implements OnChanges {
     trackBy(index: any, item: any): string;
     onClick(data: any): void;
     isActive(entry: any): boolean;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<PieSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PieSeriesComponent, "g[ngx-charts-pie-series]", never, { "series": "series"; "innerRadius": "innerRadius"; "outerRadius": "outerRadius"; "trimLabels": "trimLabels"; "maxLabelLength": "maxLabelLength"; "tooltipDisabled": "tooltipDisabled"; "animations": "animations"; "tooltipText": "tooltipText"; "colors": "colors"; "dims": "dims"; "explodeSlices": "explodeSlices"; "showLabels": "showLabels"; "gradient": "gradient"; "activeEntries": "activeEntries"; "labelFormatting": "labelFormatting"; "tooltipTemplate": "tooltipTemplate"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; "dblclick": "dblclick"; }, never, never>;
 }
+
+//# sourceMappingURL=pie-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..128242d
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,47 @@
+import { SimpleChanges, EventEmitter, OnChanges, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { DataItem } from '../models/chart-data.model';
+import { PieData } from './pie-label.component';
+import { PlacementTypes } from '../common/tooltip/position';
+import { StyleTypes } from '../common/tooltip/style.type';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class PieSeriesComponent implements OnChanges {
+    colors: ColorHelper;
+    series: DataItem[];
+    dims: ViewDimensions;
+    innerRadius: number;
+    outerRadius: number;
+    explodeSlices: boolean;
+    showLabels: boolean;
+    gradient: boolean;
+    activeEntries: any[];
+    labelFormatting: any;
+    trimLabels: boolean;
+    maxLabelLength: number;
+    tooltipText: (o: any) => any;
+    tooltipDisabled: boolean;
+    tooltipTemplate: TemplateRef<any>;
+    animations: boolean;
+    select: EventEmitter<any>;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    dblclick: EventEmitter<any>;
+    max: number;
+    data: PieData[];
+    placementTypes: typeof PlacementTypes;
+    styleTypes: typeof StyleTypes;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    midAngle(d: any): number;
+    outerArc(): any;
+    calculateLabelPositions(pieData: any): any;
+    labelVisible(myArc: any): boolean;
+    getTooltipTitle(a: any): any;
+    labelText(myArc: any): string;
+    label(myArc: any): string;
+    defaultTooltipText(myArc: any): string;
+    color(myArc: any): any;
+    trackBy(index: any, item: any): string;
+    onClick(data: any): void;
+    isActive(entry: any): boolean;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-series.component.d.ts.map
new file mode 100644
index 0000000..bd5028f
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/pie-chart/pie-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"pie-series.component.d.ts","sources":["pie-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { SimpleChanges, EventEmitter, OnChanges, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { PieData } from './pie-label.component';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class PieSeriesComponent implements OnChanges {\n    colors: ColorHelper;\n    series: DataItem[];\n    dims: ViewDimensions;\n    innerRadius: number;\n    outerRadius: number;\n    explodeSlices: boolean;\n    showLabels: boolean;\n    gradient: boolean;\n    activeEntries: any[];\n    labelFormatting: any;\n    trimLabels: boolean;\n    maxLabelLength: number;\n    tooltipText: (o: any) => any;\n    tooltipDisabled: boolean;\n    tooltipTemplate: TemplateRef<any>;\n    animations: boolean;\n    select: EventEmitter<any>;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    dblclick: EventEmitter<any>;\n    max: number;\n    data: PieData[];\n    placementTypes: typeof PlacementTypes;\n    styleTypes: typeof StyleTypes;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    midAngle(d: any): number;\n    outerArc(): any;\n    calculateLabelPositions(pieData: any): any;\n    labelVisible(myArc: any): boolean;\n    getTooltipTitle(a: any): any;\n    labelText(myArc: any): string;\n    label(myArc: any): string;\n    defaultTooltipText(myArc: any): string;\n    color(myArc: any): any;\n    trackBy(index: any, item: any): string;\n    onClick(data: any): void;\n    isActive(entry: any): boolean;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.d.ts
index ff67276..ffe48e8 100644
--- a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.d.ts
@@ -5,6 +5,7 @@ import { LegendPosition } from '../common/types/legend.model';
 import { ScaleType } from '../common/types/scale-type.enum';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
 import { Orientation } from '../common/types/orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class PolarChartComponent extends BaseChartComponent {
     legend: boolean;
     legendTitle: string;
@@ -95,4 +96,8 @@ export declare class PolarChartComponent extends BaseChartComponent {
     onDeactivate(item: any): void;
     deactivateAll(): void;
     trackBy(index: number, item: any): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<PolarChartComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PolarChartComponent, "ngx-charts-polar-chart", never, { "legendTitle": "legendTitle"; "legendPosition": "legendPosition"; "showGridLines": "showGridLines"; "curve": "curve"; "activeEntries": "activeEntries"; "rangeFillOpacity": "rangeFillOpacity"; "trimYAxisTicks": "trimYAxisTicks"; "maxYAxisTickLength": "maxYAxisTickLength"; "roundDomains": "roundDomains"; "tooltipDisabled": "tooltipDisabled"; "showSeriesOnHover": "showSeriesOnHover"; "gradient": "gradient"; "yAxisMinScale": "yAxisMinScale"; "labelTrim": "labelTrim"; "labelTrimSize": "labelTrimSize"; "legend": "legend"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showXAxisLabel": "showXAxisLabel"; "showYAxisLabel": "showYAxisLabel"; "xAxisLabel": "xAxisLabel"; "yAxisLabel": "yAxisLabel"; "autoScale": "autoScale"; "schemeType": "schemeType"; "xAxisTickFormatting": "xAxisTickFormatting"; "yAxisTickFormatting": "yAxisTickFormatting"; }, { "activate": "activate"; "deactivate": "deactivate"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=polar-chart.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..ff67276
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,98 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { LegendPosition } from '../common/types/legend.model';
+import { ScaleType } from '../common/types/scale-type.enum';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+import { Orientation } from '../common/types/orientation.enum';
+export declare class PolarChartComponent extends BaseChartComponent {
+    legend: boolean;
+    legendTitle: string;
+    legendPosition: LegendPosition;
+    xAxis: boolean;
+    yAxis: boolean;
+    showXAxisLabel: boolean;
+    showYAxisLabel: boolean;
+    xAxisLabel: string;
+    yAxisLabel: string;
+    autoScale: boolean;
+    showGridLines: boolean;
+    curve: any;
+    activeEntries: any[];
+    schemeType: ScaleType;
+    rangeFillOpacity: number;
+    trimYAxisTicks: boolean;
+    maxYAxisTickLength: number;
+    xAxisTickFormatting: (o: any) => any;
+    yAxisTickFormatting: (o: any) => any;
+    roundDomains: boolean;
+    tooltipDisabled: boolean;
+    showSeriesOnHover: boolean;
+    gradient: boolean;
+    yAxisMinScale: number;
+    labelTrim: boolean;
+    labelTrimSize: number;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    yAxisDims: ViewDimensions;
+    labelOffset: number;
+    xDomain: any;
+    yDomain: any;
+    seriesDomain: any;
+    yScale: any;
+    xScale: any;
+    yAxisScale: any;
+    colors: ColorHelper;
+    scaleType: ScaleType;
+    transform: string;
+    transformPlot: string;
+    transformYAxis: string;
+    transformXAxis: string;
+    margin: number[];
+    xAxisHeight: number;
+    yAxisWidth: number;
+    filteredDomain: any;
+    legendOptions: any;
+    thetaTicks: any[];
+    radiusTicks: number[];
+    outerRadius: number;
+    orientation: typeof Orientation;
+    update(): void;
+    setDims(): void;
+    setScales(): void;
+    setTicks(): void;
+    getXValues(): any[];
+    getXDomain(values?: any[]): any[];
+    getYValues(): any[];
+    getYDomain(domain?: any[]): any[];
+    getSeriesDomain(): any[];
+    getXScale(domain: any, width: number): any;
+    getYScale(domain: any, height: number): any;
+    onClick(data: any, series?: any): void;
+    setColors(): void;
+    getLegendOptions(): {
+        scaleType: ScaleType.Ordinal;
+        colors: ColorHelper;
+        domain: any;
+        title: string;
+        position: LegendPosition;
+    } | {
+        scaleType: ScaleType.Time | ScaleType.Linear | ScaleType.Quantile;
+        colors: any;
+        domain: any;
+        title: any;
+        position: LegendPosition;
+    };
+    updateYAxisWidth({ width }: {
+        width: number;
+    }): void;
+    updateXAxisHeight({ height }: {
+        height: number;
+    }): void;
+    onActivate(item: any): void;
+    onDeactivate(item: any): void;
+    deactivateAll(): void;
+    trackBy(index: number, item: any): string;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.d.ts.map
new file mode 100644
index 0000000..fbdfaa8
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"polar-chart.component.d.ts","sources":["polar-chart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { LegendPosition } from '../common/types/legend.model';\nimport { ScaleType } from '../common/types/scale-type.enum';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nimport { Orientation } from '../common/types/orientation.enum';\nexport declare class PolarChartComponent extends BaseChartComponent {\n    legend: boolean;\n    legendTitle: string;\n    legendPosition: LegendPosition;\n    xAxis: boolean;\n    yAxis: boolean;\n    showXAxisLabel: boolean;\n    showYAxisLabel: boolean;\n    xAxisLabel: string;\n    yAxisLabel: string;\n    autoScale: boolean;\n    showGridLines: boolean;\n    curve: any;\n    activeEntries: any[];\n    schemeType: ScaleType;\n    rangeFillOpacity: number;\n    trimYAxisTicks: boolean;\n    maxYAxisTickLength: number;\n    xAxisTickFormatting: (o: any) => any;\n    yAxisTickFormatting: (o: any) => any;\n    roundDomains: boolean;\n    tooltipDisabled: boolean;\n    showSeriesOnHover: boolean;\n    gradient: boolean;\n    yAxisMinScale: number;\n    labelTrim: boolean;\n    labelTrimSize: number;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    yAxisDims: ViewDimensions;\n    labelOffset: number;\n    xDomain: any;\n    yDomain: any;\n    seriesDomain: any;\n    yScale: any;\n    xScale: any;\n    yAxisScale: any;\n    colors: ColorHelper;\n    scaleType: ScaleType;\n    transform: string;\n    transformPlot: string;\n    transformYAxis: string;\n    transformXAxis: string;\n    margin: number[];\n    xAxisHeight: number;\n    yAxisWidth: number;\n    filteredDomain: any;\n    legendOptions: any;\n    thetaTicks: any[];\n    radiusTicks: number[];\n    outerRadius: number;\n    orientation: typeof Orientation;\n    update(): void;\n    setDims(): void;\n    setScales(): void;\n    setTicks(): void;\n    getXValues(): any[];\n    getXDomain(values?: any[]): any[];\n    getYValues(): any[];\n    getYDomain(domain?: any[]): any[];\n    getSeriesDomain(): any[];\n    getXScale(domain: any, width: number): any;\n    getYScale(domain: any, height: number): any;\n    onClick(data: any, series?: any): void;\n    setColors(): void;\n    getLegendOptions(): {\n        scaleType: ScaleType.Ordinal;\n        colors: ColorHelper;\n        domain: any;\n        title: string;\n        position: LegendPosition;\n    } | {\n        scaleType: ScaleType.Time | ScaleType.Linear | ScaleType.Quantile;\n        colors: any;\n        domain: any;\n        title: any;\n        position: LegendPosition;\n    };\n    updateYAxisWidth({ width }: {\n        width: number;\n    }): void;\n    updateXAxisHeight({ height }: {\n        height: number;\n    }): void;\n    onActivate(item: any): void;\n    onDeactivate(item: any): void;\n    deactivateAll(): void;\n    trackBy(index: number, item: any): string;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.d.ts
index a184f5d..d08d546 100644
--- a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.d.ts
@@ -1,2 +1,13 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './polar-chart.component';
+import * as ɵngcc2 from './polar-series.component';
+import * as ɵngcc3 from '../common/chart-common.module';
+import * as ɵngcc4 from '../pie-chart/pie-chart.module';
+import * as ɵngcc5 from '../line-chart/line-chart.module';
 export declare class PolarChartModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<PolarChartModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<PolarChartModule, [typeof ɵngcc1.PolarChartComponent, typeof ɵngcc2.PolarSeriesComponent], [typeof ɵngcc3.ChartCommonModule, typeof ɵngcc4.PieChartModule, typeof ɵngcc5.LineChartModule], [typeof ɵngcc1.PolarChartComponent, typeof ɵngcc2.PolarSeriesComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<PolarChartModule>;
 }
+
+//# sourceMappingURL=polar-chart.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..a184f5d
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class PolarChartModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.d.ts.map
new file mode 100644
index 0000000..380f9eb
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-chart.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"polar-chart.module.d.ts","sources":["polar-chart.module.d.ts"],"names":[],"mappings":";;;;;;AAAA;;;;AACA","sourcesContent":["export declare class PolarChartModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-series.component.d.ts
index 43ec092..17377a0 100644
--- a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-series.component.d.ts
@@ -3,6 +3,7 @@ import { Series, DataItem } from '../models/chart-data.model';
 import { PlacementTypes } from '../common/tooltip/position';
 import { StyleTypes } from '../common/tooltip/style.type';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 interface PolarChartCircle {
     color: string;
     cx: number;
@@ -57,5 +58,9 @@ export declare class PolarSeriesComponent implements OnChanges {
         value: number;
     }): string;
     updateGradients(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<PolarSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PolarSeriesComponent, "g[ngx-charts-polar-series]", never, { "tooltipDisabled": "tooltipDisabled"; "gradient": "gradient"; "animations": "animations"; "tooltipText": "tooltipText"; "name": "name"; "data": "data"; "xScale": "xScale"; "yScale": "yScale"; "colors": "colors"; "scaleType": "scaleType"; "curve": "curve"; "activeEntries": "activeEntries"; "rangeFillOpacity": "rangeFillOpacity"; "tooltipTemplate": "tooltipTemplate"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; }, never, never>;
 }
 export {};
+
+//# sourceMappingURL=polar-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..43ec092
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,61 @@
+import { OnChanges, SimpleChanges, TemplateRef, EventEmitter } from '@angular/core';
+import { Series, DataItem } from '../models/chart-data.model';
+import { PlacementTypes } from '../common/tooltip/position';
+import { StyleTypes } from '../common/tooltip/style.type';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+interface PolarChartCircle {
+    color: string;
+    cx: number;
+    cy: number;
+    data: Series;
+    label: string;
+    value: number;
+}
+export declare class PolarSeriesComponent implements OnChanges {
+    name: any;
+    data: any;
+    xScale: any;
+    yScale: any;
+    colors: any;
+    scaleType: any;
+    curve: any;
+    activeEntries: any[];
+    rangeFillOpacity: number;
+    tooltipDisabled: boolean;
+    tooltipText: (o: any) => string;
+    gradient: boolean;
+    tooltipTemplate: TemplateRef<any>;
+    animations: boolean;
+    select: EventEmitter<any>;
+    activate: EventEmitter<any>;
+    deactivate: EventEmitter<any>;
+    path: string;
+    circles: PolarChartCircle[];
+    circleRadius: number;
+    areaPath: string;
+    gradientId: string;
+    gradientUrl: string;
+    hasGradient: boolean;
+    gradientStops: any[];
+    areaGradientStops: any[];
+    seriesColor: string;
+    active: boolean;
+    inactive: boolean;
+    barOrientation: typeof BarOrientation;
+    placementTypes: typeof PlacementTypes;
+    styleTypes: typeof StyleTypes;
+    ngOnChanges(changes: SimpleChanges): void;
+    update(): void;
+    getAngle(d: DataItem): any;
+    getRadius(d: DataItem): any;
+    getLineGenerator(): any;
+    sortData(data: DataItem): any[];
+    isActive(entry: DataItem): boolean;
+    isInactive(entry: DataItem): boolean;
+    defaultTooltipText({ label, value }: {
+        label: string;
+        value: number;
+    }): string;
+    updateGradients(): void;
+}
+export {};
diff --git a/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-series.component.d.ts.map
new file mode 100644
index 0000000..e4fecef
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/polar-chart/polar-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"polar-series.component.d.ts","sources":["polar-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { OnChanges, SimpleChanges, TemplateRef, EventEmitter } from '@angular/core';\nimport { Series, DataItem } from '../models/chart-data.model';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\ninterface PolarChartCircle {\n    color: string;\n    cx: number;\n    cy: number;\n    data: Series;\n    label: string;\n    value: number;\n}\nexport declare class PolarSeriesComponent implements OnChanges {\n    name: any;\n    data: any;\n    xScale: any;\n    yScale: any;\n    colors: any;\n    scaleType: any;\n    curve: any;\n    activeEntries: any[];\n    rangeFillOpacity: number;\n    tooltipDisabled: boolean;\n    tooltipText: (o: any) => string;\n    gradient: boolean;\n    tooltipTemplate: TemplateRef<any>;\n    animations: boolean;\n    select: EventEmitter<any>;\n    activate: EventEmitter<any>;\n    deactivate: EventEmitter<any>;\n    path: string;\n    circles: PolarChartCircle[];\n    circleRadius: number;\n    areaPath: string;\n    gradientId: string;\n    gradientUrl: string;\n    hasGradient: boolean;\n    gradientStops: any[];\n    areaGradientStops: any[];\n    seriesColor: string;\n    active: boolean;\n    inactive: boolean;\n    barOrientation: typeof BarOrientation;\n    placementTypes: typeof PlacementTypes;\n    styleTypes: typeof StyleTypes;\n    ngOnChanges(changes: SimpleChanges): void;\n    update(): void;\n    getAngle(d: DataItem): any;\n    getRadius(d: DataItem): any;\n    getLineGenerator(): any;\n    sortData(data: DataItem): any[];\n    isActive(entry: DataItem): boolean;\n    isInactive(entry: DataItem): boolean;\n    defaultTooltipText({ label, value }: {\n        label: string;\n        value: number;\n    }): string;\n    updateGradients(): void;\n}\nexport {};\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.d.ts
index 7bb1b34..f67e48e 100644
--- a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.d.ts
@@ -4,6 +4,7 @@ import { DataItem } from '../models/chart-data.model';
 import { StyleTypes } from '../common/tooltip/style.type';
 import { PlacementTypes } from '../common/tooltip/position';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 interface TreeMapCell {
     data: DataItem;
     fill: string;
@@ -36,5 +37,9 @@ export declare class TreeMapCellSeriesComponent implements OnChanges {
     }): string;
     onClick(data: any): void;
     trackBy(index: any, item: any): string;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeMapCellSeriesComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeMapCellSeriesComponent, "g[ngx-charts-tree-map-cell-series]", never, { "gradient": "gradient"; "tooltipDisabled": "tooltipDisabled"; "animations": "animations"; "data": "data"; "dims": "dims"; "colors": "colors"; "valueFormatting": "valueFormatting"; "labelFormatting": "labelFormatting"; "tooltipTemplate": "tooltipTemplate"; }, { "select": "select"; }, never, never>;
 }
 export {};
+
+//# sourceMappingURL=tree-map-cell-series.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..7bb1b34
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,40 @@
+import { OnChanges, SimpleChanges, EventEmitter, TemplateRef } from '@angular/core';
+import { ColorHelper } from '../common/color.helper';
+import { DataItem } from '../models/chart-data.model';
+import { StyleTypes } from '../common/tooltip/style.type';
+import { PlacementTypes } from '../common/tooltip/position';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+interface TreeMapCell {
+    data: DataItem;
+    fill: string;
+    height: number;
+    label: string;
+    value: any;
+    width: number;
+    x: number;
+    y: number;
+}
+export declare class TreeMapCellSeriesComponent implements OnChanges {
+    data: any;
+    dims: ViewDimensions;
+    colors: ColorHelper;
+    valueFormatting: any;
+    labelFormatting: any;
+    gradient: boolean;
+    tooltipDisabled: boolean;
+    tooltipTemplate: TemplateRef<any>;
+    animations: boolean;
+    select: EventEmitter<any>;
+    cells: TreeMapCell[];
+    styleTypes: typeof StyleTypes;
+    placementTypes: typeof PlacementTypes;
+    ngOnChanges(changes: SimpleChanges): void;
+    getCells(): TreeMapCell[];
+    getTooltipText({ label, value }: {
+        label: any;
+        value: any;
+    }): string;
+    onClick(data: any): void;
+    trackBy(index: any, item: any): string;
+}
+export {};
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.d.ts.map
new file mode 100644
index 0000000..0a41796
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell-series.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-map-cell-series.component.d.ts","sources":["tree-map-cell-series.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { OnChanges, SimpleChanges, EventEmitter, TemplateRef } from '@angular/core';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { StyleTypes } from '../common/tooltip/style.type';\nimport { PlacementTypes } from '../common/tooltip/position';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\ninterface TreeMapCell {\n    data: DataItem;\n    fill: string;\n    height: number;\n    label: string;\n    value: any;\n    width: number;\n    x: number;\n    y: number;\n}\nexport declare class TreeMapCellSeriesComponent implements OnChanges {\n    data: any;\n    dims: ViewDimensions;\n    colors: ColorHelper;\n    valueFormatting: any;\n    labelFormatting: any;\n    gradient: boolean;\n    tooltipDisabled: boolean;\n    tooltipTemplate: TemplateRef<any>;\n    animations: boolean;\n    select: EventEmitter<any>;\n    cells: TreeMapCell[];\n    styleTypes: typeof StyleTypes;\n    placementTypes: typeof PlacementTypes;\n    ngOnChanges(changes: SimpleChanges): void;\n    getCells(): TreeMapCell[];\n    getTooltipText({ label, value }: {\n        label: any;\n        value: any;\n    }): string;\n    onClick(data: any): void;\n    trackBy(index: any, item: any): string;\n}\nexport {};\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.d.ts
index ae01520..2c26b7a 100644
--- a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.d.ts
@@ -2,6 +2,7 @@ import { EventEmitter, ElementRef, OnChanges } from '@angular/core';
 import { DataItem } from '../models/chart-data.model';
 import { Gradient } from '../common/types/gradient.interface';
 import { BarOrientation } from '../common/types/bar-orientation.enum';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeMapCellComponent implements OnChanges {
     data: DataItem;
     fill: string;
@@ -33,4 +34,8 @@ export declare class TreeMapCellComponent implements OnChanges {
     animateToCurrentForm(): void;
     onClick(): void;
     getGradientStops(): Gradient[];
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeMapCellComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeMapCellComponent, "g[ngx-charts-tree-map-cell]", never, { "gradient": "gradient"; "animations": "animations"; "valueFormatting": "valueFormatting"; "data": "data"; "fill": "fill"; "x": "x"; "y": "y"; "width": "width"; "height": "height"; "label": "label"; "value": "value"; "labelFormatting": "labelFormatting"; }, { "select": "select"; }, never, never>;
 }
+
+//# sourceMappingURL=tree-map-cell.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..ae01520
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,36 @@
+import { EventEmitter, ElementRef, OnChanges } from '@angular/core';
+import { DataItem } from '../models/chart-data.model';
+import { Gradient } from '../common/types/gradient.interface';
+import { BarOrientation } from '../common/types/bar-orientation.enum';
+export declare class TreeMapCellComponent implements OnChanges {
+    data: DataItem;
+    fill: string;
+    x: number;
+    y: number;
+    width: number;
+    height: number;
+    label: string;
+    value: any;
+    valueFormatting: any;
+    labelFormatting: any;
+    gradient: boolean;
+    animations: boolean;
+    select: EventEmitter<any>;
+    gradientStops: Gradient[];
+    gradientId: string;
+    gradientUrl: string;
+    element: HTMLElement;
+    transform: string;
+    formattedLabel: string;
+    formattedValue: string;
+    initialized: boolean;
+    orientation: typeof BarOrientation;
+    constructor(element: ElementRef);
+    ngOnChanges(): void;
+    update(): void;
+    loadAnimation(): void;
+    getTextColor(): string;
+    animateToCurrentForm(): void;
+    onClick(): void;
+    getGradientStops(): Gradient[];
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.d.ts.map
new file mode 100644
index 0000000..5bfe1e4
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map-cell.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-map-cell.component.d.ts","sources":["tree-map-cell.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, OnChanges } from '@angular/core';\nimport { DataItem } from '../models/chart-data.model';\nimport { Gradient } from '../common/types/gradient.interface';\nimport { BarOrientation } from '../common/types/bar-orientation.enum';\nexport declare class TreeMapCellComponent implements OnChanges {\n    data: DataItem;\n    fill: string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    label: string;\n    value: any;\n    valueFormatting: any;\n    labelFormatting: any;\n    gradient: boolean;\n    animations: boolean;\n    select: EventEmitter<any>;\n    gradientStops: Gradient[];\n    gradientId: string;\n    gradientUrl: string;\n    element: HTMLElement;\n    transform: string;\n    formattedLabel: string;\n    formattedValue: string;\n    initialized: boolean;\n    orientation: typeof BarOrientation;\n    constructor(element: ElementRef);\n    ngOnChanges(): void;\n    update(): void;\n    loadAnimation(): void;\n    getTextColor(): string;\n    animateToCurrentForm(): void;\n    onClick(): void;\n    getGradientStops(): Gradient[];\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.component.d.ts b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.component.d.ts
index db4302d..6225b19 100644
--- a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.component.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.component.d.ts
@@ -3,6 +3,7 @@ import { BaseChartComponent } from '../common/base-chart.component';
 import { ColorHelper } from '../common/color.helper';
 import { DataItem } from '../models/chart-data.model';
 import { ViewDimensions } from '../common/types/view-dimension.interface';
+import * as ɵngcc0 from '@angular/core';
 export declare class TreeMapComponent extends BaseChartComponent {
     results: DataItem[];
     tooltipDisabled: boolean;
@@ -22,4 +23,8 @@ export declare class TreeMapComponent extends BaseChartComponent {
     getDomain(): any[];
     onClick(data: DataItem): void;
     setColors(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeMapComponent, never>;
+    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeMapComponent, "ngx-charts-tree-map", never, { "tooltipDisabled": "tooltipDisabled"; "gradient": "gradient"; "results": "results"; "valueFormatting": "valueFormatting"; "labelFormatting": "labelFormatting"; }, { "select": "select"; }, ["tooltipTemplate"], never>;
 }
+
+//# sourceMappingURL=tree-map.component.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.component.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.component.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..db4302d
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.component.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,25 @@
+import { EventEmitter, TemplateRef } from '@angular/core';
+import { BaseChartComponent } from '../common/base-chart.component';
+import { ColorHelper } from '../common/color.helper';
+import { DataItem } from '../models/chart-data.model';
+import { ViewDimensions } from '../common/types/view-dimension.interface';
+export declare class TreeMapComponent extends BaseChartComponent {
+    results: DataItem[];
+    tooltipDisabled: boolean;
+    valueFormatting: any;
+    labelFormatting: any;
+    gradient: boolean;
+    select: EventEmitter<any>;
+    tooltipTemplate: TemplateRef<any>;
+    dims: ViewDimensions;
+    domain: any;
+    transform: any;
+    colors: ColorHelper;
+    treemap: any;
+    data: DataItem;
+    margin: number[];
+    update(): void;
+    getDomain(): any[];
+    onClick(data: DataItem): void;
+    setColors(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.component.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.component.d.ts.map
new file mode 100644
index 0000000..8d46d0a
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.component.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-map.component.d.ts","sources":["tree-map.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, TemplateRef } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { ColorHelper } from '../common/color.helper';\nimport { DataItem } from '../models/chart-data.model';\nimport { ViewDimensions } from '../common/types/view-dimension.interface';\nexport declare class TreeMapComponent extends BaseChartComponent {\n    results: DataItem[];\n    tooltipDisabled: boolean;\n    valueFormatting: any;\n    labelFormatting: any;\n    gradient: boolean;\n    select: EventEmitter<any>;\n    tooltipTemplate: TemplateRef<any>;\n    dims: ViewDimensions;\n    domain: any;\n    transform: any;\n    colors: ColorHelper;\n    treemap: any;\n    data: DataItem;\n    margin: number[];\n    update(): void;\n    getDomain(): any[];\n    onClick(data: DataItem): void;\n    setColors(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.module.d.ts b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.module.d.ts
index ff18cce..b89a7e5 100644
--- a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.module.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.module.d.ts
@@ -1,2 +1,12 @@
+import * as ɵngcc0 from '@angular/core';
+import * as ɵngcc1 from './tree-map-cell.component';
+import * as ɵngcc2 from './tree-map-cell-series.component';
+import * as ɵngcc3 from './tree-map.component';
+import * as ɵngcc4 from '../common/chart-common.module';
 export declare class TreeMapModule {
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeMapModule, never>;
+    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TreeMapModule, [typeof ɵngcc1.TreeMapCellComponent, typeof ɵngcc2.TreeMapCellSeriesComponent, typeof ɵngcc3.TreeMapComponent], [typeof ɵngcc4.ChartCommonModule], [typeof ɵngcc1.TreeMapCellComponent, typeof ɵngcc2.TreeMapCellSeriesComponent, typeof ɵngcc3.TreeMapComponent]>;
+    static ɵinj: ɵngcc0.ɵɵInjectorDef<TreeMapModule>;
 }
+
+//# sourceMappingURL=tree-map.module.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.module.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.module.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..ff18cce
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.module.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,2 @@
+export declare class TreeMapModule {
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.module.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.module.d.ts.map
new file mode 100644
index 0000000..9d3d2d7
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/tree-map/tree-map.module.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"tree-map.module.d.ts","sources":["tree-map.module.d.ts"],"names":[],"mappings":";;;;;AAAA;;;;AACA","sourcesContent":["export declare class TreeMapModule {\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/utils/visibility-observer.d.ts b/node_modules/@swimlane/ngx-charts/lib/utils/visibility-observer.d.ts
index f216b7c..a66e87b 100644
--- a/node_modules/@swimlane/ngx-charts/lib/utils/visibility-observer.d.ts
+++ b/node_modules/@swimlane/ngx-charts/lib/utils/visibility-observer.d.ts
@@ -2,6 +2,7 @@ import { EventEmitter, NgZone, ElementRef } from '@angular/core';
 /**
  * Visibility Observer
  */
+import * as ɵngcc0 from '@angular/core';
 export declare class VisibilityObserver {
     private element;
     private zone;
@@ -12,4 +13,8 @@ export declare class VisibilityObserver {
     destroy(): void;
     onVisibilityChange(): void;
     runCheck(): void;
+    static ɵfac: ɵngcc0.ɵɵFactoryDef<VisibilityObserver, never>;
+    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<VisibilityObserver, "visibility-observer", never, {}, { "visible": "visible"; }, never>;
 }
+
+//# sourceMappingURL=visibility-observer.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/lib/utils/visibility-observer.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/lib/utils/visibility-observer.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..f216b7c
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/utils/visibility-observer.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,15 @@
+import { EventEmitter, NgZone, ElementRef } from '@angular/core';
+/**
+ * Visibility Observer
+ */
+export declare class VisibilityObserver {
+    private element;
+    private zone;
+    visible: EventEmitter<any>;
+    timeout: any;
+    isVisible: boolean;
+    constructor(element: ElementRef, zone: NgZone);
+    destroy(): void;
+    onVisibilityChange(): void;
+    runCheck(): void;
+}
diff --git a/node_modules/@swimlane/ngx-charts/lib/utils/visibility-observer.d.ts.map b/node_modules/@swimlane/ngx-charts/lib/utils/visibility-observer.d.ts.map
new file mode 100644
index 0000000..6dd6653
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/lib/utils/visibility-observer.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"visibility-observer.d.ts","sources":["visibility-observer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, NgZone, ElementRef } from '@angular/core';\n/**\n * Visibility Observer\n */\nexport declare class VisibilityObserver {\n    private element;\n    private zone;\n    visible: EventEmitter<any>;\n    timeout: any;\n    isVisible: boolean;\n    constructor(element: ElementRef, zone: NgZone);\n    destroy(): void;\n    onVisibilityChange(): void;\n    runCheck(): void;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/swimlane-ngx-charts.d.ts b/node_modules/@swimlane/ngx-charts/swimlane-ngx-charts.d.ts
index b1d210c..9c7008f 100644
--- a/node_modules/@swimlane/ngx-charts/swimlane-ngx-charts.d.ts
+++ b/node_modules/@swimlane/ngx-charts/swimlane-ngx-charts.d.ts
@@ -4,3 +4,5 @@
 export * from './public-api';
 export { InjectionRegisteryService as ɵa } from './lib/common/tooltip/injection-registery.service';
 export { InjectionService as ɵb } from './lib/common/tooltip/injection.service';
+
+//# sourceMappingURL=swimlane-ngx-charts.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@swimlane/ngx-charts/swimlane-ngx-charts.d.ts.__ivy_ngcc_bak b/node_modules/@swimlane/ngx-charts/swimlane-ngx-charts.d.ts.__ivy_ngcc_bak
new file mode 100644
index 0000000..b1d210c
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/swimlane-ngx-charts.d.ts.__ivy_ngcc_bak
@@ -0,0 +1,6 @@
+/**
+ * Generated bundle index. Do not edit.
+ */
+export * from './public-api';
+export { InjectionRegisteryService as ɵa } from './lib/common/tooltip/injection-registery.service';
+export { InjectionService as ɵb } from './lib/common/tooltip/injection.service';
diff --git a/node_modules/@swimlane/ngx-charts/swimlane-ngx-charts.d.ts.map b/node_modules/@swimlane/ngx-charts/swimlane-ngx-charts.d.ts.map
new file mode 100644
index 0000000..e255c03
--- /dev/null
+++ b/node_modules/@swimlane/ngx-charts/swimlane-ngx-charts.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"swimlane-ngx-charts.d.ts","sources":["swimlane-ngx-charts.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\nexport * from './public-api';\nexport { InjectionRegisteryService as ɵa } from './lib/common/tooltip/injection-registery.service';\nexport { InjectionService as ɵb } from './lib/common/tooltip/injection.service';\n"]}
\ No newline at end of file
